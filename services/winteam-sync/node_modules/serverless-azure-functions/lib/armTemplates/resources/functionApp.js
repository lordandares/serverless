"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var armTemplates_1 = require("../../models/armTemplates");
var namingService_1 = require("../../services/namingService");
//Runtime versions found at " https://<sitename>.scm.azurewebsites.net/api/diagnostics/runtime".
var runtimeVersions_json_1 = __importDefault(require("../../services/runtimeVersions.json"));
var semver_1 = __importDefault(require("semver"));
var FunctionAppResource = /** @class */ (function () {
    function FunctionAppResource() {
    }
    FunctionAppResource.getResourceName = function (config) {
        var safeServiceName = config.service.replace(/\s/g, "-");
        var options = {
            config: config,
            resourceConfig: config.provider.functionApp,
            suffix: safeServiceName,
            includeHash: false,
        };
        return namingService_1.AzureNamingService.getResourceName(options);
    };
    FunctionAppResource.prototype.getTemplate = function () {
        return {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
                "functionAppRunFromPackage": {
                    "defaultValue": "1",
                    "type": armTemplates_1.ArmParamType.String
                },
                "functionAppName": {
                    "defaultValue": "",
                    "type": armTemplates_1.ArmParamType.String
                },
                "functionAppNodeVersion": {
                    "defaultValue": "",
                    "type": armTemplates_1.ArmParamType.String
                },
                "functionAppWorkerRuntime": {
                    "defaultValue": "node",
                    "type": armTemplates_1.ArmParamType.String
                },
                "functionAppExtensionVersion": {
                    "defaultValue": "~2",
                    "type": armTemplates_1.ArmParamType.String
                },
                "storageAccountName": {
                    "defaultValue": "",
                    "type": armTemplates_1.ArmParamType.String
                },
                "appInsightsName": {
                    "defaultValue": "",
                    "type": armTemplates_1.ArmParamType.String
                },
                "location": {
                    "defaultValue": "",
                    "type": armTemplates_1.ArmParamType.String
                },
            },
            "variables": {},
            "resources": [
                {
                    "type": "Microsoft.Web/sites",
                    "apiVersion": "2016-03-01",
                    "name": "[parameters('functionAppName')]",
                    "location": "[parameters('location')]",
                    "identity": {
                        "type": armTemplates_1.ArmParamType.SystemAssigned
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                        "[concat('microsoft.insights/components/', parameters('appInsightsName'))]"
                    ],
                    "kind": "functionapp",
                    "properties": {
                        "siteConfig": {
                            "appSettings": [
                                {
                                    "name": "FUNCTIONS_WORKER_RUNTIME",
                                    "value": "[parameters('functionAppWorkerRuntime')]"
                                },
                                {
                                    "name": "FUNCTIONS_EXTENSION_VERSION",
                                    "value": "[parameters('functionAppExtensionVersion')]"
                                },
                                {
                                    "name": "AzureWebJobsStorage",
                                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2016-01-01').keys[0].value)]"
                                },
                                {
                                    "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2016-01-01').keys[0].value)]"
                                },
                                {
                                    "name": "WEBSITE_CONTENTSHARE",
                                    "value": "[toLower(parameters('functionAppName'))]"
                                },
                                {
                                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                                    "value": "[parameters('functionAppNodeVersion')]"
                                },
                                {
                                    "name": "WEBSITE_RUN_FROM_PACKAGE",
                                    "value": "[parameters('functionAppRunFromPackage')]"
                                },
                                {
                                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                                    "value": "[reference(concat('microsoft.insights/components/', parameters('appInsightsName'))).InstrumentationKey]"
                                }
                            ]
                        },
                        "name": "[parameters('functionAppName')]",
                        "clientAffinityEnabled": false,
                        "hostingEnvironment": ""
                    }
                }
            ]
        };
    };
    FunctionAppResource.prototype.getParameters = function (config) {
        var resourceConfig = __assign({}, config.provider.functionApp, { nodeVersion: this.getRuntimeVersion(config.provider.runtime) });
        return {
            functionAppName: {
                value: FunctionAppResource.getResourceName(config),
            },
            functionAppNodeVersion: {
                value: resourceConfig.nodeVersion,
            },
            functionAppWorkerRuntime: {
                value: resourceConfig.workerRuntime,
            },
            functionAppExtensionVersion: {
                value: resourceConfig.extensionVersion,
            }
        };
    };
    FunctionAppResource.prototype.getRuntimeVersion = function (runtime) {
        var e_1, _a;
        if (!runtime) {
            throw new Error("Runtime version not specified in serverless.yml");
        }
        var extractedVersion = runtime.split("nodejs")[1];
        var runtimeVersionsList = runtimeVersions_json_1.default["nodejs"];
        //Searches for a specific version. For example nodejs10.6.0.
        if (!extractedVersion.endsWith(".x")) {
            var retrivedVersion = void 0;
            try {
                for (var runtimeVersionsList_1 = __values(runtimeVersionsList), runtimeVersionsList_1_1 = runtimeVersionsList_1.next(); !runtimeVersionsList_1_1.done; runtimeVersionsList_1_1 = runtimeVersionsList_1.next()) {
                    var version = runtimeVersionsList_1_1.value;
                    retrivedVersion = version["version"];
                    if (extractedVersion === retrivedVersion && semver_1.default.valid(retrivedVersion)) {
                        return retrivedVersion;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (runtimeVersionsList_1_1 && !runtimeVersionsList_1_1.done && (_a = runtimeVersionsList_1.return)) _a.call(runtimeVersionsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            // User specified something like nodejs10.14.x
            var extractedVersionNumber_1 = extractedVersion.replace(/[^0-9\.]/g, "");
            var selectedVersions = runtimeVersionsList.filter(function (_a) {
                var version = _a.version;
                return version.startsWith(extractedVersionNumber_1) && semver_1.default.valid(version);
            }).map(function (item) { return item.version; });
            if (!selectedVersions.length) {
                throw new Error("Could not find runtime version matching " + runtime);
            }
            return selectedVersions.sort(semver_1.default.rcompare)[0];
        }
        throw new Error("Could not find runtime version matching " + runtime);
    };
    return FunctionAppResource;
}());
exports.FunctionAppResource = FunctionAppResource;
