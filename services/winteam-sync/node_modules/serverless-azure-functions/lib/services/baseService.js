"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var fs_1 = __importDefault(require("fs"));
var request_1 = __importDefault(require("request"));
var storageAccount_1 = require("../armTemplates/resources/storageAccount");
var config_1 = require("../config");
var guard_1 = require("../shared/guard");
var utils_1 = require("../shared/utils");
var namingService_1 = require("./namingService");
var BaseService = /** @class */ (function () {
    function BaseService(serverless, options, authenticate) {
        if (options === void 0) { options = { stage: null, region: null }; }
        if (authenticate === void 0) { authenticate = true; }
        this.serverless = serverless;
        this.options = options;
        guard_1.Guard.null(serverless);
        this.setDefaultValues();
        this.config = serverless.service;
        this.setupConfig();
        this.baseUrl = "https://management.azure.com";
        this.serviceName = this.getServiceName();
        this.credentials = serverless.variables["azureCredentials"];
        this.subscriptionId = this.config.provider.subscriptionId;
        this.resourceGroup = this.getResourceGroupName();
        this.deploymentConfig = this.getDeploymentConfig();
        this.deploymentName = this.getDeploymentName();
        this.artifactName = this.getArtifactName(this.deploymentName);
        this.storageAccountName = storageAccount_1.StorageAccountResource.getResourceName(this.config);
        if (!this.credentials && authenticate) {
            throw new Error("Azure Credentials has not been set in " + this.constructor.name);
        }
    }
    /**
     * Name of Azure Region for deployment
     */
    BaseService.prototype.getRegion = function () {
        return this.config.provider.region;
    };
    /**
     * Name of current deployment stage
     */
    BaseService.prototype.getStage = function () {
        return this.config.provider.stage;
    };
    /**
     * Prefix for service
     */
    BaseService.prototype.getPrefix = function () {
        return this.config.provider.prefix;
    };
    /**
     * Name of current resource group
     */
    BaseService.prototype.getResourceGroupName = function () {
        return this.config.provider.resourceGroup;
    };
    /**
     * Azure Subscription ID
     */
    BaseService.prototype.getSubscriptionId = function () {
        return this.config.provider.subscriptionId;
    };
    /**
     * Deployment config from `serverless.yml` or default.
     * Defaults can be found in the `config.ts` file
     */
    BaseService.prototype.getDeploymentConfig = function () {
        return __assign({}, config_1.configConstants.deploymentConfig, this.config.provider.deployment);
    };
    /**
     * Name of current ARM deployment.
     *
     * Naming convention:
     *
     * {safeName (see naming service)}--{serviceName}(if rollback enabled: -t{timestamp})
     *
     * The string is guaranteed to be less than 64 characters, since that is the limit
     * imposed by Azure deployment names. If a trim is needed, the service name will be trimmed
     */
    BaseService.prototype.getDeploymentName = function () {
        return namingService_1.AzureNamingService.getDeploymentName(this.config, (this.deploymentConfig.rollback) ? "t" + this.getTimestamp() : null);
    };
    /**
     * Name of Function App Service
     */
    BaseService.prototype.getServiceName = function () {
        return this.serverless.service["service"];
    };
    /**
     * Get rollback-configured artifact name. Contains `-t{timestamp}`
     * Takes name of deployment and replaces `rg-deployment` or `deployment` with `artifact`
     */
    BaseService.prototype.getArtifactName = function (deploymentName) {
        var _a = config_1.configConstants.naming.suffix, deployment = _a.deployment, artifact = _a.artifact;
        return deploymentName
            .replace("rg-" + deployment, artifact)
            .replace(deployment, artifact) + ".zip";
    };
    /**
     * Get the access token from credentials token cache
     */
    BaseService.prototype.getAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.credentials.getToken()];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, token ? token.accessToken : null];
                }
            });
        });
    };
    /**
     * Sends an API request using axios HTTP library
     * @param method The HTTP method
     * @param relativeUrl The relative url
     * @param options Additional HTTP options including headers, etc.
     */
    BaseService.prototype.sendApiRequest = function (method, relativeUrl, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var defaultHeaders, _a, _b, allHeaders, requestOptions;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = {};
                        _b = "Bearer ";
                        return [4 /*yield*/, this.getAccessToken()];
                    case 1:
                        defaultHeaders = (_a.Authorization = _b + (_c.sent()),
                            _a);
                        allHeaders = __assign({}, defaultHeaders, options.headers);
                        requestOptions = __assign({}, options, { method: method, headers: allHeaders });
                        return [4 /*yield*/, axios_1.default(relativeUrl, requestOptions)];
                    case 2: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    /**
     * Uploads the specified file via HTTP request
     * @param requestOptions The HTTP request options
     * @param filePath The local file path
     */
    BaseService.prototype.sendFile = function (requestOptions, filePath) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            fs_1.default.createReadStream(filePath).pipe(request_1.default(requestOptions, function (err, response) {
                if (err) {
                    _this.log(JSON.stringify(err, null, 4));
                    return reject(err);
                }
                resolve(response);
            }));
        });
    };
    /**
     * Log message to Serverless CLI
     * @param message Message to log
     */
    BaseService.prototype.log = function (message, options, entity) {
        this.serverless.cli.log(message, entity, options);
    };
    /**
     * Get function objects
     */
    BaseService.prototype.slsFunctions = function () {
        return this.serverless.service["functions"];
    };
    BaseService.prototype.slsConfigFile = function () {
        return "config" in this.options ? this.options["config"] : "serverless.yml";
    };
    BaseService.prototype.getOption = function (key, defaultValue) {
        return utils_1.Utils.get(this.options, key, defaultValue);
    };
    BaseService.prototype.prettyPrint = function (object) {
        this.log(JSON.stringify(object, null, 2));
    };
    BaseService.prototype.setDefaultValues = function () {
        // TODO: Right now the serverless core will always default to AWS default region if the
        // region has not been set in the serverless.yml or CLI options
        var awsDefault = "us-east-1";
        var providerRegion = this.serverless.service.provider.region;
        if (!providerRegion || providerRegion === awsDefault) {
            // no region specified in serverless.yml
            this.serverless.service.provider.region = this.serverless.service.provider["location"] || "westus";
        }
        if (!this.serverless.service.provider.stage) {
            this.serverless.service.provider.stage = "dev";
        }
        if (!this.serverless.service.provider["prefix"]) {
            this.serverless.service.provider["prefix"] = "sls";
        }
    };
    /**
     * Get timestamp from `packageTimestamp` serverless variable
     * If not set, create timestamp, set variable and return timestamp
     */
    BaseService.prototype.getTimestamp = function () {
        var timestamp = +this.serverless.variables["packageTimestamp"];
        if (!timestamp) {
            timestamp = Date.now();
            this.serverless.variables["packageTimestamp"] = timestamp;
        }
        return timestamp;
    };
    /**
     * Overwrite values for resourceGroup, prefix, region and stage
     * in config if passed through CLI
     */
    BaseService.prototype.setupConfig = function () {
        var _a = this.config.provider, prefix = _a.prefix, region = _a.region, stage = _a.stage, subscriptionId = _a.subscriptionId;
        var options = {
            config: this.config,
            suffix: this.getServiceName() + "-rg",
            includeHash: false,
        };
        this.config.provider = __assign({}, this.config.provider, { prefix: this.getOption("prefix") || prefix, stage: this.getOption("stage") || stage, region: this.getOption("region") || region, subscriptionId: this.getOption("subscriptionId")
                || process.env.AZURE_SUBSCRIPTION_ID
                || subscriptionId
                || this.serverless.variables["subscriptionId"] });
        this.config.provider.resourceGroup = (this.getOption("resourceGroup", this.config.provider.resourceGroup)) || namingService_1.AzureNamingService.getResourceName(options);
    };
    return BaseService;
}());
exports.BaseService = BaseService;
