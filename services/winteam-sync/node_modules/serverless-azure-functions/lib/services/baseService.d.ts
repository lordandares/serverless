import { TokenCredentialsBase } from "@azure/ms-rest-nodeauth";
import Serverless from "serverless";
import { DeploymentConfig, ServerlessAzureConfig, ServerlessAzureFunctionConfig, ServerlessAzureOptions, ServerlessLogOptions } from "../models/serverless";
export declare abstract class BaseService {
    protected serverless: Serverless;
    protected options: ServerlessAzureOptions;
    protected baseUrl: string;
    protected serviceName: string;
    protected credentials: TokenCredentialsBase;
    protected subscriptionId: string;
    protected resourceGroup: string;
    protected deploymentName: string;
    protected artifactName: string;
    protected deploymentConfig: DeploymentConfig;
    protected storageAccountName: string;
    protected config: ServerlessAzureConfig;
    protected constructor(serverless: Serverless, options?: ServerlessAzureOptions, authenticate?: boolean);
    /**
     * Name of Azure Region for deployment
     */
    getRegion(): string;
    /**
     * Name of current deployment stage
     */
    getStage(): string;
    /**
     * Prefix for service
     */
    getPrefix(): string;
    /**
     * Name of current resource group
     */
    getResourceGroupName(): string;
    /**
     * Azure Subscription ID
     */
    getSubscriptionId(): string;
    /**
     * Deployment config from `serverless.yml` or default.
     * Defaults can be found in the `config.ts` file
     */
    getDeploymentConfig(): DeploymentConfig;
    /**
     * Name of current ARM deployment.
     *
     * Naming convention:
     *
     * {safeName (see naming service)}--{serviceName}(if rollback enabled: -t{timestamp})
     *
     * The string is guaranteed to be less than 64 characters, since that is the limit
     * imposed by Azure deployment names. If a trim is needed, the service name will be trimmed
     */
    getDeploymentName(): string;
    /**
     * Name of Function App Service
     */
    getServiceName(): string;
    /**
     * Get rollback-configured artifact name. Contains `-t{timestamp}`
     * Takes name of deployment and replaces `rg-deployment` or `deployment` with `artifact`
     */
    protected getArtifactName(deploymentName: string): string;
    /**
     * Get the access token from credentials token cache
     */
    protected getAccessToken(): Promise<string>;
    /**
     * Sends an API request using axios HTTP library
     * @param method The HTTP method
     * @param relativeUrl The relative url
     * @param options Additional HTTP options including headers, etc.
     */
    protected sendApiRequest(method: string, relativeUrl: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Uploads the specified file via HTTP request
     * @param requestOptions The HTTP request options
     * @param filePath The local file path
     */
    protected sendFile(requestOptions: any, filePath: any): Promise<unknown>;
    /**
     * Log message to Serverless CLI
     * @param message Message to log
     */
    protected log(message: string, options?: ServerlessLogOptions, entity?: string): void;
    /**
     * Get function objects
     */
    protected slsFunctions(): {
        [functionName: string]: ServerlessAzureFunctionConfig;
    };
    protected slsConfigFile(): string;
    protected getOption(key: string, defaultValue?: any): any;
    protected prettyPrint(object: any): void;
    private setDefaultValues;
    /**
     * Get timestamp from `packageTimestamp` serverless variable
     * If not set, create timestamp, set variable and return timestamp
     */
    private getTimestamp;
    /**
     * Overwrite values for resourceGroup, prefix, region and stage
     * in config if passed through CLI
     */
    private setupConfig;
}
