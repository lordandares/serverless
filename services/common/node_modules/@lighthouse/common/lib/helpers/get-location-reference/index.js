import { compact, get, isArray, isPlainObject, reduce } from 'lodash';
export function getLocationReference() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _data$areaLabelPath = data.areaLabelPath,
      areaLabelPath = _data$areaLabelPath === void 0 ? 'area.label' : _data$areaLabelPath,
      _data$geocodedLabelPa = data.geocodedLabelPath,
      geocodedLabelPath = _data$geocodedLabelPa === void 0 ? 'gps.reverseGeocoded.label' : _data$geocodedLabelPa,
      _data$entity = data.entity,
      entity = _data$entity === void 0 ? {} : _data$entity,
      _data$locations = data.locations,
      locations = _data$locations === void 0 ? {} : _data$locations,
      _data$zones = data.zones,
      zones = _data$zones === void 0 ? {} : _data$zones;
  var location = entity.location;
  var zone = entity.zone; // NOTE we expect locations/zones in object map format so convert array to
  // format before running through

  var locationMap = isArray(locations) ? reduce(locations, function (memo, location) {
    memo[location._id.toString()] = location;
    return memo;
  }, {}) : locations;
  var zoneMap = isArray(zones) ? reduce(zones, function (memo, zone) {
    memo[zone._id.toString()] = zone;
    return memo;
  }, {}) : zones; // NOTE location/zone can be passed as an object, object id or plain string

  var locationName = isPlainObject(location) ? location.name : location ? get(locationMap, "".concat(location.toString(), ".name")) : undefined;
  var zoneName = isPlainObject(zone) ? zone.name : zone ? get(zoneMap, "".concat(zone.toString(), ".name")) : undefined;

  if (zoneName) {
    var parts = compact([zoneName, locationName]);
    return parts.join(', ');
  }

  var areaLabel = get(entity, areaLabelPath);

  if (areaLabel) {
    return areaLabel;
  }

  if (locationName) {
    return locationName;
  }

  var geocodedLabel = get(entity, geocodedLabelPath);

  if (geocodedLabel) {
    return geocodedLabel;
  }

  return 'Unknown Location';
}
//# sourceMappingURL=index.js.map