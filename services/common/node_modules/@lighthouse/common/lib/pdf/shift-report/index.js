import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import Promise from 'bluebird';
import { each, filter, find, groupBy, isEmpty, map, size, sortBy, sum, toString } from 'lodash';
import moment, { duration } from 'moment-timezone';
import { getLocationReference, getTimezoneAbbr, getTimezoneDatetime } from '../../helpers';
import { launchIcon } from '../../images';
import { generateDefinition, horizontalLine, summaryFieldsTable, summaryStatTable, summaryWrapperTable, table, text, threeColumnTable, zebraFillColor } from '../helpers';
var LIGHTHOUSE_BASE_URL = 'https://app.lighthouse.io';
/**
 * buildActivityPdf
 * @param {object} pdfOptions - the pdf options
 * @param {string} pdfOptions.fileTitle - pdf file title
 * @param {function} pdfOptions.footer - function executed to generate footer
 * @param {function} pdfOptions.header - function executed to generate header
 * @param {string} pdfOptions.logoUrl - pdf logo url
 * @param {array} pdfOptions.pageMargins - pdf page margins
 * @param {string} pdfOptions.pageOrientation - pdf page orientation
 * @param {string} pdfOptions.pageSize - pdf page size
 * @param {object} pdfOptions.styles - pdf styles
 * @param {object} pdfOptions.title - pdf title
 * @param {object} data - pdf data
 * @param {array} data.audits - audit documents
 * @param {array} data.events - event documents
 * @param {array} data.locations - location documents
 * @param {array} data.issues - issue documents
 * @param {array} data.audits - audit documents
 * @param {object} data.shift - shift document
 * @param {object} data.settings - settings properties
 * @param {string} data.settings.awsS3BaseUrl - aws S3 base url
 * @param {string} data.settings.cloudinaryBaseUrl - cloudinary base url
 * @param {array} data.tasks - task documents
 * @param {string} data.timestamp - timestamp string
 * @param {string} data.timezone - timezone string
 * @param {array} data.zones - zone documents
 * @param {array} data.user - user document
 * @returns {Promise} returns pdfmake definition object
 */

export function buildShiftPdf(_x, _x2) {
  return _buildShiftPdf.apply(this, arguments);
}

function _buildShiftPdf() {
  _buildShiftPdf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pdfOptions, data) {
    var timestamp, timezone, title, content;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            timestamp = data.timestamp, timezone = data.timezone;
            title = 'Daily Shift Report';
            _context.next = 4;
            return generateContent(data);

          case 4:
            content = _context.sent;
            return _context.abrupt("return", generateDefinition(_objectSpread({
              content: content,
              fileTitle: title,
              timestamp: timestamp,
              timezone: timezone,
              type: 'Shift Report'
            }, pdfOptions)));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _buildShiftPdf.apply(this, arguments);
}

function generateContent(_x3) {
  return _generateContent.apply(this, arguments);
}

function _generateContent() {
  _generateContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {
    var activitySection, summarySection, titleTable;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return buildActivitySection(data);

          case 2:
            activitySection = _context2.sent;
            summarySection = buildSummarySection(data);
            titleTable = buildTitleTable(data);
            return _context2.abrupt("return", [titleTable, summarySection, activitySection]);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _generateContent.apply(this, arguments);
}

function buildActivitySection(_x4) {
  return _buildActivitySection.apply(this, arguments);
}

function _buildActivitySection() {
  _buildActivitySection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {
    var timeline, activitySummary;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return buildTimelineTable(data);

          case 2:
            timeline = _context3.sent;
            _context3.next = 5;
            return buildActivitySummarySection(data);

          case 5:
            activitySummary = _context3.sent;
            return _context3.abrupt("return", [timeline, activitySummary]);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _buildActivitySection.apply(this, arguments);
}

function buildTitleTable(data) {
  var shift = data.shift,
      timezone = data.timezone,
      user = data.user;
  var breaks = shift.breaks,
      duration = shift.duration,
      end = shift.end,
      start = shift.start;
  var headerTitle = text('Daily Shift Report', {
    style: 'title'
  });
  var username = "".concat(user.firstName, " ").concat(user.lastName) || 'Unknown User';
  var headerSubTitle = text("".concat(username), {
    style: 'subTitle'
  });
  var mTimezoneStart = moment(start.time).tz(timezone);
  var mTimezoneEnd = moment(end.time).tz(timezone);
  var rangeStart = moment(mTimezoneStart).format('MMM DD h:mma');
  var rangeEnd = moment(mTimezoneEnd).format('MMM DD h:mma');
  var shiftDuration = getFineDuration(duration);
  var breakDuration = getBreakDuration(breaks);
  var header = !breakDuration ? "".concat(rangeStart, " - ").concat(rangeEnd, " | Duration: ").concat(shiftDuration) : "".concat(rangeStart, " - ").concat(rangeEnd, " | Duration: ").concat(shiftDuration, ", Break: ").concat(breakDuration);
  var headerRange = text(header, {
    style: 'subTitle2'
  });
  return table({
    body: [[headerTitle], [headerSubTitle], [headerRange]],
    layout: 'noBorders',
    style: 'titleTable'
  });
}

function buildSummarySection(data) {
  var audits = data.audits,
      events = data.events,
      issues = data.issues,
      tasks = data.tasks;
  var eventsByType = groupBy(events, 'type');
  var enterEventsCount = size(eventsByType.enter);
  var issuesCount = size(issues);
  var tasksCount = size(tasks);
  var auditsCount = size(audits);
  var scansText = text('SCANS', {
    style: 'summaryText'
  });
  var issuesText = text('ISSUES', {
    style: 'summaryText'
  });
  var tasksText = text('TASKS', {
    style: 'summaryText'
  });
  var auditsText = text('AUDITS', {
    style: 'summaryText'
  });
  var scansCountText = text(toString(enterEventsCount), {
    style: 'summaryCount'
  });
  var issuesCountText = text(toString(issuesCount), {
    style: 'summaryCount'
  });
  var tasksCountText = text(toString(tasksCount), {
    style: 'summaryCount'
  });
  var auditsCountText = text(toString(auditsCount), {
    style: 'summaryCount'
  });
  var scanTable = summaryStatTable({
    body: [[scansText], [scansCountText]]
  });
  var issueTable = summaryStatTable({
    body: [[issuesText], [issuesCountText]]
  });
  var taskTables = summaryStatTable({
    body: [[tasksText], [tasksCountText]]
  });
  var auditTable = summaryStatTable({
    body: [[auditsText], [auditsCountText]]
  });
  var wrapperTable = summaryWrapperTable({
    body: [[scanTable, issueTable, taskTables, auditTable]]
  });
  return wrapperTable;
}

function buildActivitySummarySection(_x5) {
  return _buildActivitySummarySection.apply(this, arguments);
}

function _buildActivitySummarySection() {
  _buildActivitySummarySection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {
    var audits, events, issues, settings, tasks, timezone, enterEvents, auditRows, issueRows, scanRows, taskRows, rows, sortedRows, title, header, hLine, activityTable, activitySummarySection;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            audits = data.audits, events = data.events, issues = data.issues, settings = data.settings, tasks = data.tasks, timezone = data.timezone;
            enterEvents = filter(events, function (event) {
              return event.type === 'enter';
            });
            auditRows = map(audits, getFormRowData('audits', data));
            issueRows = map(issues, getFormRowData('issues', data));
            scanRows = map(enterEvents, getScanRowData(data));
            taskRows = map(tasks, getFormRowData('tasks', data));
            rows = [].concat(_toConsumableArray(auditRows), _toConsumableArray(issueRows), _toConsumableArray(scanRows), _toConsumableArray(taskRows));
            sortedRows = sortBy(rows, ['timestamp'], ['asc']);
            title = text('Activity Summary', {
              style: 'summarySectionHeader'
            });
            header = table({
              body: [[title]],
              layout: 'noBorders',
              style: 'summaryHeaderTable'
            });
            hLine = horizontalLine();
            _context4.next = 13;
            return buildActivityTable({
              rows: sortedRows,
              settings: settings,
              timezone: timezone
            });

          case 13:
            activityTable = _context4.sent;
            activitySummarySection = [header, hLine, activityTable];
            return _context4.abrupt("return", activitySummarySection);

          case 16:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _buildActivitySummarySection.apply(this, arguments);
}

function buildActivityTable(_x6) {
  return _buildActivityTable.apply(this, arguments);
}

function _buildActivityTable() {
  _buildActivityTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref5) {
    var rows, settings, timezone, timezoneAbbr, activityTableHeader, activityTableRows, activityTableBody, activityTable;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            rows = _ref5.rows, settings = _ref5.settings, timezone = _ref5.timezone;
            timezoneAbbr = getTimezoneAbbr(timezone);
            activityTableHeader = [text('Activity', {
              bold: true
            }), {
              text: ''
            }, text('Location', {
              bold: true
            }), text("Timestamp (".concat(timezoneAbbr, ")"), {
              alignment: 'right',
              bold: true
            })];
            _context6.next = 5;
            return Promise.map(rows, /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data) {
                var link, location, icon, summaryFields, timestamp, title, timezoneHour, iconCell, rows, hasSummaryFields, fieldsTable, activityTableRow;
                return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        link = data.link, location = data.location, icon = data.icon, summaryFields = data.summaryFields, timestamp = data.timestamp, title = data.title;
                        timezoneHour = getTimezoneDatetime({
                          format: 'ddd DD h:mm a',
                          showTzAbbr: false,
                          timestamp: timestamp,
                          timezone: timezone
                        });
                        iconCell = icon ? {
                          alignment: 'center',
                          fit: [8, 8],
                          image: icon,
                          link: link
                        } : {
                          text: ''
                        };
                        rows = [[text(title, {
                          link: link
                        }), iconCell, text(location, {
                          link: link
                        }), text(timezoneHour, {
                          alignment: 'right',
                          link: link
                        })]];
                        hasSummaryFields = !isEmpty(summaryFields);

                        if (!hasSummaryFields) {
                          _context5.next = 10;
                          break;
                        }

                        _context5.next = 8;
                        return summaryFieldsTable({
                          fields: summaryFields,
                          settings: settings,
                          timezone: timezone
                        });

                      case 8:
                        fieldsTable = _context5.sent;
                        rows.push([fieldsTable]);

                      case 10:
                        activityTableRow = [table({
                          body: [].concat(rows),
                          colSpan: 5,
                          dontBreakRows: true,
                          headerRow: 0,
                          layout: {
                            hLineWidth: function hLineWidth() {
                              return 0;
                            },
                            paddingLeft: function paddingLeft() {
                              return 0;
                            },
                            paddingRight: function paddingRight() {
                              return 0;
                            },
                            paddingTop: function paddingTop() {
                              return 5;
                            },
                            paddingBottom: function paddingBottom() {
                              return 5;
                            },
                            vLineWidth: function vLineWidth() {
                              return 0;
                            }
                          },
                          widths: [120, 25, 200, 110, '*']
                        })];
                        return _context5.abrupt("return", activityTableRow);

                      case 12:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function (_x8) {
                return _ref6.apply(this, arguments);
              };
            }());

          case 5:
            activityTableRows = _context6.sent;
            activityTableBody = isEmpty(activityTableRows) ? [[text('No other activity', {
              colSpan: 4
            })]] : activityTableRows;
            activityTable = table({
              body: [activityTableHeader].concat(_toConsumableArray(activityTableBody)),
              dontBreakRows: true,
              layout: {
                hLineWidth: function hLineWidth() {
                  return 0;
                },
                fillColor: zebraFillColor,
                paddingLeft: function paddingLeft() {
                  return 5;
                },
                paddingRight: function paddingRight() {
                  return 5;
                },
                paddingTop: function paddingTop() {
                  return 5;
                },
                paddingBottom: function paddingBottom() {
                  return 5;
                },
                vLineWidth: function vLineWidth() {
                  return 0;
                }
              },
              widths: [110, 15, 230, 80, '*']
            });
            return _context6.abrupt("return", activityTable);

          case 9:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _buildActivityTable.apply(this, arguments);
}

function getFormRowData(collection, _ref) {
  var locations = _ref.locations,
      zones = _ref.zones;
  return function (document) {
    var _id = document._id,
        createdAt = document.createdAt,
        _document$entry = document.entry,
        entry = _document$entry === void 0 ? {} : _document$entry,
        _document$title = document.title,
        title = _document$title === void 0 ? 'Unknown' : _document$title;
    var location = getLocationReference({
      entity: document,
      locations: locations,
      zones: zones
    });
    var link = "".concat(LIGHTHOUSE_BASE_URL, "/reports/").concat(collection, "/").concat(_id);
    var timestamp = createdAt;
    var summaryFields = entry.summaryFields || [];
    return {
      icon: launchIcon,
      location: location,
      link: link,
      summaryFields: summaryFields,
      timestamp: timestamp,
      title: title
    };
  };
}

function getScanRowData(_ref2) {
  var zones = _ref2.zones;
  return function (document) {
    var timestamp = document.timestamp,
        _document$zone = document.zone,
        zone = _document$zone === void 0 ? '' : _document$zone;
    var zoneDoc = zone && find(zones, function (doc) {
      return doc._id.toString() === zone.toString();
    });
    var zoneName = zoneDoc && zoneDoc.name;
    var location = zoneName || 'Unknown Location';
    var title = 'Location Scan';
    return {
      location: location,
      timestamp: timestamp,
      title: title
    };
  };
}

function buildTimelineTable(_x7) {
  return _buildTimelineTable.apply(this, arguments);
}

function _buildTimelineTable() {
  _buildTimelineTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data) {
    var timezone, timezoneAbbr, shiftRows, sortedRows, timeline, timelineHeaderRow, timelineTable, title, header, hLine, timelineSection;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            timezone = data.timezone;
            timezoneAbbr = getTimezoneAbbr(timezone);
            shiftRows = getShiftRowData(data);
            sortedRows = sortBy(shiftRows, ['timestamp'], ['asc']);
            _context8.next = 6;
            return Promise.map(sortedRows, /*#__PURE__*/function () {
              var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data) {
                var location, timestamp, title, timezoneHour, rows;
                return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        location = data.location, timestamp = data.timestamp, title = data.title;
                        timezoneHour = getTimezoneDatetime({
                          format: 'ddd DD h:mm a',
                          showTzAbbr: false,
                          timestamp: timestamp,
                          timezone: timezone
                        });
                        rows = [text(title), text(location), text(timezoneHour, {
                          alignment: 'right'
                        })];
                        return _context7.abrupt("return", rows);

                      case 4:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7);
              }));

              return function (_x9) {
                return _ref7.apply(this, arguments);
              };
            }());

          case 6:
            timeline = _context8.sent;
            timelineHeaderRow = [text('Activity', {
              bold: true
            }), text('Location', {
              bold: true
            }), text("Timestamp (".concat(timezoneAbbr, ")"), {
              alignment: 'right',
              bold: true
            })];
            timelineTable = threeColumnTable({
              body: [timelineHeaderRow].concat(_toConsumableArray(timeline))
            });
            title = text('Timeline', {
              style: 'timelineTitle'
            });
            header = table({
              body: [[title]],
              layout: 'noBorders',
              style: 'summaryHeaderTable'
            });
            hLine = horizontalLine();
            timelineSection = [header, hLine, timelineTable];
            return _context8.abrupt("return", timelineSection);

          case 14:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _buildTimelineTable.apply(this, arguments);
}

function getShiftRowData(_ref3) {
  var locations = _ref3.locations,
      shift = _ref3.shift,
      zones = _ref3.zones;
  var breaks = shift.breaks,
      end = shift.end,
      start = shift.start;
  var startValues = getShiftValues(start, {
    locations: locations,
    shift: shift,
    zones: zones
  });

  var startShift = _objectSpread({
    title: 'Shift Started'
  }, startValues);

  var endValues = getShiftValues(end, {
    locations: locations,
    shift: shift,
    zones: zones
  });

  var endShift = _objectSpread({
    title: 'Shift Ended'
  }, endValues);

  var shiftData = [startShift, endShift];
  each(breaks, function (data) {
    var end = data.end,
        start = data.start;
    var startValues = getShiftValues(start, {
      locations: locations,
      shift: shift,
      zones: zones
    });

    var startBreak = _objectSpread({
      title: 'Break Started'
    }, startValues);

    var endValues = getShiftValues(end, {
      locations: locations,
      shift: shift,
      zones: zones
    });

    var endBreak = _objectSpread({
      title: 'Break Ended'
    }, endValues);

    shiftData.push(startBreak);
    shiftData.push(endBreak);
  });
  return shiftData;
}

function getShiftValues(value, _ref4) {
  var locations = _ref4.locations,
      shift = _ref4.shift,
      zones = _ref4.zones;
  var locationName = getLocationReference({
    entity: value,
    locations: locations,
    zones: zones
  });
  var location = locationName === 'Unknown Location' ? getLocationReference({
    entity: shift,
    locations: locations,
    zones: zones
  }) : locationName;
  return {
    timestamp: value.time,
    location: location
  };
}

function getFineDuration(durationValue) {
  var measurement = 'milliseconds';
  var durationByMeasurement = duration(durationValue, measurement);
  var hours = durationByMeasurement.get('hours');
  var minutes = durationByMeasurement.get('minutes');
  var fineDuration = '';
  fineDuration += hours !== 0 ? hours + 'h ' : '';
  fineDuration += minutes !== 0 ? minutes + 'm' : '';
  return fineDuration;
}

function getBreakDuration(breaks) {
  var duration = sum(map(breaks, function (data) {
    var end = data.end,
        start = data.start;
    var endBreak = moment(end.time);
    var startBreak = moment(start.time);
    var breakDuration = endBreak.diff(startBreak);
    return breakDuration;
  }));
  var breakDuration = getFineDuration(duration);
  return breakDuration;
}
//# sourceMappingURL=index.js.map