{"version":3,"sources":["../../../../src/pdf/helpers/build-location-scans-content/index.js"],"names":["filter","moment","buildLocationScansBoundaries","start","timezone","firstBoundary","tz","boundaries","push","i","intervalSize","nextBoundary","add","buildLocationScansContent","events","eventsArray","eventsInThisInterval","event","eventMoment","timestamp","isSameOrAfter","isBefore","length"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC/D,MAAMC,aAAa,GAAGJ,MAAM,CAACK,EAAP,CAAUH,KAAV,EAAiBC,QAAjB,CAAtB;AACA,MAAMG,UAAU,GAAG,EAAnB,CAF+D,CAG/D;AACA;AACA;;AACAA,EAAAA,UAAU,CAACC,IAAX,CAAgBH,aAAhB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAMC,YAAY,GAAG,IAAID,CAAzB;AACA,QAAME,YAAY,GAAGV,MAAM,CAACI,aAAD,CAAN,CAAsBO,GAAtB,CAA0BF,YAA1B,EAAwC,OAAxC,CAArB;AACAH,IAAAA,UAAU,CAACC,IAAX,CAAgBG,YAAhB;AACD;;AACD,SAAOJ,UAAP;AACD,CAbM;AAeP,OAAO,IAAMM,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACN,UAAD,EAAaO,MAAb,EAAqBV,QAArB,EAAkC;AACzE;AACA;AACA;AACA;AACA,MAAMW,WAAW,GAAG,EAApB;;AALyE,6BAMhEN,CANgE;AAOvE,QAAMO,oBAAoB,GAAGhB,MAAM,CAACc,MAAD,EAAS,UAASG,KAAT,EAAgB;AAC1D,UAAMC,WAAW,GAAGjB,MAAM,CAACK,EAAP,CAAUW,KAAK,CAACE,SAAhB,EAA2Bf,QAA3B,CAApB;AACA,aACEc,WAAW,CAACE,aAAZ,CAA0Bb,UAAU,CAACE,CAAD,CAApC,KACAS,WAAW,CAACG,QAAZ,CAAqBd,UAAU,CAACE,CAAC,GAAG,CAAL,CAA/B,CAFF;AAID,KANkC,CAAnC,CAPuE,CAcvE;;AACAM,IAAAA,WAAW,CAACP,IAAZ,CAAiBQ,oBAAjB;AAfuE;;AAMzE,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACe,MAAX,GAAoB,CAAxC,EAA2Cb,CAAC,EAA5C,EAAgD;AAAA,UAAvCA,CAAuC;AAU/C;;AACD,SAAOM,WAAP;AACD,CAlBM","sourcesContent":["import { filter } from 'lodash'\nimport moment from 'moment-timezone'\n\nexport const buildLocationScansBoundaries = (start, timezone) => {\n  const firstBoundary = moment.tz(start, timezone)\n  const boundaries = []\n  // add 9 boundaries (3 hours apart) to an array\n  // these will mark the edges of 8 3-hour buckets of scan events\n  // ex: [start, start+3hrs, start+6hrs, ..., start+24hrs]\n  boundaries.push(firstBoundary)\n  for (let i = 1; i < 9; i++) {\n    const intervalSize = 3 * i\n    const nextBoundary = moment(firstBoundary).add(intervalSize, 'hours')\n    boundaries.push(nextBoundary)\n  }\n  return boundaries\n}\n\nexport const buildLocationScansContent = (boundaries, events, timezone) => {\n  // loop through boundaries filtering for events between the current boundary and the next one\n  // skip the last one as it's the end and has no \"next one\"\n  // ex: [interval1Events, interval2Events, ..., interval8Events] where interval1Events is an array\n  // of events that start on or after boundary 1 and before boundary 2\n  const eventsArray = []\n  for (let i = 0; i < boundaries.length - 1; i++) {\n    const eventsInThisInterval = filter(events, function(event) {\n      const eventMoment = moment.tz(event.timestamp, timezone)\n      return (\n        eventMoment.isSameOrAfter(boundaries[i]) &&\n        eventMoment.isBefore(boundaries[i + 1])\n      )\n    })\n    // add events to interval\n    eventsArray.push(eventsInThisInterval)\n  }\n  return eventsArray\n}\n"],"file":"index.js"}