{"version":3,"sources":["../../../src/pdf/job/index.js"],"names":["get","isEmpty","map","moment","generateDefinition","horizontalLine","table","text","twoColumnTable","getJobDetails","getPrettyDuration","getTimezoneDatetime","getUserFullName","ACTIVITY_COLUMN_HEADERS","bold","buildJobPdf","pdfOptions","data","entity","timezone","timestamp","createdAt","title","fileTitle","content","generateContent","pageOrientation","type","entityDetails","metaTableData","locationText","authorFullName","reference","description","dueDateTimezoneDateTime","assigneeNames","statusText","color","statusColor","createdTimezoneDateTime","timezoneAbbrText","headerTitle","style","titleTable","body","layout","metaDataTable","widths","activitiesTitleTable","activityTableData","buildActivitiesContent","activityTable","hLine","jobActivities","users","activityRows","activity","duration","user","start","end","authorText","mDuration","durationText","startTime","time","startLocation","endTime","endLocation","startTimeText","showTzAbbr","endTimeText"],"mappings":"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","sourcesContent":["import { get, isEmpty, map } from 'lodash'\nimport moment from 'moment-timezone'\n\nimport {\n  generateDefinition,\n  horizontalLine,\n  table,\n  text,\n  twoColumnTable,\n} from '../helpers'\n\nimport {\n  getJobDetails,\n  getPrettyDuration,\n  getTimezoneDatetime,\n  getUserFullName,\n} from '../../helpers'\n\nconst ACTIVITY_COLUMN_HEADERS = [\n  { text: 'Type', bold: true },\n  { text: 'User', bold: true },\n  { text: 'Start Time', bold: true },\n  { text: 'Start Location', bold: true },\n  { text: 'End Time', bold: true },\n  { text: 'End Location', bold: true },\n  { text: 'Duration', bold: true },\n]\n\n/**\n * buildJobPdf\n *\n * @param {object} pdfOptions - the pdf options\n * @param {string} pdfOptions.fileTitle - pdf file title\n * @param {function} pdfOptions.footer - function executed to generate footer\n * @param {function} pdfOptions.header - function executed to generate header\n * @param {string} pdfOptions.logoUrl - pdf logo url\n * @param {array} pdfOptions.pageMargins - pdf page margins\n * @param {string} pdfOptions.pageOrientation - pdf page orientation\n * @param {string} pdfOptions.pageSize - pdf page size\n * @param {object} pdfOptions.styles - pdf styles\n * @param {object} pdfOptions.title - pdf title\n * @param {object} data - pdf data\n * @param {object} data.entity - job document\n * @param {array} data.jobActivities - job activities documents\n * @param {object} data.settings - settings properties\n * @param {string} data.settings.awsS3BaseUrl - aws S3 base url\n * @param {string} data.settings.cloudinaryBaseUrl - cloudinary base url\n * @param {string} data.timezone - timezone string\n * @param {object} data.users - application user documents\n * @returns {Promise} returns pdfmake definition object\n */\nexport function buildJobPdf(pdfOptions, data) {\n  const { entity, timezone } = data\n\n  const timestamp = entity.createdAt\n  const title = entity.title || 'Unknown'\n\n  const fileTitle = `Job Report - ${title}`\n\n  const content = generateContent(data)\n\n  return generateDefinition({\n    content,\n    fileTitle,\n    pageOrientation: 'landscape',\n    timestamp,\n    timezone,\n    type: 'Job',\n    ...pdfOptions,\n  })\n}\n\nfunction generateContent(data) {\n  const { entity } = data\n  const { title } = entity\n\n  const entityDetails = getJobDetails(data)\n\n  const metaTableData = [\n    [{ text: 'Location', bold: true }, entityDetails.locationText],\n    [{ text: 'Author', bold: true }, entityDetails.authorFullName],\n    [{ text: 'Reference', bold: true }, entityDetails.reference],\n    [{ text: 'Description', bold: true }, entityDetails.description],\n    [{ text: 'Due Date', bold: true }, entityDetails.dueDateTimezoneDateTime],\n    [{ text: 'Assignees', bold: true }, entityDetails.assigneeNames],\n    [\n      { text: 'Status', bold: true },\n      { text: entityDetails.statusText, color: entityDetails.statusColor },\n    ],\n    [{ text: 'Created', bold: true }, entityDetails.createdTimezoneDateTime],\n    [{ text: 'Timezone', bold: true }, entityDetails.timezoneAbbrText],\n  ]\n\n  const headerTitle = text(`Job Report: ${title}`, { style: 'title' })\n\n  const titleTable = table({\n    body: [[headerTitle]],\n    layout: 'noBorders',\n    style: 'titleTable',\n  })\n\n  const metaDataTable = twoColumnTable({\n    body: metaTableData,\n    widths: [150, '*'],\n  })\n\n  const activitiesTitleTable = table({\n    body: [['Job Activities']],\n    layout: 'noBorders',\n    style: 'activitiesTable',\n  })\n\n  const activityTableData = buildActivitiesContent(data)\n  const activityTable = table(activityTableData)\n  const hLine = horizontalLine()\n\n  return [\n    titleTable,\n    metaDataTable,\n    activitiesTitleTable,\n    hLine,\n    activityTable,\n    hLine,\n  ]\n}\n\nfunction buildActivitiesContent(data) {\n  const { jobActivities, timezone, users } = data\n\n  if (isEmpty(jobActivities)) {\n    return {\n      body: [['No Job Activities']],\n      widths: '*',\n    }\n  }\n\n  const activityRows = map(jobActivities, activity => {\n    const { entity } = activity\n\n    const { type, duration, user, start = {}, end = {} } = entity\n\n    const authorText = getUserFullName(users, user)\n\n    const mDuration = moment.duration(duration, 'minutes')\n    const durationText = duration ? getPrettyDuration(mDuration) : '-'\n\n    const startTime = start.time\n    const startLocation = get(start, 'geometryReverseGeocoded.label', '-')\n\n    const endTime = end.time\n    const endLocation = get(end, 'geometryReverseGeocoded.label', '-')\n\n    const startTimeText = startTime\n      ? getTimezoneDatetime({\n          showTzAbbr: false,\n          timestamp: startTime,\n          timezone,\n        })\n      : '-'\n\n    const endTimeText = endTime\n      ? getTimezoneDatetime({\n          showTzAbbr: false,\n          timestamp: endTime,\n          timezone,\n        })\n      : '-'\n\n    return [\n      type,\n      authorText,\n      startTimeText,\n      startLocation,\n      endTimeText,\n      endLocation,\n      durationText,\n    ]\n  })\n\n  return {\n    body: [ACTIVITY_COLUMN_HEADERS, ...activityRows],\n    widths: [70, 80, 60, '*', 60, '*', 50],\n  }\n}\n"],"file":"index.js"}