import { forEach, isEmpty, reduce, sortBy } from 'lodash/fp';
import { intervalCovers, intervalIntersectsEnd, intervalIntersectsStart, intervalOutside, intervalWithin } from '.';
/**
 * Applies closed intervals to intervals
 * Accepts two sets of intervals and splits the first set by the second set
 *
 * splitIntervals([[1,10], [11,20], [21,29]], [[8,13]])
 * returns [[1,8], [13,20], [21,29]]
 */

export function splitIntervals() {
  var intervals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var closeIntervals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (isEmpty(closeIntervals)) return intervals;
  var sortedIntervals = sortBy(function (a) {
    return a[0];
  })(intervals);
  var stack = reduce(function (accum, openInterval) {
    accum.push(openInterval);
    forEach(function (closeInterval) {
      var topInterval = accum[accum.length - 1];
      var closeCoversInterval = intervalCovers(closeInterval, topInterval);
      var closeIntersectsIntervalEnd = intervalIntersectsEnd(closeInterval, topInterval);
      var closeIntersectsIntervalStart = intervalIntersectsStart(closeInterval, topInterval);
      var closeOutsideInterval = intervalOutside(closeInterval, topInterval);
      var closeWithinInterval = intervalWithin(closeInterval, topInterval);
      if (closeOutsideInterval) return;
      accum.pop();
      if (closeCoversInterval) return;
      if (closeWithinInterval) accum.push([topInterval[0], closeInterval[0]], [closeInterval[1], topInterval[1]]);
      if (closeIntersectsIntervalStart) accum.push([closeInterval[1], topInterval[1]]);
      if (closeIntersectsIntervalEnd) accum.push([topInterval[0], closeInterval[0]]);
    })(closeIntervals);
    return accum;
  }, [], sortedIntervals);
  return stack;
}
//# sourceMappingURL=splitIntervals.js.map