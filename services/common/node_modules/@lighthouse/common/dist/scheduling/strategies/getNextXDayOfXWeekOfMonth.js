"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextXDayOfXWeekOfMonth = getNextXDayOfXWeekOfMonth;

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _scheduling = require("../scheduling.types");

/**
 * Generates next occurrence interval for x day of x week of month strategy
 */
function getNextXDayOfXWeekOfMonth({
  end,
  isInitial,
  options,
  start,
  timezone
}) {
  const {
    dayOfWeek,
    duration,
    frequency,
    weekOfMonth
  } = options;
  const {
    unit: durationUnit,
    value: durationValue
  } = duration;
  const {
    unit: frequencyUnit,
    value: frequencyValue
  } = frequency;
  let dateCursor = start;

  while (dateCursor < end) {
    const mStartOfMonth = isInitial ? _momentTimezone.default.tz(dateCursor, timezone).startOf(_scheduling.Unit.Month) : _momentTimezone.default.tz(dateCursor, timezone).add(frequencyValue, frequencyUnit).startOf(_scheduling.Unit.Month);
    const year = mStartOfMonth.year();
    const month = mStartOfMonth.month();
    const startDayOfMonth = mStartOfMonth.isoWeekday();
    const weekOffset = (weekOfMonth - 1) * 7;
    const day = startDayOfMonth > dayOfWeek ? dayOfWeek - startDayOfMonth + 8 : dayOfWeek - startDayOfMonth + 1;
    const date = weekOffset + day;

    const nextOccurrenceEnd = _momentTimezone.default.tz(timezone).year(year).month(month).date(date).add(1, _scheduling.Unit.Day).startOf(_scheduling.Unit.Day).valueOf();

    const nextOccurrenceStart = _momentTimezone.default.tz(nextOccurrenceEnd, timezone).subtract(durationValue, durationUnit).valueOf();

    if (nextOccurrenceEnd <= nextOccurrenceStart || nextOccurrenceEnd > end) return;

    if (nextOccurrenceStart >= start) {
      return [nextOccurrenceStart, nextOccurrenceEnd - 1];
    }

    const nextDateCursor = isInitial ? mStartOfMonth.add(1, _scheduling.Unit.Month).valueOf() : mStartOfMonth.valueOf();
    dateCursor = nextDateCursor;
  }
}