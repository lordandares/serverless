"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitIntervals = splitIntervals;

var _fp = require("lodash/fp");

var _ = require(".");

/**
 * Applies closed intervals to intervals
 * Accepts two sets of intervals and splits the first set by the second set
 *
 * splitIntervals([[1,10], [11,20], [21,29]], [[8,13]])
 * returns [[1,8], [13,20], [21,29]]
 */
function splitIntervals(intervals = [], closeIntervals = []) {
  if ((0, _fp.isEmpty)(closeIntervals)) return intervals;
  const sortedIntervals = (0, _fp.sortBy)(a => a[0])(intervals);
  const stack = (0, _fp.reduce)((accum, openInterval) => {
    accum.push(openInterval);
    (0, _fp.forEach)(closeInterval => {
      const topInterval = accum[accum.length - 1];
      const closeCoversInterval = (0, _.intervalCovers)(closeInterval, topInterval);
      const closeIntersectsIntervalEnd = (0, _.intervalIntersectsEnd)(closeInterval, topInterval);
      const closeIntersectsIntervalStart = (0, _.intervalIntersectsStart)(closeInterval, topInterval);
      const closeOutsideInterval = (0, _.intervalOutside)(closeInterval, topInterval);
      const closeWithinInterval = (0, _.intervalWithin)(closeInterval, topInterval);
      if (closeOutsideInterval) return;
      accum.pop();
      if (closeCoversInterval) return;
      if (closeWithinInterval) accum.push([topInterval[0], closeInterval[0]], [closeInterval[1], topInterval[1]]);
      if (closeIntersectsIntervalStart) accum.push([closeInterval[1], topInterval[1]]);
      if (closeIntersectsIntervalEnd) accum.push([topInterval[0], closeInterval[0]]);
    })(closeIntervals);
    return accum;
  }, [], sortedIntervals);
  return stack;
}