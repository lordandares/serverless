{"version":3,"sources":["../lib/httpHeaders.ts","../lib/util/base64.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/bytesToUuid.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/rng-browser.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/v4.js","../lib/util/constants.ts","../lib/util/utils.ts","../lib/serializer.ts","../lib/webResource.ts","../../../../common/temp/node_modules/.registry.npmjs.org/tslib/1.10.0/node_modules/tslib/tslib.es6.js","../lib/restError.ts","../lib/httpPipelineLogLevel.ts","../lib/xhrHttpClient.ts","../../core-auth/src/tokenCredential.ts","../../core-auth/src/simpleTokenCredential.ts","../lib/operationParameter.ts","../lib/operationSpec.ts","../lib/util/xml.browser.ts","../lib/policies/requestPolicy.ts","../lib/policies/deserializationPolicy.ts","../lib/policies/exponentialRetryPolicy.ts","../lib/policies/generateClientRequestIdPolicy.ts","../lib/policies/msRestUserAgentPolicy.browser.ts","../lib/policies/userAgentPolicy.ts","../lib/url.ts","../lib/policies/redirectPolicy.ts","../lib/policies/rpRegistrationPolicy.ts","../lib/credentials/accessTokenCache.ts","../lib/policies/bearerTokenAuthenticationPolicy.ts","../lib/policies/systemErrorRetryPolicy.ts","../lib/queryCollectionFormat.ts","../lib/policies/proxyPolicy.browser.ts","../lib/policies/throttlingRetryPolicy.ts","../lib/policies/signingPolicy.ts","../lib/serviceClient.ts","../lib/policies/logPolicy.ts","../../core-tracing/lib/utils/supportedPlugins.ts","../../core-tracing/lib/plugins/opencensus/openCensusTraceStatePlugin.ts","../../core-tracing/lib/interfaces/span_kind.ts","../../core-tracing/lib/interfaces/status.ts","../../core-tracing/lib/interfaces/trace_options.ts","../../core-tracing/lib/plugins/opencensus/openCensusSpanPlugin.ts","../../core-tracing/lib/plugins/opencensus/openCensusTracePlugin.ts","../../core-tracing/lib/plugins/noop/noOpSpanPlugin.ts","../../core-tracing/lib/implementations/noop/spanNoOpImpl.ts","../../core-tracing/lib/plugins/noop/noOpTracePlugin.ts","../../core-tracing/lib/implementations/noop/tracerNoOpImpl.ts","../../core-tracing/lib/tracerProxy.ts","../lib/policies/tracingPolicy.ts","../lib/credentials/basicAuthenticationCredentials.ts","../lib/credentials/apiKeyCredentials.ts","../lib/credentials/topicCredentials.ts"],"names":["getHeaderKey","headerName","toLowerCase","HttpHeaders","rawHeaders","this","_headersMap","set","prototype","headerValue","name","value","toString","get","header","undefined","contains","remove","result","headerKey","headersArray","headers","push","headerNames","i","length","headerValues","toJson","JSON","stringify","clone","encodeByteArray","str","String","fromCharCode","btoa","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","getRandomValues","crypto","bind","window","msCrypto","rnds8","module","exports","rnds","Array","r","Math","random","byteToHex","substr","bytesToUuid_1","buf","offset","bth","join","v4_1","options","rng","ii","bytesToUuid","Constants","coreHttpVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","HttpConstants","HttpVerbs","PUT","GET","DELETE","POST","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","RETRY_AFTER","USER_AGENT","isNode","process","version","versions","node","stripResponse","response","strippedResponse","body","bodyAsText","status","stripRequest","request","strippedRequest","isValidUuid","uuid","RegExp","test","generateUuid","uuidv4","delay","t","Promise","resolve","setTimeout","validateISODuration","isDuration","replaceAll","searchValue","replaceValue","split","Serializer","modelMappers","isXML","validateConstraints","mapper","objectName","failValidation","constraintName","constraintValue","Error","constraints","_a","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","match","some","item","ar","indexOf","serialize","object","payload","mapperType","type","serializedName","isConstant","defaultValue","required","nullable","typeName","valueOf","utils.isValidUuid","objectType","ArrayBuffer","isView","Blob","serializeBasicTypes","allowedValues","serializeEnumType","Date","isNaN","parse","toISOString","substring","toUTCString","d","floor","getTime","dateToUnixTime","utils.isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","replace","bufferToBase64Url","serializeBase64UrlType","serializer","isArray","elementType","element","tempArray","serializeSequenceType","valueType","tempDictionary","_i","Object","keys","key","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","_b","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","_c","paths_1","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","serializedValue","xmlIsAttribute","$","additionalPropertiesMapper","additionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","deserialize","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","startsWith","unwrappedProperty","propertyInstance","res","_d","paths_2","isAdditionalProperty","responsePropName","_e","_f","includes","isSpecialXmlProperty","deserializeCompositeType","parseFloat","n","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","prop","classes","partialclass","subwords_1","charAt","modelProperties","className","modelMapper","propertyName","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","MapperType","o","o_1","strEnum","WebResource","url","method","query","streamResponseBody","withCredentials","abortSignal","timeout","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","formData","validateRequestProperties","prepare","pathTemplate","validMethods","toUpperCase","pathTemplate_1","pathParameters_1","pathParameters","baseUrl","url_1","endsWith","slice","segments","forEach","pathParamName","pathParam","stringifiedPathParameters","encodeURIComponent","skipUrlEncoding","queryParameters","queryParams","queryParamName","queryParam","disableClientRequestId","bodyIsStream","serializationMapper","mappers","disableJsonStringifyOnBody","operationSpec","shouldDeserialize","operationResponseGetter","extendStatics","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","s","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","then","__generator","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","HttpPipelineLogLevel","RestError","_super","message","code","statusCode","_this","tslib_1.__extends","REQUEST_SEND_ERROR","REQUEST_ABORTED_ERROR","PARSE_ERROR","XhrHttpClient","sendRequest","xhr","XMLHttpRequest","listener_1","abort","addEventListener","readyState","DONE","removeEventListener","addProgressListener","upload","requestForm_1","FormData","appendFormValue","append","formKey","formValue","j","contentType","open","setRequestHeader","responseType","send","HEADERS_RECEIVED","blobBody","rejectOnTerminalEvent","parseHeaders","responseText","listener","rawEvent","loadedBytes","loaded","responseHeaders","headerLines_1","getAllResponseHeaders","trim","line","index","isTokenCredential","credential","getToken","signRequest","SimpleTokenCredential","token","expiresOn","now","_scopes","_options","expiresOnTimestamp","getPathStringFromParameter","parameter","getPathStringFromParameterPath","parameterPath","isStreamOperation","responses","operationResponse","bodyMapper","Stream","parser","DOMParser","parseXML","dom","parseFromString","errorNS","parserErrors","getElementsByTagNameNS","innerHTML","throwIfError","obj","domToObject","childNodeCount","childNodes","firstChildNode","onlyChildTextValue","nodeType","Node","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","asElementWithAttributes","attr","nodeName","child","childObject","err","getElementsByTagName","namespaceURI","ignored","doc","document","implementation","createDocument","XMLSerializer","stringifyXML","opts","buildNode","elementName","elem","createElement","textContent","obj_1","arrayElem","buildAttributes","setNamedItem","_g","_h","appendChild","rootName","serializeToString","attrs","createAttribute","BaseRequestPolicy","_nextPolicy","shouldLog","logLevel","log","RequestPolicyOptions","_logger","OFF","minimumLogLevel","deserializationPolicy","deserializationContentTypes","nextPolicy","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","jsonContentTypes","json","xmlContentTypes","xml","deserializeResponseBody","errorHandler","msg","errCode","text_1","contentComponents","map","component","parsedBody","catch","parsedResponse","shouldDeserializeResponse","expectedStatusCodes","hasNoExpectedStatusCodes","responseSpec","getOperationResponse","valueToDeserialize","Sequence","error","restError","utils.stripRequest","utils.stripResponse","httpMethod","headersMapper","parsedHeaders","defaultResponseSpec","default","initialErrorMessage","parsedErrorResponse","defaultResponseBodyMapper","internalError","defaultError","exponentialRetryPolicy","retryCount","retryInterval","minRetryInterval","maxRetryInterval","ExponentialRetryPolicy","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","isNumber","retry","policy","retryData","requestError","innerError","incrementDelta","pow","min","updateRetryData","isAborted","aborted","shouldRetry","utils.delay","generateClientRequestIdPolicy","requestIdHeaderName","GenerateClientRequestIdPolicy","_requestIdHeaderName","utils.generateUuid","getDefaultUserAgentKey","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","navigator","telemetryInfo","keySeparator","valueSeparator","runtimeInfo","platformSpecificData","oscpu","platform","concat","info","userAgentPolicy","userAgentData","UserAgentPolicy","addUserAgentHeader","URLQuery","_rawQuery","any","parameterName","parameterValue","newValue","parameterStrings","parameterValue_1","parameterValueElement","text","currentState","currentCharacter","URLBuilder","setScheme","scheme","_scheme","getScheme","setHost","host","_host","getHost","setPort","port","_port","getPort","setPath","path","_path","appendPath","currentPath","getPath","setQuery","_query","setQueryParameter","queryParameterName","queryParameterValue","getQueryParameterValue","getQuery","startState","tokenizer","URLTokenizer","current","tokenPath","URLToken","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","readWhile","character","characterCode","isAlphaNumericCharacter","readWhileLetterOrDigit","schemeOrHost","readUntilCharacter","getCurrentCharacter","peekCharacters","nextSchemeOrHost","nextCharacter","nextHost","nextPort","nextPath","readRemaining","nextQuery","charactersToPeek","endIndex","condition","terminatingCharacters","redirectPolicy","maximumRetries","RedirectPolicy","maxRetries","handleRedirect","currentRetries","locationHeader","builder","RPRegistrationPolicy","_retryTimeout","rpName","matchRes","checkRPNotRegisteredError","urlPrefix","extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","getRequestEssentials","getRegistrationStatus","registrationState","registerRP","registrationStatus","registerIfNeeded","reuseUrlToo","TokenRefreshBufferMs","ExpiringAccessTokenCache","tokenRefreshBufferMs","cachedToken","setCachedToken","accessToken","getCachedToken","bearerTokenAuthenticationPolicy","scopes","tokenCache","BearerTokenAuthenticationPolicy","webResource","systemErrorRetryPolicy","SystemErrorRetryPolicy","QueryCollectionFormat","boundedRandDelta","currentCount","proxyNotSupportedInBrowser","getDefaultProxySettings","_proxyUrl","proxyPolicy","_proxySettings","ProxyPolicy","_request","throttlingRetryPolicy","ThrottlingRetryPolicy","_handleResponse","_defaultResponseHandler","httpRequest","httpResponse","retryAfterHeader","delayInMs","parseRetryAfterHeader","retryAfterInSeconds","Number","parseDateRetryAfterHeader","diff","signingPolicy","authenticationProvider","SigningPolicy","nextRequest","ServiceClient","credentials","requestPolicyFactories","bearerTokenPolicyFactory","serviceClient","_withCredentials","_httpClient","httpClient","DefaultHttpClient","_requestPolicyOptions","httpPipelineLogger","authPolicyFactory","baseUri","factories","generateClientRequestIdHeader","clientRequestIdHeaderName","userAgentHeaderName","getValueOrFunctionResult","userAgentHeaderValue","userAgent","retryTimeout","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","httpPipeline","sendOperationRequest","operationArguments","callback","requestUrl","urlParameters","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","skipEncoding","queryParameter","collectionFormat","Multi","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","spanOptions","requestBody","requestBodyParameterPathString","isStream","utils.prepareXMLRootList","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","flattenResponse","cb","_response","defaultValueCreator","getOperationArgumentValueFromParameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyPath","propertyPathString","parent","parameterPathPart","addOperationResponse","defineProperty","readableStreamBody","modelProperties_1","isPageableResponse","k","arrayResponse","SupportedPlugins","LogPolicy","logger","console","logResponse","SpanKind","CanonicalCode","TraceOptions","OpenCensusTraceStatePlugin","_state","unset","OpenCensusSpanPlugin","span","_span","getSpan","end","endTime","start","startTime","context","openCensusSpanContext","spanContext","spanId","traceId","traceOptions","traceState","setAttribute","addAttribute","setAttributes","addEvent","addLink","setStatus","updateName","isRecordingEvents","OpenCensusTracePlugin","tracer","pluginType","OPENCENSUS","_tracer","startSpan","startChildSpan","childOf","getCurrentSpan","withSpan","fn","recordSpanData","getBinaryFormat","getHttpTextFormat","NoOpSpanPlugin","SpanNoOpImpl","NoOpTracePlugin","NOOP","TracerNoOpImpl","TracerProxy","setTracer","tracerPluginType","_tracerPlugin","getTracer","TracingPolicy","UNSAMPLED","err_1","DEFAULT_AUTHORIZATION_SCHEME","BasicAuthenticationCredentials","userName","password","authorizationScheme","encodedCredentials","ApiKeyCredentials","inHeader","inQuery","TopicCredentials","topicKey","aeg-sas-key","targetCtor","sourceCtors","getOwnPropertyNames","uri","promiseFactories","kickstart","promiseFactory","promise","data","nextTick","serializeObject","array","property"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = { name: headerName, value: headerValue.toString() };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const Constants = {\n  /**\n   * The core-http version\n   * @const\n   * @type {string}\n   */\n  coreHttpVersion: \"1.0.0-preview.2\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResource): WebResource {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  const validUuidRegex = new RegExp(\n    \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\",\n    \"ig\"\n  );\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Provides an array of values of an object. For example\n * for a given object { \"a\": \"foo\", \"b\": \"bar\" }, the method returns [\"foo\", \"bar\"].\n *\n * @param {object} obj An object whose properties need to be enumerated so that it\"s values can be provided as an array\n *\n * @return {any[]} An array of values of the given object.\n */\nexport function objectValues(obj: { [key: string]: any }): any[] {\n  const result: any[] = [];\n  if (obj && obj instanceof Object) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result.push((<any>obj)[key]);\n      }\n    }\n  } else {\n    const stringifiedObj = JSON.stringify(obj, undefined, 2);\n    throw new Error(\n      `The provided object ${stringifiedObj} is not a valid object that can be ` +\n        `enumerated to provide its values as an array.`\n    );\n  }\n  return result;\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Merges source object into the target object\n * @param {object} source The object that needs to be merged\n *\n * @param {object} target The object to be merged into\n *\n * @returns {object} Returns the merged target object.\n */\nexport function mergeObjects(source: { [key: string]: any }, target: { [key: string]: any }) {\n  Object.keys(source).forEach((key) => {\n    target[key] = source[key];\n  });\n  return target;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResource} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResource,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then(\n      (data: any) => {\n        cb(undefined, data);\n      },\n      (err: Error) => {\n        cb(err);\n      }\n    );\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then(\n      (data: HttpOperationResponse) => {\n        process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      },\n      (err: Error) => {\n        process.nextTick(cb, err);\n      }\n    );\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach((sourceCtors) => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach((name) => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given enity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value Any entity\n * @return boolean - true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: any): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(public readonly modelMappers: { [key: string]: any } = {}, public readonly isXML?: boolean) { }\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && (value != undefined)) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if ((typeof value !== \"string\") || (value.match(pattern) === null)) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/ig) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/ig) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/ig) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/ig) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/ig) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/ig) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/ig) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/ig) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/ig) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/ig) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/ig) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/ig) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = deserializeDictionaryType(this, mapper as DictionaryMapper, responseBody, objectName);\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while ((len - 1) >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/ig) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/ig) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/ig) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/ig) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/ig) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)) {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = (value instanceof Date) ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n          `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/ig) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(serializer: Serializer, mapper: SequenceMapper, object: any, objectName: string) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, object: any, objectName: string) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer: Serializer, mapper: CompositeMapper, objectName: string): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` +\n        `mapper \"${JSON.stringify(modelMapper)}\" of type \"${className}\" for object \"${objectName}\".`);\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(serializer: Serializer, mapper: CompositeMapper, object: any, objectName: string) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject == undefined) && (object[key] != undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName = propertyMapper.serializedName !== \"\"\n          ? objectName + \".\" + propertyMapper.serializedName\n          : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]');\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(serializer: Serializer, mapper: CompositeMapper, responseBody: any, objectName: string): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize((propertyMapper as DictionaryMapper).type.value, responseBody[headerKey], propertyObjectName);\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName!], propertyObjectName);\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]');\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(serializer: Serializer, mapper: SequenceMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(serializer: Serializer, mapper: CompositeMapper, object: any, polymorphicPropertyName: \"clientName\" | \"serializedName\"): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator = discriminatorValue === typeName\n          ? discriminatorValue\n          : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(serializer: Serializer, mapper: CompositeMapper): PolymorphicDiscriminator | undefined {\n  return mapper.type.polymorphicDiscriminator\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent)\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType = SimpleMapperType | CompositeMapperType | SequenceMapperType | DictionaryMapperType | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name: \"Base64Url\"\n  | \"Boolean\"\n  | \"ByteArray\"\n  | \"Date\"\n  | \"DateTime\"\n  | \"DateTimeRfc1123\"\n  | \"Object\"\n  | \"Stream\"\n  | \"String\"\n  | \"TimeSpan\"\n  | \"UnixTime\"\n  | \"Uuid\"\n  | \"Number\"\n  | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  }\n  else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  }\n  else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ProxySettings } from \"./serviceClient\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\nexport type HttpRequestBody =\n  | Blob\n  | string\n  | ArrayBuffer\n  | ArrayBufferView\n  | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeaders;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  formData?: any;\n  query?: { [key: string]: any };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n  keepAlive?: boolean;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: any;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any },\n    headers?: { [key: string]: any } | HttpHeaders,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean\n  ) {\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = headers instanceof HttpHeaders ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\n        \"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\"\n      );\n    }\n\n    if (\n      (options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") &&\n      (options.url == undefined || typeof options.url.valueOf() !== \"string\")\n    ) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\n          'The provided method \"' +\n            options.method +\n            '\" is invalid. Supported HTTP methods are: ' +\n            JSON.stringify(validMethods)\n        );\n      }\n    }\n    this.method = options.method.toUpperCase() as HttpMethods;\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url =\n        baseUrl +\n        (baseUrl.endsWith(\"/\") ? \"\" : \"/\") +\n        (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(\n            `pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`\n          );\n        }\n        segments.forEach(function(item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (\n            pathParam === null ||\n            pathParam === undefined ||\n            !(typeof pathParam === \"string\" || typeof pathParam === \"object\")\n          ) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(\n              `pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n                ` however, it is not present in parameters: ${stringifiedPathParameters}.` +\n                `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n                `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`\n            );\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\n                `options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\n          `options.queryParameters must be of type object. It should be a JSON object ` +\n            `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n            `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`\n        );\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\n                `options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(\n            options.serializationMapper,\n            options.body,\n            \"requestBody\"\n          );\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive\n    );\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: any;\n\n  [key: string]: any;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResource } from \"./webResource\";\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly REQUEST_ABORTED_ERROR: string = \"REQUEST_ABORTED_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResource;\n  response?: HttpOperationResponse;\n  body?: any;\n  constructor(message: string, code?: string, statusCode?: number, request?: WebResource, response?: HttpOperationResponse, body?: any) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n    this.body = body;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResource, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () => resolve({\n          request,\n          status: xhr.status,\n          headers: parseHeaders(xhr),\n          bodyAsText: xhr.responseText\n        }));\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(xhr: XMLHttpRequestEventTarget, listener?: (progress: TransferProgressEvent) => void) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", rawEvent => listener({\n      loadedBytes: rawEvent.loaded\n    }));\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(request: WebResource, xhr: XMLHttpRequest, reject: (err: any) => void) {\n  xhr.addEventListener(\"error\", () => reject(new RestError(`Failed to send request to ${request.url}`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n  xhr.addEventListener(\"abort\", () => reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)));\n  xhr.addEventListener(\"timeout\", () => reject(new RestError(`timeout of ${xhr.timeout}ms exceeded`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions {\n  /**\n   * An AbortSignalLike implementation that can be used to cancel\n   * the token request.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Timeout for pinging services\n   */\n  timeout?: number;\n  /**\n   * Options to create a span using the tracer if any was set.\n   */\n  spanOptions?: any;\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: any): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  return credential\n    && typeof credential.getToken === \"function\"\n    && (credential.signRequest === undefined || credential.getToken.length > 0);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions, AccessToken } from \"./tokenCredential\";\n\n/**\n * A TokenCredential that always returns the given token. This class can be\n * used when the access token is already known or can be retrieved from an\n * outside source.\n */\nexport class SimpleTokenCredential implements TokenCredential {\n  /**\n   * The raw token string.  Can be changed when the token needs to be updated.\n   */\n  public token: string;\n\n  /**\n   * The Date at which the token expires.  Can be changed to update the expiration time.\n   */\n  public expiresOn: Date;\n\n  /**\n   * Creates an instance of TokenCredential.\n   * @param {string} token\n   */\n  constructor(token: string, expiresOn?: Date) {\n    this.token = token;\n    this.expiresOn = expiresOn ? expiresOn : new Date(Date.now() + 60*60*1000);\n  }\n\n  /**\n   * Retrieves the token stored in this RawTokenCredential.\n   *\n   * @param _scopes Ignored since token is already known.\n   * @param _options Ignored since token is already known.\n   * @returns {AccessToken} The access token details.\n   */\n  async getToken(_scopes: string | string[], _options?: GetTokenOptions): Promise<AccessToken | null> {\n    return {\n      token: this.token,\n      expiresOnTimestamp: this.expiresOn.getTime()\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(parameterPath: ParameterPath, mapper: Mapper): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { OperationParameter, OperationQueryParameter, OperationURLParameter } from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst parser = new DOMParser();\nexport function parseXML(str: string): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    const obj = domToObject(dom.childNodes[0]);\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n    .namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined =\n    (firstChildNode &&\n      childNodeCount === 1 &&\n      firstChildNode.nodeType === Node.TEXT_NODE &&\n      firstChildNode.nodeValue) ||\n    undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(obj: any, opts?: { rootName?: string }) {\n  const rootName = (opts && opts.rootName) || \"root\";\n  const dom = buildNode(obj, rootName)[0];\n  return (\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom)\n  );\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj.toString();\n    return [elem];\n  } else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  } else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResource } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions) {\n  }\n\n  public abstract sendRequest(webResource: WebResource): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {\n  }\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel;\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes?: DeserializationContentTypes): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\", \"text/plain\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(nextPolicy: RequestPolicy, deserializationContentTypes: DeserializationContentTypes | undefined, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response));\n  }\n}\n\nfunction getOperationResponse(parsedResponse: HttpOperationResponse): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResource = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter: undefined | ((operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse)) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) = parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(jsonContentTypes: string[], xmlContentTypes: string[], response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(parsedResponse => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean = (expectedStatusCodes.length === 0 || (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes ? (200 <= statusCode && statusCode < 300) : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : parsedResponse.bodyAsText as string;\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined = defaultResponseSpec.bodyMapper;\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\"\n                      ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                      : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!] : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              const restError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(jsonContentTypes: string[], xmlContentTypes: string[], operationResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise<HttpOperationResponse>(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then(body => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nconst DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The minimum retry interval in milliseconds.\n   */\n  minRetryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptions} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number { return typeof n === \"number\"; }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => retry(this, request, response))\n      .catch(error => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: ExponentialRetryPolicy, statusCode: number | undefined, retryData: RetryData): boolean {\n  if (statusCode == undefined || (statusCode < 500 && statusCode !== 408) || statusCode === 501 || statusCode === 505) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(policy: ExponentialRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: ExponentialRetryPolicy, request: WebResource, response?: HttpOperationResponse, retryData?: RetryData, requestError?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, undefined))\n      .catch(err => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err = retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response);\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\"): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, private _requestIdHeaderName: string) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, utils.generateUuid());\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  // oscpu is not yet standards-compliant, but can not be undefined in TypeScript 3.6.2\n  readonly oscpu: string;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo: TelemetryInfo[], keySeparator = \" \", valueSeparator = \"/\"): string {\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string = (!userAgentData || userAgentData.key == undefined) ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string = (!userAgentData || userAgentData.value == undefined) ? getDefaultUserAgentValue() : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions, protected headerKey: string, protected headerValue: string) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResource): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n        case \"ParameterName\":\n          switch (currentCharacter) {\n          case \"=\":\n            currentState = \"ParameterValue\";\n            break;\n\n          case \"&\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            break;\n\n          default:\n            parameterName += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"ParameterValue\":\n          switch (currentCharacter) {\n          case \"=\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"Invalid\";\n            break;\n\n          case \"&\":\n            result.set(parameterName, parameterValue);\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"ParameterName\";\n            break;\n\n          default:\n            parameterValue += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"Invalid\":\n          if (currentCharacter === \"&\") {\n            currentState = \"ParameterName\";\n          }\n          break;\n\n        default:\n          throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n        case \"SCHEME\":\n          this._scheme = token.text || undefined;\n          break;\n\n        case \"HOST\":\n          this._host = token.text || undefined;\n          break;\n\n        case \"PORT\":\n          this._port = token.text || undefined;\n          break;\n\n        case \"PATH\":\n          const tokenPath: string | undefined = token.text || undefined;\n          if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n            this._path = tokenPath;\n          }\n          break;\n\n        case \"QUERY\":\n          this._query = URLQuery.parse(token.text);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {\n  }\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */) ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */) ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */);\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n      case \"SCHEME\":\n        nextScheme(this);\n        break;\n\n      case \"SCHEME_OR_HOST\":\n        nextSchemeOrHost(this);\n        break;\n\n      case \"HOST\":\n        nextHost(this);\n        break;\n\n      case \"PORT\":\n        nextPort(this);\n        break;\n\n      case \"PATH\":\n        nextPath(this);\n        break;\n\n      case \"QUERY\":\n        nextQuery(this);\n        break;\n\n      default:\n        throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(tokenizer, (character: string) => terminatingCharacters.indexOf(character) === -1);\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(policy: RedirectPolicy, response: HttpOperationResponse, currentRetries: number): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy.sendRequest(request)\n      .then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly _retryTimeout = 30) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => registerIfNeeded(this, request, response));\n  }\n}\n\n\nfunction registerIfNeeded(policy: RPRegistrationPolicy, request: WebResource, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n        // Autoregistration of ${provider} failed for some reason. We will not return this error\n        // instead will return the initial response with 409 status code back to the user.\n        // do nothing here as we are returning the original response at the end of this method.\n        .catch(() => false)\n        .then(registrationStatus => {\n          if (registrationStatus) {\n            // Retry the original request. We have to change the x-ms-client-request-id\n            // otherwise Azure endpoint will return the initial 409 (cached) response.\n            request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n            return policy._nextPolicy.sendRequest(request.clone());\n          }\n          return response;\n        });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResource, reuseUrlToo = false): WebResource {\n  const reqOptions: WebResource = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message &&\n      responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy: RPRegistrationPolicy, urlPrefix: string, provider: string, originalRequest: WebResource): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n      }\n      return getRegistrationStatus(policy, getUrl, originalRequest);\n    });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy: RPRegistrationPolicy, url: string, originalRequest: WebResource): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then(res => {\n    const obj = (res.parsedBody as any);\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpHeaders, } from \"../httpHeaders\";\nimport { WebResource } from \"../webResource\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"../credentials/accessTokenCache\";\n\n/**\n * Creates a new BearerTokenAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the bearer token.\n * @param scopes The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(credential: TokenCredential, scopes: string | string[]): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes, tokenCache);\n    }\n  };\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n  /**\n   * Creates a new BearerTokenAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param scopes The scopes for which the bearer token applies.\n   * @param tokenCache The cache for the most recent AccessToken returned from the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(\n    webResource: WebResource\n  ): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    const token = await this.getToken({\n      abortSignal: webResource.abortSignal\n    });\n    webResource.headers.set(\n      Constants.HeaderConstants.AUTHORIZATION,\n      `Bearer ${token}`\n    );\n    return this._nextPolicy.sendRequest(webResource);\n  }\n\n  private async getToken(options: GetTokenOptions): Promise<string | undefined> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = await this.credential.getToken(this.scopes, options) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    return accessToken ? accessToken.token : undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = typeof minRetryInterval === \"number\" ? minRetryInterval : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = typeof maxRetryInterval === \"number\" ? maxRetryInterval : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(policy: SystemErrorRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: SystemErrorRetryPolicy, request: WebResource, operationResponse: HttpOperationResponse, retryData?: RetryData, err?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (err && err.code && shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" || err.code === \"ENOENT\")) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, err))\n      .catch(err => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProxySettings } from \"../serviceClient\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\n\nconst proxyNotSupportedInBrowser = new Error(\"ProxyPolicy is not supported in browser environment\");\n\nexport function getDefaultProxySettings(_proxyUrl?: string): ProxySettings | undefined {\n  return undefined;\n}\n\nexport function proxyPolicy(_proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptions) => {\n      throw proxyNotSupportedInBrowser;\n    }\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n    throw proxyNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResource): Promise<HttpOperationResponse> {\n    throw proxyNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (httpRequest: WebResource, response: HttpOperationResponse) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, _handleResponse?: ResponseHandler) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then(response => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(httpRequest: WebResource, httpResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicyFactory, RequestPolicy, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function signingPolicy(authenticationProvider: ServiceClientCredentials): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, public authenticationProvider: ServiceClientCredentials) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResource): Promise<WebResource> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { OperationArguments } from \"./operationArguments\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath, OperationParameter, ParameterPath } from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport { deserializationPolicy, DeserializationContentTypes } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { bearerTokenAuthenticationPolicy } from \"./policies/bearerTokenAuthenticationPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback } from \"./util/utils\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { signingPolicy } from './policies/signingPolicy';\n\n\n/**\n * HTTP proxy settings (Node.js only)\n */\nexport interface ProxySettings {\n  host: string;\n  port: number;\n  username?: string;\n  password?: string;\n}\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?: RequestPolicyFactory[] | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => (void | RequestPolicyFactory[]));\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param credentials The credentials used for authentication with the service.\n   * @param options The service client options that govern the behavior of the client.\n   */\n  constructor(credentials?: TokenCredential | ServiceClientCredentials, options?: ServiceClientOptions) {\n    if (!options) {\n      options = {};\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      let authPolicyFactory: RequestPolicyFactory | undefined = undefined;\n      if (isTokenCredential(credentials)) {\n        // Create a wrapped RequestPolicyFactory here so that we can provide the\n        // correct scope to the BearerTokenAuthenticationPolicy at the first time\n        // one is requested.  This is needed because generated ServiceClient\n        // implementations do not set baseUri until after ServiceClient's constructor\n        // is finished, leaving baseUri empty at the time when it is needed to\n        // build the correct scope name.\n        const wrappedPolicyFactory: () => RequestPolicyFactory = () => {\n          let bearerTokenPolicyFactory: RequestPolicyFactory | undefined = undefined;\n          let serviceClient = this;\n          return {\n            create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy {\n              if (bearerTokenPolicyFactory === undefined) {\n                bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(credentials, `${serviceClient.baseUri || \"\"}/.default`)\n              }\n\n              return bearerTokenPolicyFactory.create(nextPolicy, options);\n            }\n          }\n        };\n\n        authPolicyFactory = wrappedPolicyFactory();\n      } else if (credentials && typeof credentials.signRequest === \"function\") {\n        authPolicyFactory = signingPolicy(credentials);\n      } else if (credentials !== undefined) {\n        throw new Error(\"The credentials argument must implement the TokenCredential interface\");\n      }\n\n      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);\n      if (options.requestPolicyFactories) {\n        // options.requestPolicyFactories can also be a function that manipulates\n        // the default requestPolicyFactories array\n        const newRequestPolicyFactories: void | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResource): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResource;\n    try {\n      if (options instanceof WebResource) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`, urlParameterValue);\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                }\n              }\n              else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper).headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n\n        if (options.spanOptions) {\n          httpRequest.spanOptions = options.spanOptions;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest)\n        .then(res => flattenResponse(res, operationSpec.responses[res.status]));\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then(res => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch(err => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(serviceClient: ServiceClient, httpRequest: WebResource, operationArguments: OperationArguments, operationSpec: OperationSpec): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName!), { rootName: xmlName || serializedName });\n          }\n          else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, { rootName: xmlName || serializedName });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\n\nfunction getValueOrFunctionResult(value: undefined | string | ((defaultValue: string) => string), defaultValueCreator: (() => string)): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(authPolicyFactory: RequestPolicyFactory | undefined, options: ServiceClientOptions): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (authPolicyFactory) {\n    factories.push(authPolicyFactory);\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  const userAgentHeaderValue: string = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  return factories;\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(serviceClient: ServiceClient, operationArguments: OperationArguments, parameter: OperationParameter, serializer: Serializer): any {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\n\nexport function getOperationArgumentValueFromParameterPath(serviceClient: ServiceClient, operationArguments: OperationArguments, parameterPath: ParameterPath, parameterMapper: Mapper, serializer: Serializer): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![propertyName];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(parent: { [parameterName: string]: any }, parameterPath: string[]): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(_response: HttpOperationResponse, responseSpec: OperationResponse | undefined): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties = typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties || {};\n    const isPageableResponse = Object.keys(modelProperties).some(k => modelProperties[k].serializedName === \"\");\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (bodyMapper || _response.request.method === \"HEAD\" || utils.isPrimitiveType(_response.parsedBody)) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function logPolicy(logger: any = console.log): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, logger);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger?: any;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, logger: any = console.log) {\n    super(nextPolicy, options);\n    this.logger = logger;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => logResponse(this, response));\n  }\n}\n\nfunction logResponse(policy: LogPolicy, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  policy.logger(`>> Request: ${JSON.stringify(response.request, undefined, 2)}`);\n  policy.logger(`>> Response status code: ${response.status}`);\n  const responseBody = response.bodyAsText;\n  policy.logger(`>> Body: ${responseBody}`);\n  return Promise.resolve(response);\n}\n","export enum SupportedPlugins {\n  OPENCENSUS,\n  NOOP\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TraceState } from \"../../interfaces/trace_state\";\n\n/**\n * @ignore\n * @internal\n */\nexport class OpenCensusTraceStatePlugin implements TraceState {\n  private readonly _state?: string;\n\n  constructor(state?: string) {\n    this._state = state;\n  }\n\n  get(key: string): string | undefined {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  set(key: string, value: string): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  unset(key: string): void {\n    throw new Error(\"Method not implemented\");\n  }\n\n  serialize(): string {\n    return this._state || \"\";\n  }\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of canonical status codes.\n *\n * TODO (revision): https://github.com/open-telemetry/opentelemetry-specification/issues/59\n */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enumeration that represents global trace options. These options are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nexport enum TraceOptions {\n  /** Bit to represent whether trace is unsampled in trace options. */\n  UNSAMPLED = 0x0,\n  /** Bit to represent whether trace is sampled in trace options. */\n  SAMPLED = 0x1,\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\nimport { OpenCensusTraceStatePlugin } from \"./openCensusTraceStatePlugin\";\n\nexport class OpenCensusSpanPlugin implements Span {\n  private _span: any;\n\n  public getSpan() {\n    return this._span;\n  }\n\n  constructor(span: any) {\n    this._span = span;\n  }\n\n  end(endTime?: number): void {\n    this._span.end(endTime);\n  }\n\n  start(startTime?: number): void {\n    this._span.start(startTime);\n  }\n\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceOptions: openCensusSpanContext.options,\n      traceState: new OpenCensusTraceStatePlugin(openCensusSpanContext.traceState)\n    };\n  }\n\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value);\n    return this;\n  }\n\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addEvent(name: string, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addLink(spanContext: SpanContext, attributes?: Attributes): this {\n    // Since there is no way to specify the link relationship\n    // It is set as Unspecified = 0\n    this._span.addLink(spanContext.traceId, spanContext.spanId, 0, attributes);\n    return this;\n  }\n\n  setStatus(status: Status): this {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  }\n\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Span } from \"../../interfaces/span\";\nimport { OpenCensusSpanPlugin } from \"../opencensus/openCensusSpanPlugin\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class OpenCensusTracePlugin implements Tracer {\n  private _tracer: any;\n\n  public constructor(tracer: any) {\n    this._tracer = tracer;\n  }\n  \n  public readonly pluginType = SupportedPlugins.OPENCENSUS;\n  \n  startSpan(name: string, options?: SpanOptions): Span {\n    const parent = options\n      ? options.parent\n        ? options.parent instanceof OpenCensusSpanPlugin\n          ? options.parent.getSpan()\n          : options.parent\n        : undefined\n      : undefined;\n\n    const span = this._tracer.startChildSpan({\n      name: name,\n      childOf: parent\n    });\n\n    const openCensusSpanPlugin = new OpenCensusSpanPlugin(span);\n    return openCensusSpanPlugin;\n  }\n\n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\nexport class NoOpSpanPlugin implements Span {\n  private _span: any;\n\n  constructor(span: any) {\n    this._span = span;\n  }\n\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\"\n    };\n  }\n\n  end(endTime?: number): void {\n    this._span.end(endTime);\n  }\n\n  start(startTime?: number): void {\n    this._span.start(startTime);\n  }\n\n  setAttribute(key: string, value: unknown): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addEvent(name: string, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addLink(spanContext: SpanContext, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setStatus(status: Status): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\nexport class SpanNoOpImpl implements Span {\n  context(): SpanContext {\n    throw new Error(\"Method not implemented.\");\n  }\n  setAttribute(key: string, value: unknown): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  addEvent(name: string, attributes?: Attributes | undefined): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  addLink(spanContext: SpanContext, attributes?: Attributes | undefined): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  setStatus(status: Status): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  start(startTime?: number): void {}\n  end(endTime?: number): void {}\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { NoOpSpanPlugin } from \"./noOpSpanPlugin\";\nimport { SpanNoOpImpl } from \"../../implementations/noop/spanNoOpImpl\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class NoOpTracePlugin implements Tracer {\n  private _tracer: any;\n\n  public constructor(tracer: any) {\n    this._tracer = tracer;\n  }\n\n  public readonly pluginType = SupportedPlugins.NOOP;\n\n  startSpan(name: string, options?: SpanOptions): Span {\n    const span = new SpanNoOpImpl();\n    const noOpSpanPlugin = new NoOpSpanPlugin(span);\n    return noOpSpanPlugin;\n  }\n\n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanNoOpImpl } from \"./spanNoOpImpl\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class TracerNoOpImpl implements Tracer {\n  public readonly pluginType = SupportedPlugins.NOOP;\n  \n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n  startSpan(name: string, options?: SpanOptions | undefined): Span {\n    return new SpanNoOpImpl();\n  }\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { SupportedPlugins } from \"./utils/supportedPlugins\";\nimport { OpenCensusTracePlugin } from \"./plugins/opencensus/openCensusTracePlugin\";\nimport { NoOpTracePlugin } from \"./plugins/noop/noOpTracePlugin\";\nimport { TracerNoOpImpl } from \"./implementations/noop/tracerNoOpImpl\";\nimport { Tracer } from \"./interfaces/tracer\";\n\nexport class TracerProxy {\n  private static _tracerPlugin: Tracer;\n\n  private constructor() {}\n\n  public static setTracer(tracer: any, tracerPluginType: SupportedPlugins) {\n    if (tracerPluginType === SupportedPlugins.OPENCENSUS) {\n      TracerProxy._tracerPlugin = new OpenCensusTracePlugin(tracer);\n    } else {\n      TracerProxy._tracerPlugin = new NoOpTracePlugin(tracer);\n    }\n  }\n\n  public static getTracer() {\n    if (!TracerProxy._tracerPlugin) {\n      TracerProxy._tracerPlugin = new NoOpTracePlugin(new TracerNoOpImpl());\n    }\n    return TracerProxy._tracerPlugin;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TracerProxy, TraceOptions } from \"@azure/core-tracing\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy\n} from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\n\nexport function tracingPolicy(): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options);\n    }\n  };\n}\n\nexport class TracingPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.spanOptions || !request.spanOptions.parent) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    // create a new span\n    const tracer = TracerProxy.getTracer();\n    const span = tracer.startSpan(\"core-http\", request.spanOptions);\n\n    span.start();\n\n    try {\n      // set headers\n      const spanContext = span.context();\n      if (spanContext.spanId && spanContext.traceId) {\n        request.headers.set(\n          \"traceparent\",\n          `${spanContext.traceId}-${spanContext.spanId}-${spanContext.traceOptions || TraceOptions.UNSAMPLED}`\n        );\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n\n      const response = await this._nextPolicy.sendRequest(request);\n      span.end();\n      return response;\n    } catch (err) {\n      span.end();\n      throw err;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  userName: string;\n  password: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @constructor\n   * @param {string} userName User name.\n   * @param {string} password Password.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  constructor(userName: string, password: string, authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n  signRequest(webResource: WebResource) {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { WebResource } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\n\n/**\n * @interface ApiKeyCredentialOptions\n * Describes the options to be provided while creating an instance of ApiKeyCredentials\n */\nexport interface ApiKeyCredentialOptions {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  inQuery?: { [x: string]: any };\n}\n\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials implements ServiceClientCredentials {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  private readonly inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  private readonly inQuery?: { [x: string]: any };\n\n  /**\n   * @constructor\n   * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options: ApiKeyCredentialOptions) {\n    if (!options || (options && !options.inHeader && !options.inQuery)) {\n      throw new Error(`options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`);\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n  signRequest(webResource: WebResource): Promise<WebResource> {\n    if (!webResource) {\n      return Promise.reject(new Error(`webResource cannot be null or undefined and must be of type \"object\".`));\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ApiKeyCredentials, ApiKeyCredentialOptions } from \"./apiKeyCredentials\";\n\nexport class TopicCredentials extends ApiKeyCredentials {\n  /**\n   * Creates a new EventGrid TopicCredentials object.\n   *\n   * @constructor\n   * @param {string} topicKey   The EventGrid topic key\n   */\n  constructor(topicKey: string) {\n    if (!topicKey || (topicKey && typeof topicKey !== \"string\")) {\n      throw new Error(\"topicKey cannot be null or undefined and must be of type string.\");\n    }\n    const options: ApiKeyCredentialOptions = {\n      inHeader: {\n        \"aeg-sas-key\": topicKey\n      }\n    };\n    super(options);\n  }\n}\n"]}