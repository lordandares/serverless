{"version":3,"file":"core-tracing.min.js","sources":["../lib/utils/supportedPlugins.ts","../lib/plugins/opencensus/openCensusTraceStatePlugin.ts","../lib/interfaces/span_kind.ts","../lib/interfaces/status.ts","../lib/interfaces/trace_options.ts","../lib/plugins/opencensus/openCensusSpanPlugin.ts","../lib/plugins/opencensus/openCensusTracePlugin.ts","../lib/plugins/noop/noOpSpanPlugin.ts","../lib/implementations/noop/spanNoOpImpl.ts","../lib/plugins/noop/noOpTracePlugin.ts","../lib/implementations/noop/tracerNoOpImpl.ts","../lib/tracerProxy.ts"],"sourcesContent":["export enum SupportedPlugins {\n  OPENCENSUS,\n  NOOP\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TraceState } from \"../../interfaces/trace_state\";\n\n/**\n * @ignore\n * @internal\n */\nexport class OpenCensusTraceStatePlugin implements TraceState {\n  private readonly _state?: string;\n\n  constructor(state?: string) {\n    this._state = state;\n  }\n\n  get(key: string): string | undefined {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  set(key: string, value: string): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  unset(key: string): void {\n    throw new Error(\"Method not implemented\");\n  }\n\n  serialize(): string {\n    return this._state || \"\";\n  }\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of canonical status codes.\n *\n * TODO (revision): https://github.com/open-telemetry/opentelemetry-specification/issues/59\n */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n","/**\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enumeration that represents global trace options. These options are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nexport enum TraceOptions {\n  /** Bit to represent whether trace is unsampled in trace options. */\n  UNSAMPLED = 0x0,\n  /** Bit to represent whether trace is sampled in trace options. */\n  SAMPLED = 0x1,\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\nimport { OpenCensusTraceStatePlugin } from \"./openCensusTraceStatePlugin\";\n\nexport class OpenCensusSpanPlugin implements Span {\n  private _span: any;\n\n  public getSpan() {\n    return this._span;\n  }\n\n  constructor(span: any) {\n    this._span = span;\n  }\n\n  end(endTime?: number): void {\n    this._span.end(endTime);\n  }\n\n  start(startTime?: number): void {\n    this._span.start(startTime);\n  }\n\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceOptions: openCensusSpanContext.options,\n      traceState: new OpenCensusTraceStatePlugin(openCensusSpanContext.traceState)\n    };\n  }\n\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value);\n    return this;\n  }\n\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addEvent(name: string, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addLink(spanContext: SpanContext, attributes?: Attributes): this {\n    // Since there is no way to specify the link relationship\n    // It is set as Unspecified = 0\n    this._span.addLink(spanContext.traceId, spanContext.spanId, 0, attributes);\n    return this;\n  }\n\n  setStatus(status: Status): this {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  }\n\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Span } from \"../../interfaces/span\";\nimport { OpenCensusSpanPlugin } from \"../opencensus/openCensusSpanPlugin\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class OpenCensusTracePlugin implements Tracer {\n  private _tracer: any;\n\n  public constructor(tracer: any) {\n    this._tracer = tracer;\n  }\n  \n  public readonly pluginType = SupportedPlugins.OPENCENSUS;\n  \n  startSpan(name: string, options?: SpanOptions): Span {\n    const parent = options\n      ? options.parent\n        ? options.parent instanceof OpenCensusSpanPlugin\n          ? options.parent.getSpan()\n          : options.parent\n        : undefined\n      : undefined;\n\n    const span = this._tracer.startChildSpan({\n      name: name,\n      childOf: parent\n    });\n\n    const openCensusSpanPlugin = new OpenCensusSpanPlugin(span);\n    return openCensusSpanPlugin;\n  }\n\n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\nexport class NoOpSpanPlugin implements Span {\n  private _span: any;\n\n  constructor(span: any) {\n    this._span = span;\n  }\n\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\"\n    };\n  }\n\n  end(endTime?: number): void {\n    this._span.end(endTime);\n  }\n\n  start(startTime?: number): void {\n    this._span.start(startTime);\n  }\n\n  setAttribute(key: string, value: unknown): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addEvent(name: string, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addLink(spanContext: SpanContext, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setStatus(status: Status): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\nexport class SpanNoOpImpl implements Span {\n  context(): SpanContext {\n    throw new Error(\"Method not implemented.\");\n  }\n  setAttribute(key: string, value: unknown): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  setAttributes(attributes: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  addEvent(name: string, attributes?: Attributes | undefined): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  addLink(spanContext: SpanContext, attributes?: Attributes | undefined): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  setStatus(status: Status): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  updateName(name: string): this {\n    throw new Error(\"Method not implemented.\");\n  }\n  start(startTime?: number): void {}\n  end(endTime?: number): void {}\n  isRecordingEvents(): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { NoOpSpanPlugin } from \"./noOpSpanPlugin\";\nimport { SpanNoOpImpl } from \"../../implementations/noop/spanNoOpImpl\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class NoOpTracePlugin implements Tracer {\n  private _tracer: any;\n\n  public constructor(tracer: any) {\n    this._tracer = tracer;\n  }\n\n  public readonly pluginType = SupportedPlugins.NOOP;\n\n  startSpan(name: string, options?: SpanOptions): Span {\n    const span = new SpanNoOpImpl();\n    const noOpSpanPlugin = new NoOpSpanPlugin(span);\n    return noOpSpanPlugin;\n  }\n\n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { Tracer } from \"../../interfaces/tracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanNoOpImpl } from \"./spanNoOpImpl\";\nimport { SupportedPlugins } from '../../utils/supportedPlugins';\n\nexport class TracerNoOpImpl implements Tracer {\n  public readonly pluginType = SupportedPlugins.NOOP;\n  \n  getCurrentSpan(): Span {\n    throw new Error(\"Method not implemented.\");\n  }\n  startSpan(name: string, options?: SpanOptions | undefined): Span {\n    return new SpanNoOpImpl();\n  }\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  getBinaryFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n  getHttpTextFormat(): unknown {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { SupportedPlugins } from \"./utils/supportedPlugins\";\nimport { OpenCensusTracePlugin } from \"./plugins/opencensus/openCensusTracePlugin\";\nimport { NoOpTracePlugin } from \"./plugins/noop/noOpTracePlugin\";\nimport { TracerNoOpImpl } from \"./implementations/noop/tracerNoOpImpl\";\nimport { Tracer } from \"./interfaces/tracer\";\n\nexport class TracerProxy {\n  private static _tracerPlugin: Tracer;\n\n  private constructor() {}\n\n  public static setTracer(tracer: any, tracerPluginType: SupportedPlugins) {\n    if (tracerPluginType === SupportedPlugins.OPENCENSUS) {\n      TracerProxy._tracerPlugin = new OpenCensusTracePlugin(tracer);\n    } else {\n      TracerProxy._tracerPlugin = new NoOpTracePlugin(tracer);\n    }\n  }\n\n  public static getTracer() {\n    if (!TracerProxy._tracerPlugin) {\n      TracerProxy._tracerPlugin = new NoOpTracePlugin(new TracerNoOpImpl());\n    }\n    return TracerProxy._tracerPlugin;\n  }\n}\n"],"names":["SupportedPlugins","SpanKind","CanonicalCode","TraceOptions","state","this","_state","OpenCensusTraceStatePlugin","key","Error","value","span","_span","OpenCensusSpanPlugin","endTime","end","startTime","start","openCensusSpanContext","spanContext","spanId","traceId","traceOptions","options","traceState","addAttribute","attributes","name","addLink","status","setStatus","code","message","tracer","OPENCENSUS","_tracer","OpenCensusTracePlugin","parent","getSpan","undefined","startChildSpan","childOf","fn","NoOpSpanPlugin","SpanNoOpImpl","NOOP","NoOpTracePlugin","TracerNoOpImpl","TracerProxy","tracerPluginType","_tracerPlugin"],"mappings":"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"}