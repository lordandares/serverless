"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var coreHttp = require("@azure/core-http");
var Models = require("./models");
exports.KeyVaultModels = Models;
var Mappers = require("./models/mappers");
exports.KeyVaultMappers = Mappers;
var Parameters = require("./models/parameters");
var keyVaultClientContext_1 = require("./keyVaultClientContext");
exports.KeyVaultClientContext = keyVaultClientContext_1.KeyVaultClientContext;
var KeyVaultClient = /** @class */ (function (_super) {
    __extends(KeyVaultClient, _super);
    /**
     * Initializes a new instance of the KeyVaultClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param [options] The parameter options
     */
    function KeyVaultClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    KeyVaultClient.prototype.createKey = function (vaultBaseUrl, keyName, kty, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            kty: kty,
            options: options
        }, createKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.importKey = function (vaultBaseUrl, keyName, key, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            key: key,
            options: options
        }, importKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteKey = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, deleteKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateKey = function (vaultBaseUrl, keyName, keyVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            options: options
        }, updateKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.getKey = function (vaultBaseUrl, keyName, keyVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            options: options
        }, getKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.getKeyVersions = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, getKeyVersionsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getKeys = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getKeysOperationSpec, callback);
    };
    KeyVaultClient.prototype.backupKey = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, backupKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.restoreKey = function (vaultBaseUrl, keyBundleBackup, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyBundleBackup: keyBundleBackup,
            options: options
        }, restoreKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.encrypt = function (vaultBaseUrl, keyName, keyVersion, algorithm, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            value: value,
            options: options
        }, encryptOperationSpec, callback);
    };
    KeyVaultClient.prototype.decrypt = function (vaultBaseUrl, keyName, keyVersion, algorithm, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            value: value,
            options: options
        }, decryptOperationSpec, callback);
    };
    KeyVaultClient.prototype.sign = function (vaultBaseUrl, keyName, keyVersion, algorithm, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            value: value,
            options: options
        }, signOperationSpec, callback);
    };
    KeyVaultClient.prototype.verify = function (vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            digest: digest,
            signature: signature,
            options: options
        }, verifyOperationSpec, callback);
    };
    KeyVaultClient.prototype.wrapKey = function (vaultBaseUrl, keyName, keyVersion, algorithm, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            value: value,
            options: options
        }, wrapKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.unwrapKey = function (vaultBaseUrl, keyName, keyVersion, algorithm, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            keyVersion: keyVersion,
            algorithm: algorithm,
            value: value,
            options: options
        }, unwrapKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedKeys = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getDeletedKeysOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedKey = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, getDeletedKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.purgeDeletedKey = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, purgeDeletedKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.recoverDeletedKey = function (vaultBaseUrl, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            keyName: keyName,
            options: options
        }, recoverDeletedKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.setSecret = function (vaultBaseUrl, secretName, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            value: value,
            options: options
        }, setSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteSecret = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, deleteSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateSecret = function (vaultBaseUrl, secretName, secretVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            secretVersion: secretVersion,
            options: options
        }, updateSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSecret = function (vaultBaseUrl, secretName, secretVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            secretVersion: secretVersion,
            options: options
        }, getSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSecrets = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getSecretsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSecretVersions = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, getSecretVersionsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSecrets = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getDeletedSecretsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSecret = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, getDeletedSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.purgeDeletedSecret = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, purgeDeletedSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.recoverDeletedSecret = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, recoverDeletedSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.backupSecret = function (vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretName: secretName,
            options: options
        }, backupSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.restoreSecret = function (vaultBaseUrl, secretBundleBackup, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            secretBundleBackup: secretBundleBackup,
            options: options
        }, restoreSecretOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificates = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getCertificatesOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, deleteCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.setCertificateContacts = function (vaultBaseUrl, contacts, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            contacts: contacts,
            options: options
        }, setCertificateContactsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateContacts = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getCertificateContactsOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteCertificateContacts = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, deleteCertificateContactsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateIssuers = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getCertificateIssuersOperationSpec, callback);
    };
    KeyVaultClient.prototype.setCertificateIssuer = function (vaultBaseUrl, issuerName, provider, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            issuerName: issuerName,
            provider: provider,
            options: options
        }, setCertificateIssuerOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            issuerName: issuerName,
            options: options
        }, updateCertificateIssuerOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            issuerName: issuerName,
            options: options
        }, getCertificateIssuerOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            issuerName: issuerName,
            options: options
        }, deleteCertificateIssuerOperationSpec, callback);
    };
    KeyVaultClient.prototype.createCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, createCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.importCertificate = function (vaultBaseUrl, certificateName, base64EncodedCertificate, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            base64EncodedCertificate: base64EncodedCertificate,
            options: options
        }, importCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateVersions = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, getCertificateVersionsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificatePolicy = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, getCertificatePolicyOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateCertificatePolicy = function (vaultBaseUrl, certificateName, certificatePolicy, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            certificatePolicy: certificatePolicy,
            options: options
        }, updateCertificatePolicyOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateCertificate = function (vaultBaseUrl, certificateName, certificateVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            certificateVersion: certificateVersion,
            options: options
        }, updateCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificate = function (vaultBaseUrl, certificateName, certificateVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            certificateVersion: certificateVersion,
            options: options
        }, getCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateCertificateOperation = function (vaultBaseUrl, certificateName, cancellationRequested, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            cancellationRequested: cancellationRequested,
            options: options
        }, updateCertificateOperationOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateOperation = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, getCertificateOperationOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteCertificateOperation = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, deleteCertificateOperationOperationSpec, callback);
    };
    KeyVaultClient.prototype.mergeCertificate = function (vaultBaseUrl, certificateName, x509Certificates, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            x509Certificates: x509Certificates,
            options: options
        }, mergeCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.backupCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, backupCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.restoreCertificate = function (vaultBaseUrl, certificateBundleBackup, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateBundleBackup: certificateBundleBackup,
            options: options
        }, restoreCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedCertificates = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getDeletedCertificatesOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, getDeletedCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.purgeDeletedCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, purgeDeletedCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.recoverDeletedCertificate = function (vaultBaseUrl, certificateName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            certificateName: certificateName,
            options: options
        }, recoverDeletedCertificateOperationSpec, callback);
    };
    KeyVaultClient.prototype.getStorageAccounts = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getStorageAccountsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedStorageAccounts = function (vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            options: options
        }, getDeletedStorageAccountsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, getDeletedStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.purgeDeletedStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, purgeDeletedStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.recoverDeletedStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, recoverDeletedStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.backupStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, backupStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.restoreStorageAccount = function (vaultBaseUrl, storageBundleBackup, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageBundleBackup: storageBundleBackup,
            options: options
        }, restoreStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, deleteStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.getStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, getStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.setStorageAccount = function (vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            resourceId: resourceId,
            activeKeyName: activeKeyName,
            autoRegenerateKey: autoRegenerateKey,
            options: options
        }, setStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateStorageAccount = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, updateStorageAccountOperationSpec, callback);
    };
    KeyVaultClient.prototype.regenerateStorageAccountKey = function (vaultBaseUrl, storageAccountName, keyName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            keyName: keyName,
            options: options
        }, regenerateStorageAccountKeyOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSasDefinitions = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, getSasDefinitionsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSasDefinitions = function (vaultBaseUrl, storageAccountName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            options: options
        }, getDeletedSasDefinitionsOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            options: options
        }, getDeletedSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.recoverDeletedSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            options: options
        }, recoverDeletedSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.deleteSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            options: options
        }, deleteSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            options: options
        }, getSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.setSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            templateUri: templateUri,
            sasType: sasType,
            validityPeriod: validityPeriod,
            options: options
        }, setSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.updateSasDefinition = function (vaultBaseUrl, storageAccountName, sasDefinitionName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl: vaultBaseUrl,
            storageAccountName: storageAccountName,
            sasDefinitionName: sasDefinitionName,
            options: options
        }, updateSasDefinitionOperationSpec, callback);
    };
    KeyVaultClient.prototype.getKeyVersionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getKeyVersionsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getKeysNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getKeysNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedKeysNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getDeletedKeysNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSecretsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getSecretsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSecretVersionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getSecretVersionsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSecretsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getDeletedSecretsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificatesNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getCertificatesNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateIssuersNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getCertificateIssuersNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getCertificateVersionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getCertificateVersionsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedCertificatesNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getDeletedCertificatesNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getStorageAccountsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getStorageAccountsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedStorageAccountsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getDeletedStorageAccountsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getSasDefinitionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getSasDefinitionsNextOperationSpec, callback);
    };
    KeyVaultClient.prototype.getDeletedSasDefinitionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getDeletedSasDefinitionsNextOperationSpec, callback);
    };
    return KeyVaultClient;
}(keyVaultClientContext_1.KeyVaultClientContext));
exports.KeyVaultClient = KeyVaultClient;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers);
var createKeyOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/create",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            kty: "kty",
            keySize: ["options", "keySize"],
            keyOps: ["options", "keyOps"],
            keyAttributes: ["options", "keyAttributes"],
            tags: ["options", "tags"],
            curve: ["options", "curve"]
        },
        mapper: __assign({}, Mappers.KeyCreateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var importKeyOperationSpec = {
    httpMethod: "PUT",
    path: "keys/{key-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            hsm: ["options", "hsm"],
            key: "key",
            keyAttributes: ["options", "keyAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.KeyImportParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteKeyOperationSpec = {
    httpMethod: "DELETE",
    path: "keys/{key-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedKeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateKeyOperationSpec = {
    httpMethod: "PATCH",
    path: "keys/{key-name}/{key-version}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            keyOps: ["options", "keyOps"],
            keyAttributes: ["options", "keyAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.KeyUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getKeyOperationSpec = {
    httpMethod: "GET",
    path: "keys/{key-name}/{key-version}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getKeyVersionsOperationSpec = {
    httpMethod: "GET",
    path: "keys/{key-name}/versions",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getKeysOperationSpec = {
    httpMethod: "GET",
    path: "keys",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var backupKeyOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/backup",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.BackupKeyResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var restoreKeyOperationSpec = {
    httpMethod: "POST",
    path: "keys/restore",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            keyBundleBackup: "keyBundleBackup"
        },
        mapper: __assign({}, Mappers.KeyRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var encryptOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/encrypt",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            value: "value"
        },
        mapper: __assign({}, Mappers.KeyOperationsParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyOperationResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var decryptOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/decrypt",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            value: "value"
        },
        mapper: __assign({}, Mappers.KeyOperationsParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyOperationResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var signOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/sign",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            value: "value"
        },
        mapper: __assign({}, Mappers.KeySignParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyOperationResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var verifyOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/verify",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            digest: "digest",
            signature: "signature"
        },
        mapper: __assign({}, Mappers.KeyVerifyParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyVerifyResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var wrapKeyOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/wrapkey",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            value: "value"
        },
        mapper: __assign({}, Mappers.KeyOperationsParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyOperationResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var unwrapKeyOperationSpec = {
    httpMethod: "POST",
    path: "keys/{key-name}/{key-version}/unwrapkey",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            algorithm: "algorithm",
            value: "value"
        },
        mapper: __assign({}, Mappers.KeyOperationsParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyOperationResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedKeysOperationSpec = {
    httpMethod: "GET",
    path: "deletedkeys",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedKeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedKeyOperationSpec = {
    httpMethod: "GET",
    path: "deletedkeys/{key-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedKeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var purgeDeletedKeyOperationSpec = {
    httpMethod: "DELETE",
    path: "deletedkeys/{key-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        204: {},
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var recoverDeletedKeyOperationSpec = {
    httpMethod: "POST",
    path: "deletedkeys/{key-name}/recover",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var setSecretOperationSpec = {
    httpMethod: "PUT",
    path: "secrets/{secret-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            value: "value",
            tags: ["options", "tags"],
            contentType: ["options", "contentType"],
            secretAttributes: ["options", "secretAttributes"]
        },
        mapper: __assign({}, Mappers.SecretSetParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteSecretOperationSpec = {
    httpMethod: "DELETE",
    path: "secrets/{secret-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateSecretOperationSpec = {
    httpMethod: "PATCH",
    path: "secrets/{secret-name}/{secret-version}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            contentType: ["options", "contentType"],
            secretAttributes: ["options", "secretAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.SecretUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSecretOperationSpec = {
    httpMethod: "GET",
    path: "secrets/{secret-name}/{secret-version}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSecretsOperationSpec = {
    httpMethod: "GET",
    path: "secrets",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSecretVersionsOperationSpec = {
    httpMethod: "GET",
    path: "secrets/{secret-name}/versions",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSecretsOperationSpec = {
    httpMethod: "GET",
    path: "deletedsecrets",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSecretOperationSpec = {
    httpMethod: "GET",
    path: "deletedsecrets/{secret-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var purgeDeletedSecretOperationSpec = {
    httpMethod: "DELETE",
    path: "deletedsecrets/{secret-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        204: {},
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var recoverDeletedSecretOperationSpec = {
    httpMethod: "POST",
    path: "deletedsecrets/{secret-name}/recover",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var backupSecretOperationSpec = {
    httpMethod: "POST",
    path: "secrets/{secret-name}/backup",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.BackupSecretResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var restoreSecretOperationSpec = {
    httpMethod: "POST",
    path: "secrets/restore",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            secretBundleBackup: "secretBundleBackup"
        },
        mapper: __assign({}, Mappers.SecretRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificatesOperationSpec = {
    httpMethod: "GET",
    path: "certificates",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteCertificateOperationSpec = {
    httpMethod: "DELETE",
    path: "certificates/{certificate-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var setCertificateContactsOperationSpec = {
    httpMethod: "PUT",
    path: "certificates/contacts",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: "contacts",
        mapper: __assign({}, Mappers.Contacts, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateContactsOperationSpec = {
    httpMethod: "GET",
    path: "certificates/contacts",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteCertificateContactsOperationSpec = {
    httpMethod: "DELETE",
    path: "certificates/contacts",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateIssuersOperationSpec = {
    httpMethod: "GET",
    path: "certificates/issuers",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateIssuerListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var setCertificateIssuerOperationSpec = {
    httpMethod: "PUT",
    path: "certificates/issuers/{issuer-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            provider: "provider",
            credentials: ["options", "credentials"],
            organizationDetails: ["options", "organizationDetails"],
            attributes: ["options", "attributes"]
        },
        mapper: __assign({}, Mappers.CertificateIssuerSetParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateCertificateIssuerOperationSpec = {
    httpMethod: "PATCH",
    path: "certificates/issuers/{issuer-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            provider: ["options", "provider"],
            credentials: ["options", "credentials"],
            organizationDetails: ["options", "organizationDetails"],
            attributes: ["options", "attributes"]
        },
        mapper: __assign({}, Mappers.CertificateIssuerUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateIssuerOperationSpec = {
    httpMethod: "GET",
    path: "certificates/issuers/{issuer-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteCertificateIssuerOperationSpec = {
    httpMethod: "DELETE",
    path: "certificates/issuers/{issuer-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var createCertificateOperationSpec = {
    httpMethod: "POST",
    path: "certificates/{certificate-name}/create",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.CertificateCreateParameters, { required: true })
    },
    responses: {
        202: {
            bodyMapper: Mappers.CertificateOperation
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var importCertificateOperationSpec = {
    httpMethod: "POST",
    path: "certificates/{certificate-name}/import",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            base64EncodedCertificate: "base64EncodedCertificate",
            password: ["options", "password"],
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.CertificateImportParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateVersionsOperationSpec = {
    httpMethod: "GET",
    path: "certificates/{certificate-name}/versions",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificatePolicyOperationSpec = {
    httpMethod: "GET",
    path: "certificates/{certificate-name}/policy",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificatePolicy
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateCertificatePolicyOperationSpec = {
    httpMethod: "PATCH",
    path: "certificates/{certificate-name}/policy",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: "certificatePolicy",
        mapper: __assign({}, Mappers.CertificatePolicy, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificatePolicy
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateCertificateOperationSpec = {
    httpMethod: "PATCH",
    path: "certificates/{certificate-name}/{certificate-version}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.certificateName0,
        Parameters.certificateVersion
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.CertificateUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateOperationSpec = {
    httpMethod: "GET",
    path: "certificates/{certificate-name}/{certificate-version}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.certificateName0,
        Parameters.certificateVersion
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateCertificateOperationOperationSpec = {
    httpMethod: "PATCH",
    path: "certificates/{certificate-name}/pending",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            cancellationRequested: "cancellationRequested"
        },
        mapper: __assign({}, Mappers.CertificateOperationUpdateParameter, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateOperationOperationSpec = {
    httpMethod: "GET",
    path: "certificates/{certificate-name}/pending",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteCertificateOperationOperationSpec = {
    httpMethod: "DELETE",
    path: "certificates/{certificate-name}/pending",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var mergeCertificateOperationSpec = {
    httpMethod: "POST",
    path: "certificates/{certificate-name}/pending/merge",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            x509Certificates: "x509Certificates",
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.CertificateMergeParameters, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var backupCertificateOperationSpec = {
    httpMethod: "POST",
    path: "certificates/{certificate-name}/backup",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.BackupCertificateResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var restoreCertificateOperationSpec = {
    httpMethod: "POST",
    path: "certificates/restore",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            certificateBundleBackup: "certificateBundleBackup"
        },
        mapper: __assign({}, Mappers.CertificateRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedCertificatesOperationSpec = {
    httpMethod: "GET",
    path: "deletedcertificates",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedCertificateOperationSpec = {
    httpMethod: "GET",
    path: "deletedcertificates/{certificate-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var purgeDeletedCertificateOperationSpec = {
    httpMethod: "DELETE",
    path: "deletedcertificates/{certificate-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        204: {},
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var recoverDeletedCertificateOperationSpec = {
    httpMethod: "POST",
    path: "deletedcertificates/{certificate-name}/recover",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getStorageAccountsOperationSpec = {
    httpMethod: "GET",
    path: "storage",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.StorageListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedStorageAccountsOperationSpec = {
    httpMethod: "GET",
    path: "deletedstorage",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedStorageListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedStorageAccountOperationSpec = {
    httpMethod: "GET",
    path: "deletedstorage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedStorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var purgeDeletedStorageAccountOperationSpec = {
    httpMethod: "DELETE",
    path: "deletedstorage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        204: {},
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var recoverDeletedStorageAccountOperationSpec = {
    httpMethod: "POST",
    path: "deletedstorage/{storage-account-name}/recover",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var backupStorageAccountOperationSpec = {
    httpMethod: "POST",
    path: "storage/{storage-account-name}/backup",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName1],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.BackupStorageResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var restoreStorageAccountOperationSpec = {
    httpMethod: "POST",
    path: "storage/restore",
    urlParameters: [Parameters.vaultBaseUrl],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            storageBundleBackup: "storageBundleBackup"
        },
        mapper: __assign({}, Mappers.StorageRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteStorageAccountOperationSpec = {
    httpMethod: "DELETE",
    path: "storage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedStorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getStorageAccountOperationSpec = {
    httpMethod: "GET",
    path: "storage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var setStorageAccountOperationSpec = {
    httpMethod: "PUT",
    path: "storage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            resourceId: "resourceId",
            activeKeyName: "activeKeyName",
            autoRegenerateKey: "autoRegenerateKey",
            regenerationPeriod: ["options", "regenerationPeriod"],
            storageAccountAttributes: ["options", "storageAccountAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.StorageAccountCreateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateStorageAccountOperationSpec = {
    httpMethod: "PATCH",
    path: "storage/{storage-account-name}",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            activeKeyName: ["options", "activeKeyName"],
            autoRegenerateKey: ["options", "autoRegenerateKey"],
            regenerationPeriod: ["options", "regenerationPeriod"],
            storageAccountAttributes: ["options", "storageAccountAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.StorageAccountUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var regenerateStorageAccountKeyOperationSpec = {
    httpMethod: "POST",
    path: "storage/{storage-account-name}/regeneratekey",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            keyName: "keyName"
        },
        mapper: __assign({}, Mappers.StorageAccountRegenerteKeyParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSasDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "storage/{storage-account-name}/sas",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSasDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "deletedstorage/{storage-account-name}/sas",
    urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSasDefinitionListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSasDefinitionOperationSpec = {
    httpMethod: "GET",
    path: "deletedstorage/{storage-account-name}/sas/{sas-definition-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var recoverDeletedSasDefinitionOperationSpec = {
    httpMethod: "POST",
    path: "deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var deleteSasDefinitionOperationSpec = {
    httpMethod: "DELETE",
    path: "storage/{storage-account-name}/sas/{sas-definition-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSasDefinitionOperationSpec = {
    httpMethod: "GET",
    path: "storage/{storage-account-name}/sas/{sas-definition-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var setSasDefinitionOperationSpec = {
    httpMethod: "PUT",
    path: "storage/{storage-account-name}/sas/{sas-definition-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            templateUri: "templateUri",
            sasType: "sasType",
            validityPeriod: "validityPeriod",
            sasDefinitionAttributes: ["options", "sasDefinitionAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.SasDefinitionCreateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var updateSasDefinitionOperationSpec = {
    httpMethod: "PATCH",
    path: "storage/{storage-account-name}/sas/{sas-definition-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.storageAccountName0,
        Parameters.sasDefinitionName
    ],
    queryParameters: [Parameters.apiVersion],
    headerParameters: [Parameters.acceptLanguage],
    requestBody: {
        parameterPath: {
            templateUri: ["options", "templateUri"],
            sasType: ["options", "sasType"],
            validityPeriod: ["options", "validityPeriod"],
            sasDefinitionAttributes: ["options", "sasDefinitionAttributes"],
            tags: ["options", "tags"]
        },
        mapper: __assign({}, Mappers.SasDefinitionUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionBundle
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getKeyVersionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getKeysNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedKeysNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedKeyListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSecretsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSecretVersionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSecretsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificatesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateIssuersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateIssuerListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getCertificateVersionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedCertificatesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getStorageAccountsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.StorageListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedStorageAccountsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedStorageListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getSasDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.SasDefinitionListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
var getDeletedSasDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "{vaultBaseUrl}",
    path: "{nextLink}",
    urlParameters: [Parameters.nextPageLink],
    headerParameters: [Parameters.acceptLanguage],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSasDefinitionListResult
        },
        "default": {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer: serializer
};
