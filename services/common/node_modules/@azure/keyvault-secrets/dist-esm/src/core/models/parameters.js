/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
export var acceptLanguage = {
    parameterPath: "acceptLanguage",
    mapper: {
        serializedName: "accept-language",
        defaultValue: "en-US",
        type: {
            name: "String"
        }
    }
};
export var apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        required: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export var certificateName0 = {
    parameterPath: "certificateName",
    mapper: {
        required: true,
        serializedName: "certificate-name",
        type: {
            name: "String"
        }
    }
};
export var certificateName1 = {
    parameterPath: "certificateName",
    mapper: {
        required: true,
        serializedName: "certificate-name",
        constraints: {
            Pattern: /^[0-9a-zA-Z-]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var certificateVersion = {
    parameterPath: "certificateVersion",
    mapper: {
        required: true,
        serializedName: "certificate-version",
        type: {
            name: "String"
        }
    }
};
export var includePending = {
    parameterPath: ["options", "includePending"],
    mapper: {
        serializedName: "includePending",
        type: {
            name: "Boolean"
        }
    }
};
export var issuerName = {
    parameterPath: "issuerName",
    mapper: {
        required: true,
        serializedName: "issuer-name",
        type: {
            name: "String"
        }
    }
};
export var keyName0 = {
    parameterPath: "keyName",
    mapper: {
        required: true,
        serializedName: "key-name",
        constraints: {
            Pattern: /^[0-9a-zA-Z-]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var keyName1 = {
    parameterPath: "keyName",
    mapper: {
        required: true,
        serializedName: "key-name",
        type: {
            name: "String"
        }
    }
};
export var keyVersion = {
    parameterPath: "keyVersion",
    mapper: {
        required: true,
        serializedName: "key-version",
        type: {
            name: "String"
        }
    }
};
export var maxresults = {
    parameterPath: ["options", "maxresults"],
    mapper: {
        serializedName: "maxresults",
        constraints: {
            InclusiveMaximum: 25,
            InclusiveMinimum: 1
        },
        type: {
            name: "Number"
        }
    }
};
export var nextPageLink = {
    parameterPath: "nextPageLink",
    mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export var sasDefinitionName = {
    parameterPath: "sasDefinitionName",
    mapper: {
        required: true,
        serializedName: "sas-definition-name",
        constraints: {
            Pattern: /^[0-9a-zA-Z]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var secretName0 = {
    parameterPath: "secretName",
    mapper: {
        required: true,
        serializedName: "secret-name",
        constraints: {
            Pattern: /^[0-9a-zA-Z-]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var secretName1 = {
    parameterPath: "secretName",
    mapper: {
        required: true,
        serializedName: "secret-name",
        type: {
            name: "String"
        }
    }
};
export var secretVersion = {
    parameterPath: "secretVersion",
    mapper: {
        required: true,
        serializedName: "secret-version",
        type: {
            name: "String"
        }
    }
};
export var storageAccountName0 = {
    parameterPath: "storageAccountName",
    mapper: {
        required: true,
        serializedName: "storage-account-name",
        constraints: {
            Pattern: /^[0-9a-zA-Z]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var storageAccountName1 = {
    parameterPath: "storageAccountName",
    mapper: {
        required: true,
        serializedName: "storage-account-name",
        type: {
            name: "String"
        }
    }
};
export var vaultBaseUrl = {
    parameterPath: "vaultBaseUrl",
    mapper: {
        required: true,
        serializedName: "vaultBaseUrl",
        defaultValue: "",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map