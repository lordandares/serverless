// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
import * as tslib_1 from "tslib";
import { BaseRequestPolicy } from "@azure/core-http";
import { Constants } from "@azure/core-http";
import { HttpHeaders } from "@azure/core-http";
export var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes
/**
 * Creates a new ChallengeBasedAuthenticationPolicy factory.
 *
 * @param credential The TokenCredential implementation that can supply the challenge token.
 */
export function challengeBasedAuthenticationPolicy(credential) {
    return {
        create: function (nextPolicy, options) {
            return new ChallengeBasedAuthenticationPolicy(nextPolicy, options, credential);
        }
    };
}
var AuthenticationChallenge = /** @class */ (function () {
    function AuthenticationChallenge(scopes) {
        this.scopes = scopes;
    }
    return AuthenticationChallenge;
}());
export { AuthenticationChallenge };
/**
 *
 * Provides a RequestPolicy that can request a token from a TokenCredential
 * implementation and then apply it to the Authorization header of a request
 * as a Bearer token.
 *
 */
var ChallengeBasedAuthenticationPolicy = /** @class */ (function (_super) {
    tslib_1.__extends(ChallengeBasedAuthenticationPolicy, _super);
    /**
     * Creates a new ChallengeBasedAuthenticationPolicy object.
     *
     * @param nextPolicy The next RequestPolicy in the request pipeline.
     * @param options Options for this RequestPolicy.
     * @param credential The TokenCredential implementation that can supply the bearer token.
     * @param scopes The scopes for which the bearer token applies.
     */
    function ChallengeBasedAuthenticationPolicy(nextPolicy, options, credential, refreshOn) {
        if (refreshOn === void 0) { refreshOn = Date.now(); }
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.credential = credential;
        _this.refreshOn = refreshOn;
        _this.cachedToken = undefined;
        _this.challenge = undefined;
        return _this;
    }
    ChallengeBasedAuthenticationPolicy.prototype.parseWWWAuthenticate = function (www_authenticate) {
        // Parses an authentication message like:
        // ```
        // Bearer authorization="some_authorization", resource="https://some.url"
        // ```
        var authenticateArray = www_authenticate.split(" ");
        // Remove the "Bearer" piece
        delete authenticateArray[0];
        // Split the KV comma-separated list
        var commaSep = authenticateArray.join().split(",");
        for (var _i = 0, commaSep_1 = commaSep; _i < commaSep_1.length; _i++) {
            var item = commaSep_1[_i];
            // Split the key/value pairs
            var kv = item.split("=");
            if (kv[0].trim() == "resource") {
                // Remove the quotations around the string
                var resource = kv[1].trim().replace(/['"]+/g, '');
                return resource;
            }
        }
        return "";
    };
    /**
     * Applies the Bearer token to the request through the Authorization header.
     * @param webResource
     */
    ChallengeBasedAuthenticationPolicy.prototype.sendRequest = function (webResource) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var originalBody, response, www_authenticate, resource, challenge;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!webResource.headers)
                            webResource.headers = new HttpHeaders();
                        originalBody = webResource.body;
                        if (!(this.challenge == undefined)) return [3 /*break*/, 1];
                        // Use a blank to start the challenge
                        webResource.body = "";
                        return [3 /*break*/, 3];
                    case 1: 
                    // or use the cached token if we have one
                    return [4 /*yield*/, this.authenticateRequest(webResource)];
                    case 2:
                        // or use the cached token if we have one
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this._nextPolicy.sendRequest(webResource)];
                    case 4:
                        response = _a.sent();
                        if (!(response.status == 401)) return [3 /*break*/, 7];
                        webResource.body = originalBody;
                        www_authenticate = response.headers.get("WWW-Authenticate");
                        if (!www_authenticate) return [3 /*break*/, 6];
                        resource = this.parseWWWAuthenticate(www_authenticate);
                        challenge = new AuthenticationChallenge(resource + "/.default");
                        if (!(this.challenge != challenge)) return [3 /*break*/, 6];
                        this.challenge = challenge;
                        this.cachedToken = undefined;
                        return [4 /*yield*/, this.authenticateRequest(webResource)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, this._nextPolicy.sendRequest(webResource)];
                    case 7: return [2 /*return*/, response];
                }
            });
        });
    };
    ChallengeBasedAuthenticationPolicy.prototype.authenticateRequest = function (webResource) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var token;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.cachedToken &&
                            (Date.now() < this.refreshOn))) return [3 /*break*/, 1];
                        webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer " + this.cachedToken.token);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.credential.getToken(this.challenge.scopes)];
                    case 2:
                        token = _a.sent();
                        if (token) {
                            this.cachedToken = token;
                            this.refreshOn = token.expiresOnTimestamp - TokenRefreshBufferMs;
                            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer " + token.token);
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ChallengeBasedAuthenticationPolicy;
}(BaseRequestPolicy));
export { ChallengeBasedAuthenticationPolicy };
//# sourceMappingURL=challengeBasedAuthenticationPolicy.js.map