import * as tslib_1 from "tslib";
import { retry } from "./recorderUtils";
var TestClient = /** @class */ (function () {
    function TestClient(client) {
        this.client = client;
    }
    TestClient.prototype.formatName = function (name) {
        return name.replace(/[^0-9a-zA-Z-]/g, "");
    };
    TestClient.prototype.purgeSecret = function (secretName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var e_1;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, that.client.purgeDeletedSecret(secretName)];
                                        case 1:
                                            _a.sent();
                                            return [3 /*break*/, 3];
                                        case 2:
                                            e_1 = _a.sent();
                                            if (["Secret is currently being deleted."].includes(e_1.message))
                                                throw e_1;
                                            else
                                                return [2 /*return*/];
                                            return [3 /*break*/, 3];
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TestClient.prototype.flushSecret = function (secretName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.client.deleteSecret(secretName)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.purgeSecret(secretName)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TestClient;
}());
export default TestClient;
//# sourceMappingURL=testClient.js.map