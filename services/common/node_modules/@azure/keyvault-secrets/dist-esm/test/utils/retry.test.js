import * as tslib_1 from "tslib";
import { assert } from "chai";
import { retry } from "./retry";
describe("retry utility function", function () {
    var _this = this;
    it("throws an exception if we reach the maximum retries", function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var startingDate, endingDate, difference;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    startingDate = new Date();
                    return [4 /*yield*/, retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                throw new Error("I always fail");
                            });
                        }); }, 100, 200)];
                case 1:
                    _a.sent();
                    endingDate = new Date();
                    difference = endingDate.getTime() - startingDate.getTime();
                    assert.ok(difference >= 200); // In CI this takes a lot longer than locally
                    return [2 /*return*/];
            }
        });
    }); });
    it("returns the value if resolved on time", function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var result;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                        return [2 /*return*/, true];
                    }); }); })];
                case 1:
                    result = _a.sent();
                    assert.strictEqual(result, true);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=retry.test.js.map