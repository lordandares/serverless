// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import qs from "qs";
import { ServiceClient, WebResource } from "@azure/core-http";
import { AuthenticationError } from "./errors";
const DefaultAuthorityHost = "https://login.microsoftonline.com";
export class IdentityClient extends ServiceClient {
    constructor(options) {
        options = options || IdentityClient.getDefaultOptions();
        super(undefined, options);
        this.baseUri = this.authorityHost = options.authorityHost || DefaultAuthorityHost;
        if (!this.baseUri.startsWith("https:")) {
            throw new Error("The authorityHost address must use the 'https' protocol.");
        }
    }
    createWebResource(requestOptions) {
        const webResource = new WebResource();
        webResource.prepare(requestOptions);
        return webResource;
    }
    sendTokenRequest(webResource, expiresOnParser) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendRequest(webResource);
            expiresOnParser =
                expiresOnParser ||
                    ((responseBody) => {
                        return Date.now() + responseBody.expires_in * 1000;
                    });
            if (response.status === 200 || response.status === 201) {
                return {
                    accessToken: {
                        token: response.parsedBody.access_token,
                        expiresOnTimestamp: expiresOnParser(response.parsedBody)
                    },
                    refreshToken: response.parsedBody.refresh_token
                };
            }
            else {
                throw new AuthenticationError(response.status, response.parsedBody || response.bodyAsText);
            }
        });
    }
    refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, expiresOnParser, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (refreshToken === undefined) {
                return null;
            }
            const refreshParams = {
                grant_type: "refresh_token",
                client_id: clientId,
                refresh_token: refreshToken,
                scope: scopes
            };
            if (clientSecret !== undefined) {
                refreshParams.client_secret = clientSecret;
            }
            const webResource = this.createWebResource({
                url: `${this.authorityHost}/${tenantId}/oauth2/v2.0/token`,
                method: "POST",
                disableJsonStringifyOnBody: true,
                deserializationMapper: undefined,
                body: qs.stringify(refreshParams),
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                abortSignal: options && options.abortSignal
            });
            try {
                return yield this.sendTokenRequest(webResource, expiresOnParser);
            }
            catch (err) {
                if (err instanceof AuthenticationError &&
                    err.errorResponse.error === "interaction_required") {
                    // It's likely that the refresh token has expired, so
                    // return null so that the credential implementation will
                    // initiate the authentication flow again.
                    return null;
                }
                else {
                    throw err;
                }
            }
        });
    }
    static getDefaultOptions() {
        return {
            authorityHost: DefaultAuthorityHost
        };
    }
}
//# sourceMappingURL=identityClient.js.map