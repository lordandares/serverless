// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import { AggregateAuthenticationError } from "../client/errors";
/**
 * Enables multiple {@link TokenCredential} implementations to be tried in order
 * until one of the getToken methods returns an {@link AccessToken}.
 */
export class ChainedTokenCredential {
    constructor(...sources) {
        this._sources = [];
        this._sources = sources;
    }
    /**
     * Returns the first {@link AccessToken} returned by one of the chained
     * {@link TokenCredential} implementations.  Throws an {@link AggregateAuthenticationError}
     * when one or more credentials throws an {@link AuthenticationError} and
     * no credentials have returned an {@link AccessToken}.
     *
     * @param scopes The list of scopes for which the token will have access.
     * @param options The options used to configure any requests this
     *                TokenCredential implementation might make.
     */
    getToken(scopes, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let token = null;
            const errors = [];
            for (let i = 0; i < this._sources.length && token === null; i++) {
                try {
                    token = yield this._sources[i].getToken(scopes, options);
                }
                catch (err) {
                    errors.push(err);
                }
            }
            if (!token && errors.length > 0) {
                throw new AggregateAuthenticationError(errors);
            }
            return token;
        });
    }
}
//# sourceMappingURL=chainedTokenCredential.js.map