import { AccessToken, GetTokenOptions, TokenCredential } from "@azure/core-http";
import { IdentityClientOptions } from "../client/identityClient";
export declare const ImdsEndpoint = "http://169.254.169.254/metadata/identity/oauth2/token";
export declare const ImdsApiVersion = "2018-02-01";
export declare const AppServiceMsiApiVersion = "2017-09-01";
/**
 * Attempts authentication using a managed identity that has been assigned
 * to the deployment environment.  This authentication type works in Azure VMs,
 * App Service and Azure Functions applications, and inside of Azure Cloud Shell.
 *
 * More information about configuring managed identities can be found here:
 *
 * https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview
 */
export declare class ManagedIdentityCredential implements TokenCredential {
    private identityClient;
    private clientId;
    private isEndpointUnavailable;
    constructor(clientId?: string, options?: IdentityClientOptions);
    private mapScopesToResource;
    private createImdsAuthRequest;
    private createAppServiceMsiAuthRequest;
    private createCloudShellMsiAuthRequest;
    private pingImdsEndpoint;
    private authenticateManagedIdentity;
    /**
     * Authenticates with Azure Active Directory and returns an {@link AccessToken} if
     * successful.  If authentication cannot be performed at this time, this method may
     * return null.  If an error occurs during authentication, an {@link AuthenticationError}
     * containing failure details will be thrown.
     *
     * @param scopes The list of scopes for which the token will have access.
     * @param options The options used to configure any requests this
     *                TokenCredential implementation might make.
     */
    getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;
}
//# sourceMappingURL=managedIdentityCredential.d.ts.map