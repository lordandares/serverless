import { HttpClient } from '@azure/core-http';
import { HttpPipelineLogger } from '@azure/core-http';
import * as msRest from '@azure/core-http';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PageSettings } from '@azure/core-paging';
import { RequestOptionsBase } from '@azure/core-http';
import { ServiceClientOptions } from '@azure/core-http';
import { SupportedPlugins } from '@azure/core-http';
import { TokenCredential } from '@azure/core-http';
import { TracerProxy } from '@azure/core-http';

/**
 * @interface
 * An interface representing a deleted secret.
 */
export declare interface DeletedSecret extends Secret {
    /**
     * @member {string} [recoveryId] The url of the recovery object, used to
     * identify and recover the deleted secret.
     */
    recoveryId?: string;
    /**
     * @member {Date} [scheduledPurgeDate] The time when the secret is scheduled
     * to be purged, in UTC
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly scheduledPurgeDate?: Date;
    /**
     * @member {Date} [deletedDate] The time when the secret was deleted, in UTC
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly deletedDate?: Date;
}

/**
 * Defines values for DeletionRecoveryLevel.
 * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
 * 'Recoverable+ProtectedSubscription'
 * @readonly
 * @enum {string}
 */
export declare type DeletionRecoveryLevel = "Purgeable" | "Recoverable+Purgeable" | "Recoverable" | "Recoverable+ProtectedSubscription";

/**
 * @interface
 * An interface representing the optional parameters that can be passed to getSecret.
 */
export declare interface GetSecretOptions {
    /**
     * @member {string} [version] The version of the secret to retrieve.  If not
     * specified the latest version of the secret will be retrieved.
     */
    version?: string;
    /**
     * @member {msRest.RequestOptionsBase} [requestOptions] Options for this request
     */
    requestOptions?: msRest.RequestOptionsBase;
}

/**
 * @interface
 * An interface representing optional parameters for SecretClient paged operations.
 */
export declare interface GetSecretsOptions {
    /**
     * @member {msRest.RequestOptionsBase} [requestOptions] Options for this request
     */
    requestOptions?: msRest.RequestOptionsBase;
}

/**
 * Option interface for Pipeline.newPipeline method.
 *
 * Properties of this interface should not overlap with properties of {@link Pipeline}
 * as we use them to differentiate instances of NewPipelineOptions from instances of Pipeline.
 * If this interface is modified, the method isNewPipelineOptions() should also be updated
 * to adapt the changes.
 *
 * @export
 * @interface NewPipelineOptions
 */
export declare interface NewPipelineOptions {
    /**
     * Telemetry configures the built-in telemetry policy behavior.
     *
     * @type {TelemetryOptions}
     * @memberof NewPipelineOptions
     */
    telemetry?: TelemetryOptions;
    retryOptions?: RetryOptions;
    proxyOptions?: ProxyOptions;
    logger?: HttpPipelineLogger;
    HTTPClient?: HttpClient;
}
export { PagedAsyncIterableIterator }
export { PageSettings }

export declare interface ParsedKeyVaultEntityIdentifier {
    /**
     * @member {string} [vaultUrl] The vault URI.
     */
    vaultUrl: string;
    /**
     * @member {string} [version] The version of key/secret/certificate. May be undefined.
     */
    version?: string;
    /**
     * @member {string} [name] The name of key/secret/certificate.
     */
    name: string;
}

/**
 * Interface of proxy policy options.
 *
 * @export
 * @interface ProxyOptions
 */
export declare interface ProxyOptions {
    proxySettings?: string;
}

/**
 * Retry options interface.
 *
 * @export
 * @interface RetryOptions
 */
export declare interface RetryOptions {
    /**
     * Optional. Max try number of attempts, default is 3.
     * A value of 1 means 1 try and no retries.
     * A value smaller than 1 means default retry number of attempts.
     *
     * @type {number}
     * @memberof RetryOptions
     */
    readonly retryCount?: number;
    /**
     * Optional. Specifies the amount of delay to use before retrying an operation (default is 30s or 30 * 1000ms).
     * The delay increases exponentially with each retry up to a maximum specified by maxRetryDelayInMs.
     *
     * @type {number}
     * @memberof RetryOptions
     */
    readonly retryIntervalInMS?: number;
    /**
     * Optional. Specifies the maximum delay allowed before retrying an operation (default is 90s or 90 * 1000ms).
     *
     * @type {number}
     * @memberof RetryOptions
     */
    readonly maxRetryDelayInMs?: number;
}

/**
 * @interface
 * An interface representing the complete secret.
 */
export declare interface Secret extends SecretAttributes {
    /**
     * @member {string} [value] The secret value.
     */
    value?: string;
}

/**
 * @interface
 * An interface representing the a secret's attributes.
 */
export declare interface SecretAttributes extends ParsedKeyVaultEntityIdentifier {
    /**
     * @member {string} [id] The secret id.
     */
    id?: string;
    /**
     * @member {string} [contentType] The content type of the secret.
     */
    contentType?: string;
    /**
     * @member {boolean} [enabled] Determines whether the object is enabled.
     */
    enabled?: boolean;
    /**
     * @member {Date} [notBefore] Not before date in UTC.
     */
    notBefore?: Date;
    /**
     * @member {Date} [expires] Expiry date in UTC.
     */
    expires?: Date;
    /**
     * @member {{ [propertyName: string]: string }} [tags] Application specific
     * metadata in the form of key-value pairs.
     */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * @member {string} [keyId] If this is a secret backing a KV certificate, then
     * this field specifies the corresponding key backing the KV certificate.
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly keyId?: string;
    /**
     * @member {boolean} [managed] True if the secret's lifetime is managed by
     * key vault. If this is a secret backing a certificate, then managed will be
     * true.
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly managed?: boolean;
    /**
     * @member {Date} [created] Creation time in UTC.
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly created?: Date;
    /**
     * @member {Date} [updated] Last updated time in UTC.
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly updated?: Date;
    /**
     * @member {DeletionRecoveryLevel} [recoveryLevel] Reflects the deletion
     * recovery level currently in effect for keys in the current vault. If it
     * contains 'Purgeable' the key can be permanently deleted by a privileged
     * user; otherwise, only the system can purge the key, at the end of the
     * retention interval. Possible values include: 'Purgeable',
     * 'Recoverable+Purgeable', 'Recoverable',
     * 'Recoverable+ProtectedSubscription'
     * **NOTE: This property will not be serialized. It can only be populated by
     * the server.**
     */
    readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * The client to interact with the KeyVault secrets functionality
 */
export declare class SecretsClient {
    /**
     * A static method used to create a new Pipeline object with the provided Credential.
     * @static
     * @param {TokenCredential} The credential to use for API requests.
     * @param {NewPipelineOptions} [pipelineOptions] Optional. Options.
     * @returns {Pipeline} A new Pipeline object.
     * @memberof SecretsClient
     */
    static getDefaultPipeline(credential: TokenCredential, pipelineOptions?: NewPipelineOptions): ServiceClientOptions;
    /**
     * The base URL to the vault
     */
    readonly vaultBaseUrl: string;
    /**
     * The options to create the connection to the service
     */
    readonly pipeline: ServiceClientOptions;
    /**
     * The authentication credentials
     */
    protected readonly credential: TokenCredential;
    private readonly client;
    /**
     * Creates an instance of SecretsClient.
     *
     * Example usage:
     * ```ts
     * import { SecretsClient } from "@azure/keyvault-secrets";
     * import { DefaultAzureCredential } from "@azure/identity";
     *
     * let url = `https://<MY KEYVAULT HERE>.vault.azure.net`;
     * let credentials = new DefaultAzureCredential();
     *
     * let client = new SecretsClient(url, credentials);
     * ```
     * @param {string} url the base url to the key vault.
     * @param {TokenCredential} The credential to use for API requests.
     * @param {(Pipeline | NewPipelineOptions)} [pipelineOrOptions={}] Optional. A Pipeline, or options to create a default Pipeline instance.
     *                                                                 Omitting this parameter to create the default Pipeline instance.
     * @memberof SecretsClient
     */
    constructor(url: string, credential: TokenCredential, pipelineOrOptions?: ServiceClientOptions | NewPipelineOptions);
    private static getUserAgentString;
    /**
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists,
     * Azure Key Vault creates a new version of that secret. This operation requires the secrets/set
     * permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * await client.setSecret("MySecretName", "ABC123");
     * ```
     * @summary Adds a secret in a specified key vault.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param [options] The optional parameters
     * @returns Promise<Secret>
     */
    setSecret(secretName: string, value: string, options?: SetSecretOptions): Promise<Secret>;
    /**
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied
     * to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * await client.deleteSecret("MySecretName");
     * ```
     * @summary Deletes a secret from a specified key vault.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param [options] The optional parameters
     * @returns Promise<DeletedSecret>
     */
    deleteSecret(secretName: string, options?: RequestOptionsBase): Promise<DeletedSecret>;
    /**
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that
     * are not specified in the request are left unchanged. The value of a secret itself cannot be
     * changed. This operation requires the secrets/set permission.
     *
     * Example usage:
     * ```ts
     * let secretName = "MySecretName";
     * let client = new SecretsClient(url, credentials);
     * let secret = await client.getSecret(secretName);
     * await client.updateSecret(secretName, secret.version, { enabled: false });
     * ```
     * @summary Updates the attributes associated with a specified secret in a given key vault.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param [options] The optional parameters
     * @returns Promise<Secret>
     */
    updateSecretAttributes(secretName: string, secretVersion: string, options?: UpdateSecretOptions): Promise<Secret>;
    /**
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires
     * the secrets/get permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * let secret = await client.getSecret("MySecretName");
     * ```
     * @summary Get a specified secret from a given key vault.
     * @param secretName The name of the secret.
     * @param [options] The optional parameters
     * @returns Promise<Secret>
     */
    getSecret(secretName: string, options?: GetSecretOptions): Promise<Secret>;
    /**
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.
     * This operation requires the secrets/get permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * await client.getDeletedSecret("MyDeletedSecret");
     * ```
     * @summary Gets the specified deleted secret.
     * @param secretName The name of the secret.
     * @param [options] The optional parameters
     * @returns Promise<DeletedSecret>
     */
    getDeletedSecret(secretName: string, options?: RequestOptionsBase): Promise<DeletedSecret>;
    /**
     * The purge deleted secret operation removes the secret permanently, without the possibility of
     * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation
     * requires the secrets/purge permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * await client.deleteSecret("MySecretName");
     * await client.purgeDeletedSecret("MySecretName");
     * ```
     * @summary Permanently deletes the specified secret.
     * @param secretName The name of the secret.
     * @param [options] The optional parameters
     * @returns Promise<void>
     */
    purgeDeletedSecret(secretName: string, options?: RequestOptionsBase): Promise<void>;
    /**
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a
     * soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * await client.deleteSecret("MySecretName");
     * await client.recoverDeletedSecret("MySecretName");
     * ```
     * @summary Recovers the deleted secret to the latest version.
     * @param secretName The name of the deleted secret.
     * @param [options] The optional parameters
     * @returns Promise<Secret>
     */
    recoverDeletedSecret(secretName: string, options?: RequestOptionsBase): Promise<Secret>;
    /**
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the
     * secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * let backupResult = await client.backupSecret("MySecretName");
     * ```
     * @summary Backs up the specified secret.
     * @param secretName The name of the secret.
     * @param [options] The optional parameters
     * @returns Promise<Uint8Array | undefined>
     */
    backupSecret(secretName: string, options?: RequestOptionsBase): Promise<Uint8Array>;
    /**
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the
     * secrets/restore permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * let mySecretBundle = await client.backupSecret("MySecretName");
     * // ...
     * await client.restoreSecret(mySecretBundle);
     * ```
     * @summary Restores a backed up secret to a vault.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @param [options] The optional parameters
     * @returns Promise<Secret>
     */
    restoreSecret(secretBundleBackup: Uint8Array, options?: RequestOptionsBase): Promise<Secret>;
    private listSecretVersionsPage;
    private listSecretVersionsAll;
    /**
     * Iterates all versions of the given secret in the vault. The full secret identifier and attributes are provided
     * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * for await (const secretAttr of client.listSecretVersions("MySecretName")) {
     *   const secret = await client.getSecret(secretAttr.name);
     *   console.log("secret version: ", secret);
     * }
     * ```
     * @param secretName Name of the secret to fetch versions for
     * @param [options] The optional parameters
     * @returns PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>
     */
    listSecretVersions(secretName: string, options?: GetSecretsOptions): PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>;
    private listSecretsPage;
    private listSecretsAll;
    /**
     * Iterates the latest version of all secrets in the vault.  The full secret identifier and attributes are provided
     * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * for await (const secretAttr of client.listSecrets()) {
     *   const secret = await client.getSecret(secretAttr.name);
     *   console.log("secret: ", secret);
     * }
     * ```
     * @summary List all secrets in the vault
     * @param [options] The optional parameters
     * @returns PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>
     */
    listSecrets(options?: GetSecretsOptions): PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>;
    private listDeletedSecretsPage;
    private listDeletedSecretsAll;
    /**
     * Iterates the deleted secrets in the vault.  The full secret identifier and attributes are provided
     * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * Example usage:
     * ```ts
     * let client = new SecretsClient(url, credentials);
     * for await (const secretAttr of client.listDeletedSecrets()) {
     *   const deletedSecret = await client.getSecret(secretAttr.name);
     *   console.log("deleted secret: ", deletedSecret);
     * }
     * ```
     * @summary List all secrets in the vault
     * @param [options] The optional parameters
     * @returns PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>
     */
    listDeletedSecrets(options?: GetSecretsOptions): PagedAsyncIterableIterator<SecretAttributes, SecretAttributes[]>;
    private getSecretFromSecretBundle;
    private getDeletedSecretFromDeletedSecretBundle;
    /**
     * Creates a span using the tracer that was set by the user
     * @param methodName The name of the method for which the span is being created.
     * @param requestOptions The options for the underlying http request. This will be
     * updated to use the newly created span as the "parent" so that any new spans created
     * after this point gets the right parent.
     */
    private createSpan;
}

/**
 * @interface
 * An interface representing the optional parameters that can be passed to setSecret.
 */
export declare interface SetSecretOptions {
    /**
     * @member {{ [propertyName: string]: string }} [tags] Application specific
     * metadata in the form of key-value pairs.
     */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * @member {string} [contentType] Type of the secret value such as a
     * password.
     */
    contentType?: string;
    /**
     * @member {boolean} [enabled] Determines whether the object is enabled.
     */
    enabled?: boolean;
    /**
     * @member {Date} [notBefore] Not before date in UTC.
     */
    notBefore?: Date;
    /**
     * @member {Date} [expires] Expiry date in UTC.
     */
    expires?: Date;
    /**
     * @member {msRest.RequestOptionsBase} [requestOptions] Options for this request
     */
    requestOptions?: msRest.RequestOptionsBase;
}
export { SupportedPlugins }

export declare interface TelemetryOptions {
    value: string;
}
export { TracerProxy }

/**
 * @interface
 * An interface representing the optional parameters that can be passed to updateSecret.
 */
export declare interface UpdateSecretOptions {
    /**
     * @member {string} [contentType] Type of the secret value such as a
     * password.
     */
    contentType?: string;
    /**
     * @member {boolean} [enabled] Determines whether the object is enabled.
     */
    enabled?: boolean;
    /**
     * @member {Date} [notBefore] Not before date in UTC.
     */
    notBefore?: Date;
    /**
     * @member {Date} [expires] Expiry date in UTC.
     */
    expires?: Date;
    /**
     * @member {{ [propertyName: string]: string }} [tags] Application specific
     * metadata in the form of key-value pairs.
     */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * @member {msRest.RequestOptionsBase} [requestOptions] Options for this request
     */
    requestOptions?: msRest.RequestOptionsBase;
}

export { }
