{"version":3,"file":"index.js","sources":["../lib/tracers/noop/noOpSpan.ts","../lib/tracers/noop/noOpBinaryFormat.ts","../lib/tracers/noop/noOpHttpTextFormat.ts","../lib/tracers/noop/noOpTracer.ts","../lib/utils/global.ts","../lib/utils/cache.ts","../lib/tracerProxy.ts","../lib/tracers/opencensus/openCensusTraceStateWrapper.ts","../lib/tracers/opencensus/openCensusSpanWrapper.ts","../lib/tracers/opencensus/openCensusTracerWrapper.ts","../lib/interfaces/status.ts","../lib/tracers/test/testSpan.ts","../lib/interfaces/span_kind.ts","../lib/tracers/test/testTracer.ts","../lib/interfaces/trace_flags.ts","../lib/utils/traceParentHeader.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nexport class NoOpSpan implements Span {\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\"\n    };\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    /* Noop */\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param _key the attribute key\n   * @param _value the attribute value\n   */\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param _attributes the attributes to add\n   */\n  setAttributes(_attributes: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param _name The name of the event\n   * @param _attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds a link to the Span.\n   * @param _spanContext the context of the linked span\n   * @param _attributes attributes to be added that are associated with the link\n   */\n  addLink(_spanContext: SpanContext, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param _status The status to set.\n   */\n  setStatus(_status: Status): this {\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param _name the new Span name\n   */\n  updateName(_name: string): this {\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecordingEvents(): boolean {\n    return false;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BinaryFormat } from \"../../interfaces/BinaryFormat\";\nimport { SpanContext } from \"../../interfaces/span_context\";\n\n/**\n * A no-op implementation of BinaryFormat to be used when tracing is disabled.\n */\nexport class NoOpBinaryFormat implements BinaryFormat {\n  /** Serialize the given SpanContext to a buffer */\n  toBytes(_spanContext: SpanContext): ArrayBuffer {\n    return new ArrayBuffer(0);\n  }\n\n  /** \n   * Deserialize a SpanContext from binary encoding. \n   * Returns null if the buffer does not contain a valid SpanContext.\n   */\n  fromBytes(_buffer: ArrayBuffer): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpTextFormat } from \"../../interfaces/HttpTextFormat\";\nimport { SpanContext } from \"../../interfaces/span_context\";\n\n/**\n * A no-op implementation of HttpTextFormat to be used when tracing is disabled.\n */\nexport class NoOpHttpTextFormat implements HttpTextFormat {\n  /**\n   * Injects the given SpanContext for transmitting to a remote server.\n   * @param _spanContext The SpanContext to transmit\n   * @param _format The format of the carrier\n   * @param _carrier The carrier to propagate through, e.g. an HTTP request\n   */\n  inject(_spanContext: SpanContext, _format: string, _carrier: unknown): void { }\n  /**\n   * Returns a SpanContext intance extracted from the carrier.\n   * @param _format the format of the carrier\n   * @param _carrier The carrier being used for propagation, e.g. an HTTP request\n   */\n  extract(_format: string, _carrier: unknown): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tracer } from \"../../interfaces/tracer\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { NoOpSpan } from \"./noOpSpan\";\nimport { BinaryFormat } from \"../../interfaces/BinaryFormat\";\nimport { HttpTextFormat } from \"../../interfaces/HttpTextFormat\";\nimport { NoOpBinaryFormat } from \"./noOpBinaryFormat\";\nimport { NoOpHttpTextFormat } from \"./noOpHttpTextFormat\";\n\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nexport class NoOpTracer implements Tracer {\n\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  startSpan(_name: string, _options?: SpanOptions): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => ReturnType<T>>(\n    _span: Span,\n    fn: T\n  ): ReturnType<T> {\n    return fn();\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, _span?: Span): T {\n    return target;\n  }\n\n  /**\n   * Send a pre-populated Span object to the exporter.\n   * @param _span The span to pass along.\n   */\n  recordSpanData(_span: Span): void {\n    /* NOOP */\n  }\n\n  /**\n   * Returns the BinaryFormat interface for serializing/deserializing Spans.\n   */\n  getBinaryFormat(): BinaryFormat {\n    return new NoOpBinaryFormat();\n  }\n\n  /**\n   * Returns the HttpTextFormat interface for injecting/extracting Spans.\n   */\n  getHttpTextFormat(): HttpTextFormat {\n    return new NoOpHttpTextFormat();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport function getGlobalObject(): any {\n  return global;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tracer } from \"../interfaces/tracer\";\nimport { getGlobalObject } from \"./global\";\n\nconst GLOBAL_TRACER_VERSION = 1;\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache\");\n\nexport interface TracerCache {\n  version: number;\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n  const existingCache: TracerCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  if (existingCache) {\n    if (existingCache.version !== GLOBAL_TRACER_VERSION) {\n      throw new Error(\n        `Two incompatible versions of @azure/core-tracing have been loaded.\n         This library is ${GLOBAL_TRACER_VERSION}, existing is ${existingCache.version}.`\n      );\n    }\n    cache = existingCache;\n  } else {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { Tracer } from \"./interfaces/tracer\";\nimport { getCache } from \"./utils/cache\";\n\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer: Tracer) {\n  const cache = getCache();\n  cache.tracer = tracer;\n}\n\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer() {\n  const cache = getCache();\n  if (!cache.tracer) {\n    cache.tracer = new NoOpTracer();\n  }\n  return cache.tracer;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TraceState } from \"../../interfaces/trace_state\";\n\n/**\n * @ignore\n * @internal\n */\nexport class OpenCensusTraceStateWrapper implements TraceState {\n  private readonly _state?: string;\n\n  constructor(state?: string) {\n    this._state = state;\n  }\n\n  get(key: string): string | undefined {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  set(key: string, value: string): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  unset(key: string): void {\n    throw new Error(\"Method not implemented\");\n  }\n\n  serialize(): string {\n    return this._state || \"\";\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { OpenCensusTracerWrapper } from \"./openCensusTracerWrapper\";\nimport { Attributes as OpenCensusAttributes, Span as OpenCensusSpan } from \"@opencensus/web-types\";\n\nfunction isWrappedSpan(span?: Span | SpanContext): span is OpenCensusSpanWrapper {\n  return !!span && (span as OpenCensusSpanWrapper).getWrappedSpan !== undefined;\n}\n\nfunction isTracer(\n  tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan\n): tracerOrSpan is OpenCensusTracerWrapper {\n  return (tracerOrSpan as OpenCensusTracerWrapper).getWrappedTracer !== undefined;\n}\n\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nexport class OpenCensusSpanWrapper implements Span {\n  private _span: OpenCensusSpan;\n\n  /**\n   * The underlying OpenCensus Span\n   */\n  public getWrappedSpan() {\n    return this._span;\n  }\n\n  /**\n   * Wraps an existing OpenCensus Span\n   * @param span A Span or RootSpan from OpenCensus\n   */\n  constructor(span: OpenCensusSpan);\n  /**\n   * Create a new OpenCensus Span and wrap it.\n   * @param tracer The OpenCensus tracer that has been wrapped in OpenCensusTracerWrapper\n   * @param name The name of the Span\n   * @param options Options for the Span\n   */\n  constructor(tracer: OpenCensusTracerWrapper, name: string, options?: SpanOptions);\n  constructor(\n    tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan,\n    name: string = \"\",\n    options: SpanOptions = {}\n  ) {\n    if (isTracer(tracerOrSpan)) {\n      const parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name,\n        childOf: parent\n      });\n      this._span.start();\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this._span.end();\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value as any);\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  setAttributes(attributes: Attributes): this {\n    this._span.attributes = attributes as OpenCensusAttributes;\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param name The name of the event\n   * @param attributes The associated attributes to add for this event\n   */\n  addEvent(name: string, attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Adds a link to the Span.\n   * @param spanContext the context of the linked span\n   * @param attributes attributes to be added that are associated with the link\n   */\n  addLink(spanContext: SpanContext, attributes?: Attributes): this {\n    // Since there is no way to specify the link relationship,\n    // it is set as Unspecified.\n    this._span.addLink(\n      spanContext.traceId,\n      spanContext.spanId,\n      0 /* LinkType.UNSPECIFIED */,\n      attributes as OpenCensusAttributes\n    );\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  setStatus(status: Status): this {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param name the new Span name\n   */\n  updateName(name: string): this {\n    this._span.name = name;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecordingEvents(): boolean {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tracer } from \"../../interfaces/tracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Span } from \"../../interfaces/span\";\nimport { OpenCensusSpanWrapper } from \"./openCensusSpanWrapper\";\nimport { BinaryFormat } from \"../../interfaces/BinaryFormat\";\nimport { HttpTextFormat } from \"../../interfaces/HttpTextFormat\";\nimport { TracerBase as OpenCensusTracer } from \"@opencensus/web-types\";\n\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\nexport class OpenCensusTracerWrapper implements Tracer {\n  private _tracer: OpenCensusTracer;\n\n  /**\n   * The wrapped OpenCensus Tracer\n   */\n  public getWrappedTracer() {\n    return this._tracer;\n  }\n\n  /**\n   * Create a new wrapper around a given OpenCensus Tracer.\n   * @param tracer The OpenCensus Tracer to wrap.\n   */\n  public constructor(tracer: OpenCensusTracer) {\n    this._tracer = tracer;\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options?: SpanOptions): Span {\n    return new OpenCensusSpanWrapper(this, name, options);\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span | null {\n    return null;\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => unknown>(span: Span, fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, span?: Span): T {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Send a pre-populated Span object to the exporter.\n   * @param span The span to pass along.\n   */\n  recordSpanData(span: Span): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Returns the BinaryFormat interface for serializing/deserializing Spans.\n   */\n  getBinaryFormat(): BinaryFormat {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Returns the HttpTextFormat interface for injecting/extracting Spans.\n   */\n  getHttpTextFormat(): HttpTextFormat {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of canonical status codes.\n *\n * TODO (revision): https://github.com/open-telemetry/opentelemetry-specification/issues/59\n */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { NoOpSpan } from \"../noop/noOpSpan\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { Status, CanonicalCode } from \"../../interfaces/status\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { TestTracer } from \"./testTracer\";\nimport { SpanKind } from \"../../interfaces/span_kind\";\nimport { TimeInput } from \"../../interfaces/Time\";\nimport { Tracer } from \"../../interfaces/tracer\";\n\n/**\n * A mock span useful for testing.\n */\nexport class TestSpan extends NoOpSpan {\n\n  /**\n   * The Span's current name\n   */\n  name: string;\n\n  /**\n   * The Span's current status\n   */\n  status: Status;\n\n  /**\n   * The Span's kind\n   */\n  kind: SpanKind;\n\n  /**\n   * True if end() has been called on the Span\n   */\n  endCalled: boolean;\n\n  /**\n   * The start time of the Span\n   */\n  readonly startTime: TimeInput;\n\n  /**\n   * The id of the parent Span, if any.\n   */\n  readonly parentSpanId?: string;\n\n  private _context: SpanContext;\n  private readonly _tracer: Tracer;\n\n  /**\n   * Starts a new Span.\n   * @param parentTracer The tracer that created this Span\n   * @param name The name of the span.\n   * @param context The SpanContext this span belongs to\n   * @param kind The SpanKind of this Span\n   * @param parentSpanId The identifier of the parent Span\n   * @param startTime The startTime of the event (defaults to now)\n   */\n  constructor(\n    parentTracer: TestTracer,\n    name: string,\n    context: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    startTime: TimeInput = Date.now()) {\n    super();\n    this._tracer = parentTracer;\n    this.name = name;\n    this.kind = kind;\n    this.startTime = startTime;\n    this.parentSpanId = parentSpanId;\n    this.status = {\n      code: CanonicalCode.OK\n    };\n    this.endCalled = false;\n    this._context = context;\n  }\n\n  /**\n   * Returns the Tracer that created this Span\n   */\n  tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return this._context;\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this.endCalled = true;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  setStatus(status: Status): this {\n    this.status = status;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecordingEvents(): boolean {\n    return true;\n  }\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { NoOpTracer } from \"../noop/noOpTracer\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { TestSpan } from \"./testSpan\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { SpanKind } from \"../../interfaces/span_kind\";\n\n/**\n * Simple representation of a Span that only has name and child relationships.\n * Children should be arranged in the order they were created.\n */\nexport interface SpanGraphNode {\n  /**\n   * The Span name\n   */\n  name: string;\n  /**\n   * All child Spans of this Span\n   */\n  children: SpanGraphNode[];\n}\n\n/**\n * Contains all the spans for a particular TraceID\n * starting at unparented roots\n */\nexport interface SpanGraph {\n  /**\n   * All Spans without a parentSpanId\n   */\n  roots: SpanGraphNode[];\n}\n\n/**\n * A mock tracer useful for testing\n */\nexport class TestTracer extends NoOpTracer {\n\n  private traceIdCounter = 0;\n  private getNextTraceId(): string {\n    this.traceIdCounter++;\n    return String(this.traceIdCounter);\n  }\n\n  private spanIdCounter = 0;\n  private getNextSpanId(): string {\n    this.spanIdCounter++;\n    return String(this.spanIdCounter);\n  }\n\n  private rootSpans: TestSpan[] = [];\n  private knownSpans: TestSpan[] = [];\n\n  /**\n   * Returns all Spans that were created without a parent\n   */\n  getRootSpans(): TestSpan[] {\n    return this.rootSpans;\n  }\n\n  /**\n   * Returns all Spans this Tracer knows about\n   */\n  getKnownSpans(): TestSpan[] {\n    return this.knownSpans;\n  }\n\n  /**\n   * Returns all Spans where end() has not been called\n   */\n  getActiveSpans(): TestSpan[] {\n    return this.knownSpans.filter(span => {\n      return !span.endCalled;\n    });\n  }\n\n  /**\n   * Return all Spans for a particular trace, grouped by their\n   * parent Span in a tree-like structure\n   * @param traceId The traceId to return the graph for\n   */\n  getSpanGraph(traceId: string): SpanGraph {\n    const traceSpans = this.knownSpans.filter(span => {\n      return span.context().traceId === traceId;\n    });\n\n    const roots: SpanGraphNode[] = [];\n    const nodeMap: Map<string, SpanGraphNode> = new Map<string, SpanGraphNode>();\n\n    for (const span of traceSpans) {\n      const spanId = span.context().spanId;\n      const node: SpanGraphNode = {\n        name: span.name,\n        children: []\n      };\n      nodeMap.set(spanId, node);\n      if (span.parentSpanId) {\n        const parent = nodeMap.get(span.parentSpanId);\n        if (!parent) {\n          throw new Error(`Span with name ${node.name} has an unknown parentSpan with id ${span.parentSpanId}`);\n        }\n        parent.children.push(node);\n      } else {\n        roots.push(node);\n      }\n    }\n\n    return {\n      roots\n    };\n\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options: SpanOptions = {}): TestSpan {\n\n    const parentContext = this._getParentContext(options);\n\n    let traceId: string;\n    let isRootSpan = false;\n\n    if (parentContext && parentContext.traceId) {\n      traceId = parentContext.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n      isRootSpan = true;\n    }\n\n    const context: SpanContext = {\n      traceId,\n      spanId: this.getNextSpanId()\n    }\n    const span = new TestSpan(\n      this,\n      name,\n      context,\n      options.kind || SpanKind.INTERNAL,\n      parentContext ? parentContext.spanId : undefined,\n      options.startTime);\n    this.knownSpans.push(span);\n    if (isRootSpan) {\n      this.rootSpans.push(span);\n    }\n    return span;\n  }\n\n  private _getParentContext(options: SpanOptions): SpanContext | undefined {\n    const parent = options.parent;\n    if (parent) {\n      if ('traceId' in parent) {\n        return parent;\n      } else {\n        return parent.context();\n      }\n    }\n\n  }\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enumeration that represents global trace flags. These flags are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nexport enum TraceFlags {\n  /** Bit to represent whether trace is unsampled in trace flags. */\n  UNSAMPLED = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SpanContext } from \"../interfaces/span_context\";\nimport { TraceFlags } from \"../interfaces/trace_flags\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.UNSAMPLED;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n"],"names":["CanonicalCode","tslib_1.__extends","SpanKind","TraceFlags"],"mappings":"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"}