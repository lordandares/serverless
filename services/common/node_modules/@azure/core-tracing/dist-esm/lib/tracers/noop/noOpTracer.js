import { NoOpSpan } from "./noOpSpan";
import { NoOpBinaryFormat } from "./noOpBinaryFormat";
import { NoOpHttpTextFormat } from "./noOpHttpTextFormat";
/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
var NoOpTracer = /** @class */ (function () {
    function NoOpTracer() {
    }
    /**
     * Starts a new Span.
     * @param _name The name of the span.
     * @param _options The SpanOptions used during Span creation.
     */
    NoOpTracer.prototype.startSpan = function (_name, _options) {
        return new NoOpSpan();
    };
    /**
     * Returns the current Span from the current context, if available.
     */
    NoOpTracer.prototype.getCurrentSpan = function () {
        return new NoOpSpan();
    };
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span The span that provides the context.
     * @param fn The function to be executed.
     */
    NoOpTracer.prototype.withSpan = function (_span, fn) {
        return fn();
    };
    /**
     * Bind a Span as the target's scope
     * @param target An object to bind the scope.
     * @param _span A specific Span to use. Otherwise, use the current one.
     */
    NoOpTracer.prototype.bind = function (target, _span) {
        return target;
    };
    /**
     * Send a pre-populated Span object to the exporter.
     * @param _span The span to pass along.
     */
    NoOpTracer.prototype.recordSpanData = function (_span) {
        /* NOOP */
    };
    /**
     * Returns the BinaryFormat interface for serializing/deserializing Spans.
     */
    NoOpTracer.prototype.getBinaryFormat = function () {
        return new NoOpBinaryFormat();
    };
    /**
     * Returns the HttpTextFormat interface for injecting/extracting Spans.
     */
    NoOpTracer.prototype.getHttpTextFormat = function () {
        return new NoOpHttpTextFormat();
    };
    return NoOpTracer;
}());
export { NoOpTracer };
//# sourceMappingURL=noOpTracer.js.map