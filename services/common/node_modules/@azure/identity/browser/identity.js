(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.Identity = {})));
}(this, function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    function isErrorResponse(errorResponse) {
        return (errorResponse &&
            typeof errorResponse.error === "string" &&
            typeof errorResponse.error_description === "string");
    }
    /**
     * The Error.name value of an AuthenticationError
     */
    const AuthenticationErrorName = "AuthenticationError";
    /**
     * Provides details about a failure to authenticate with Azure Active
     * Directory.  The `errorResponse` field contains more details about
     * the specific failure.
     */
    class AuthenticationError extends Error {
        constructor(statusCode, errorBody) {
            let errorResponse = {
                error: "unknown",
                errorDescription: "An unknown error occurred and no additional details are available."
            };
            if (isErrorResponse(errorBody)) {
                errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);
            }
            else if (typeof errorBody === "string") {
                try {
                    // Most error responses will contain JSON-formatted error details
                    // in the response body        
                    const oauthErrorResponse = JSON.parse(errorBody);
                    errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);
                }
                catch (e) {
                    if (statusCode === 400) {
                        errorResponse = {
                            error: "authority_not_found",
                            errorDescription: "The specified authority URL was not found."
                        };
                    }
                    else {
                        errorResponse = {
                            error: "unknown_error",
                            errorDescription: `An unknown error has occurred. Response body:\n\n${errorBody}`
                        };
                    }
                }
            }
            else {
                errorResponse = {
                    error: "unknown_error",
                    errorDescription: "An unknown error occurred and no additional details are available."
                };
            }
            super(`An error was returned while authenticating to Azure Active Directory (status code ${statusCode}).\n\nMore details:\n\n${JSON.stringify(errorResponse, null, "  ")}`);
            this.statusCode = statusCode;
            this.errorResponse = errorResponse;
            // Ensure that this type reports the correct name
            this.name = AuthenticationErrorName;
        }
    }
    /**
     * The Error.name value of an AggregateAuthenticationError
     */
    const AggregateAuthenticationErrorName = "AggregateAuthenticationError";
    /**
     * Provides an `errors` array containing {@link AuthenticationError} instance
     * for authentication failures from credentials in a {@link ChainedTokenCredential}.
     */
    class AggregateAuthenticationError extends Error {
        constructor(errors) {
            super(`Authentication failed to complete due to the following errors:\n\n${errors.join("\n\n")}`);
            this.errors = errors;
            // Ensure that this type reports the correct name
            this.name = AggregateAuthenticationErrorName;
        }
    }
    function convertOAuthErrorResponseToErrorResponse(errorBody) {
        return {
            error: errorBody.error,
            errorDescription: errorBody.error_description,
            correlationId: errorBody.correlation_id,
            errorCodes: errorBody.error_codes,
            timestamp: errorBody.timestamp,
            traceId: errorBody.trace_id
        };
    }

    /**
     * A no-op implementation of Span that can safely be used without side-effects.
     */
    var NoOpSpan = /** @class */ (function () {
        function NoOpSpan() {
        }
        /**
         * Returns the SpanContext associated with this Span.
         */
        NoOpSpan.prototype.context = function () {
            return {
                spanId: "",
                traceId: ""
            };
        };
        /**
         * Marks the end of Span execution.
         * @param _endTime The time to use as the Span's end time. Defaults to
         * the current time.
         */
        NoOpSpan.prototype.end = function (_endTime) {
            /* Noop */
        };
        /**
         * Sets an attribute on the Span
         * @param _key the attribute key
         * @param _value the attribute value
         */
        NoOpSpan.prototype.setAttribute = function (_key, _value) {
            return this;
        };
        /**
         * Sets attributes on the Span
         * @param _attributes the attributes to add
         */
        NoOpSpan.prototype.setAttributes = function (_attributes) {
            return this;
        };
        /**
         * Adds an event to the Span
         * @param _name The name of the event
         * @param _attributes The associated attributes to add for this event
         */
        NoOpSpan.prototype.addEvent = function (_name, _attributes) {
            return this;
        };
        /**
         * Adds a link to the Span.
         * @param _spanContext the context of the linked span
         * @param _attributes attributes to be added that are associated with the link
         */
        NoOpSpan.prototype.addLink = function (_spanContext, _attributes) {
            return this;
        };
        /**
         * Sets a status on the span. Overrides the default of CanonicalCode.OK.
         * @param _status The status to set.
         */
        NoOpSpan.prototype.setStatus = function (_status) {
            return this;
        };
        /**
         * Updates the name of the Span
         * @param _name the new Span name
         */
        NoOpSpan.prototype.updateName = function (_name) {
            return this;
        };
        /**
         * Returns whether this span will be recorded
         */
        NoOpSpan.prototype.isRecordingEvents = function () {
            return false;
        };
        return NoOpSpan;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * A no-op implementation of BinaryFormat to be used when tracing is disabled.
     */
    var NoOpBinaryFormat = /** @class */ (function () {
        function NoOpBinaryFormat() {
        }
        /** Serialize the given SpanContext to a buffer */
        NoOpBinaryFormat.prototype.toBytes = function (_spanContext) {
            return new ArrayBuffer(0);
        };
        /**
         * Deserialize a SpanContext from binary encoding.
         * Returns null if the buffer does not contain a valid SpanContext.
         */
        NoOpBinaryFormat.prototype.fromBytes = function (_buffer) {
            return null;
        };
        return NoOpBinaryFormat;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * A no-op implementation of HttpTextFormat to be used when tracing is disabled.
     */
    var NoOpHttpTextFormat = /** @class */ (function () {
        function NoOpHttpTextFormat() {
        }
        /**
         * Injects the given SpanContext for transmitting to a remote server.
         * @param _spanContext The SpanContext to transmit
         * @param _format The format of the carrier
         * @param _carrier The carrier to propagate through, e.g. an HTTP request
         */
        NoOpHttpTextFormat.prototype.inject = function (_spanContext, _format, _carrier) { };
        /**
         * Returns a SpanContext intance extracted from the carrier.
         * @param _format the format of the carrier
         * @param _carrier The carrier being used for propagation, e.g. an HTTP request
         */
        NoOpHttpTextFormat.prototype.extract = function (_format, _carrier) {
            return null;
        };
        return NoOpHttpTextFormat;
    }());

    /**
     * A no-op implementation of Tracer that can be used when tracing
     * is disabled.
     */
    var NoOpTracer = /** @class */ (function () {
        function NoOpTracer() {
        }
        /**
         * Starts a new Span.
         * @param _name The name of the span.
         * @param _options The SpanOptions used during Span creation.
         */
        NoOpTracer.prototype.startSpan = function (_name, _options) {
            return new NoOpSpan();
        };
        /**
         * Returns the current Span from the current context, if available.
         */
        NoOpTracer.prototype.getCurrentSpan = function () {
            return new NoOpSpan();
        };
        /**
         * Executes the given function within the context provided by a Span.
         * @param _span The span that provides the context.
         * @param fn The function to be executed.
         */
        NoOpTracer.prototype.withSpan = function (_span, fn) {
            return fn();
        };
        /**
         * Bind a Span as the target's scope
         * @param target An object to bind the scope.
         * @param _span A specific Span to use. Otherwise, use the current one.
         */
        NoOpTracer.prototype.bind = function (target, _span) {
            return target;
        };
        /**
         * Send a pre-populated Span object to the exporter.
         * @param _span The span to pass along.
         */
        NoOpTracer.prototype.recordSpanData = function (_span) {
            /* NOOP */
        };
        /**
         * Returns the BinaryFormat interface for serializing/deserializing Spans.
         */
        NoOpTracer.prototype.getBinaryFormat = function () {
            return new NoOpBinaryFormat();
        };
        /**
         * Returns the HttpTextFormat interface for injecting/extracting Spans.
         */
        NoOpTracer.prototype.getHttpTextFormat = function () {
            return new NoOpHttpTextFormat();
        };
        return NoOpTracer;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    function getGlobalObject() {
        return self;
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var GLOBAL_TRACER_VERSION = 1;
    var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache");
    var cache;
    function loadTracerCache() {
        var globalObj = getGlobalObject();
        var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
        if (existingCache) {
            if (existingCache.version !== GLOBAL_TRACER_VERSION) {
                throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n         This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
            }
            cache = existingCache;
        }
        else {
            cache = {
                tracer: undefined,
                version: GLOBAL_TRACER_VERSION
            };
            globalObj[GLOBAL_TRACER_SYMBOL] = cache;
        }
    }
    function getCache() {
        if (!cache) {
            loadTracerCache();
        }
        return cache;
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * Retrieves the active tracer, or returns a
     * no-op implementation if one is not set.
     */
    function getTracer() {
        var cache = getCache();
        if (!cache.tracer) {
            cache.tracer = new NoOpTracer();
        }
        return cache.tracer;
    }

    /*!
     * Copyright 2019, OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An enumeration of canonical status codes.
     *
     * TODO (revision): https://github.com/open-telemetry/opentelemetry-specification/issues/59
     */
    var CanonicalCode;
    (function (CanonicalCode) {
        /**
         * Not an error; returned on success
         */
        CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
        /**
         * The operation was cancelled (typically by the caller).
         */
        CanonicalCode[CanonicalCode["CANCELLED"] = 1] = "CANCELLED";
        /**
         * Unknown error.  An example of where this error may be returned is
         * if a status value received from another address space belongs to
         * an error-space that is not known in this address space.  Also
         * errors raised by APIs that do not return enough error information
         * may be converted to this error.
         */
        CanonicalCode[CanonicalCode["UNKNOWN"] = 2] = "UNKNOWN";
        /**
         * Client specified an invalid argument.  Note that this differs
         * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
         * that are problematic regardless of the state of the system
         * (e.g., a malformed file name).
         */
        CanonicalCode[CanonicalCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
        /**
         * Deadline expired before operation could complete.  For operations
         * that change the state of the system, this error may be returned
         * even if the operation has completed successfully.  For example, a
         * successful response from a server could have been delayed long
         * enough for the deadline to expire.
         */
        CanonicalCode[CanonicalCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
        /**
         * Some requested entity (e.g., file or directory) was not found.
         */
        CanonicalCode[CanonicalCode["NOT_FOUND"] = 5] = "NOT_FOUND";
        /**
         * Some entity that we attempted to create (e.g., file or directory)
         * already exists.
         */
        CanonicalCode[CanonicalCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
        /**
         * The caller does not have permission to execute the specified
         * operation.  PERMISSION_DENIED must not be used for rejections
         * caused by exhausting some resource (use RESOURCE_EXHAUSTED
         * instead for those errors).  PERMISSION_DENIED must not be
         * used if the caller can not be identified (use UNAUTHENTICATED
         * instead for those errors).
         */
        CanonicalCode[CanonicalCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or
         * perhaps the entire file system is out of space.
         */
        CanonicalCode[CanonicalCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
        /**
         * Operation was rejected because the system is not in a state
         * required for the operation's execution.  For example, directory
         * to be deleted may be non-empty, an rmdir operation is applied to
         * a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *
         *  - Use UNAVAILABLE if the client can retry just the failing call.
         *  - Use ABORTED if the client should retry at a higher-level
         *    (e.g., restarting a read-modify-write sequence).
         *  - Use FAILED_PRECONDITION if the client should not retry until
         *    the system state has been explicitly fixed.  E.g., if an "rmdir"
         *    fails because the directory is non-empty, FAILED_PRECONDITION
         *    should be returned since the client should not retry unless
         *    they have first fixed up the directory by deleting files from it.
         *  - Use FAILED_PRECONDITION if the client performs conditional
         *    REST Get/Update/Delete on a resource and the resource on the
         *    server does not match the condition. E.g., conflicting
         *    read-modify-write on the same resource.
         */
        CanonicalCode[CanonicalCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
        /**
         * The operation was aborted, typically due to a concurrency issue
         * like sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION,
         * ABORTED, and UNAVAILABLE.
         */
        CanonicalCode[CanonicalCode["ABORTED"] = 10] = "ABORTED";
        /**
         * Operation was attempted past the valid range.  E.g., seeking or
         * reading past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may
         * be fixed if the system state changes. For example, a 32-bit file
         * system will generate INVALID_ARGUMENT if asked to read at an
         * offset that is not in the range [0,2^32-1], but it will generate
         * OUT_OF_RANGE if asked to read from an offset past the current
         * file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
         * error) when it applies so that callers who are iterating through
         * a space can easily look for an OUT_OF_RANGE error to detect when
         * they are done.
         */
        CanonicalCode[CanonicalCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
        /**
         * Operation is not implemented or not supported/enabled in this service.
         */
        CanonicalCode[CanonicalCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
        /**
         * Internal errors.  Means some invariants expected by underlying
         * system has been broken.  If you see one of these errors,
         * something is very broken.
         */
        CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
        /**
         * The service is currently unavailable.  This is a most likely a
         * transient condition and may be corrected by retrying with
         * a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION,
         * ABORTED, and UNAVAILABLE.
         */
        CanonicalCode[CanonicalCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
        /**
         * Unrecoverable data loss or corruption.
         */
        CanonicalCode[CanonicalCode["DATA_LOSS"] = 15] = "DATA_LOSS";
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        CanonicalCode[CanonicalCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(CanonicalCode || (CanonicalCode = {}));

    /*!
     * Copyright 2019, OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type of span. Can be used to specify additional relationships between spans
     * in addition to a parent/child relationship.
     */
    var SpanKind;
    (function (SpanKind) {
        /** Default value. Indicates that the span is used internally. */
        SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
        /**
         * Indicates that the span covers server-side handling of an RPC or other
         * remote request.
         */
        SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
        /**
         * Indicates that the span covers the client-side wrapper around an RPC or
         * other remote request.
         */
        SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
        /**
         * Indicates that the span describes producer sending a message to a
         * broker. Unlike client and server, there is no direct critical path latency
         * relationship between producer and consumer spans.
         */
        SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
        /**
         * Indicates that the span describes consumer receiving a message from a
         * broker. Unlike client and server, there is no direct critical path latency
         * relationship between producer and consumer spans.
         */
        SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind || (SpanKind = {}));

    /*!
     * Copyright 2019, OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An enumeration that represents global trace flags. These flags are
     * propagated to all child {@link Span}. These determine features such as
     * whether a Span should be traced. It is implemented as a bitmask.
     */
    var TraceFlags;
    (function (TraceFlags) {
        /** Bit to represent whether trace is unsampled in trace flags. */
        TraceFlags[TraceFlags["UNSAMPLED"] = 0] = "UNSAMPLED";
        /** Bit to represent whether trace is sampled in trace flags. */
        TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
    })(TraceFlags || (TraceFlags = {}));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var VERSION = "00";
    /**
     * Generates a `traceparent` value given a span context.
     * @param spanContext Contains context for a specific span.
     * @returns The `spanContext` represented as a `traceparent` value.
     */
    function getTraceParentHeader(spanContext) {
        var missingFields = [];
        if (!spanContext.traceId) {
            missingFields.push("traceId");
        }
        if (!spanContext.spanId) {
            missingFields.push("spanId");
        }
        if (missingFields.length) {
            return;
        }
        var flags = spanContext.traceFlags || TraceFlags.UNSAMPLED;
        var hexFlags = flags.toString(16);
        var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags;
        // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
        return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Creates a span using the global tracer.
     * @param name The name of the operation being performed.
     * @param options The options for the underlying http request.
     */
    function createSpan(operationName, options = {}) {
        const tracer = getTracer();
        const spanOptions = Object.assign({}, options.spanOptions, { kind: SpanKind.CLIENT });
        const span = tracer.startSpan(`Azure.Identity.${operationName}`, spanOptions);
        span.setAttribute("component", "identity");
        let newOptions = options;
        if (span.isRecordingEvents()) {
            newOptions = Object.assign({}, options, { spanOptions: Object.assign({}, options.spanOptions, { parent: span }) });
        }
        return {
            span,
            options: newOptions
        };
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Enables multiple {@link TokenCredential} implementations to be tried in order
     * until one of the getToken methods returns an {@link AccessToken}.
     */
    class ChainedTokenCredential {
        constructor(...sources) {
            this._sources = [];
            this._sources = sources;
        }
        /**
         * Returns the first {@link AccessToken} returned by one of the chained
         * {@link TokenCredential} implementations.  Throws an {@link AggregateAuthenticationError}
         * when one or more credentials throws an {@link AuthenticationError} and
         * no credentials have returned an {@link AccessToken}.
         *
         * @param scopes The list of scopes for which the token will have access.
         * @param options The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                let token = null;
                const errors = [];
                const { span, options: newOptions } = createSpan("ChainedTokenCredential-getToken", options);
                for (let i = 0; i < this._sources.length && token === null; i++) {
                    try {
                        token = yield this._sources[i].getToken(scopes, newOptions);
                    }
                    catch (err) {
                        errors.push(err);
                    }
                }
                if (!token && errors.length > 0) {
                    const err = new AggregateAuthenticationError(errors);
                    span.setStatus({
                        code: CanonicalCode.UNAUTHENTICATED,
                        message: err.message
                    });
                    throw err;
                }
                span.end();
                return token;
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    const BrowserNotSupportedError = new Error("EnvironmentCredential is not supported in the browser.");
    class EnvironmentCredential {
        constructor(options) {
            throw BrowserNotSupportedError;
        }
        getToken(scopes, options) {
            throw BrowserNotSupportedError;
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$1 = new Error("ManagedIdentityCredential is not supported in the browser.");
    class ManagedIdentityCredential {
        constructor(clientIdOrOptions, options) {
            throw BrowserNotSupportedError$1;
        }
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                throw BrowserNotSupportedError$1;
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Provides a default {@link ChainedTokenCredential} configuration for
     * applications that will be deployed to Azure.  The following credential
     * types will be tried, in order:
     *
     * - {@link EnvironmentCredential}
     * - {@link ManagedIdentityCredential}
     *
     * Consult the documentation of these credential types for more information
     * on how they attempt authentication.
     */
    class DefaultAzureCredential extends ChainedTokenCredential {
        /**
         * Creates an instance of the DefaultAzureCredential class.
         *
         * @param options Options for configuring the client which makes the authentication request.
         */
        constructor(identityClientOptions) {
            super(new EnvironmentCredential(identityClientOptions), new ManagedIdentityCredential(identityClientOptions));
        }
    }

    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;

    var hexTable = (function () {
        var array = [];
        for (var i = 0; i < 256; ++i) {
            array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
        }

        return array;
    }());

    var compactQueue = function compactQueue(queue) {
        while (queue.length > 1) {
            var item = queue.pop();
            var obj = item.obj[item.prop];

            if (isArray(obj)) {
                var compacted = [];

                for (var j = 0; j < obj.length; ++j) {
                    if (typeof obj[j] !== 'undefined') {
                        compacted.push(obj[j]);
                    }
                }

                item.obj[item.prop] = compacted;
            }
        }
    };

    var arrayToObject = function arrayToObject(source, options) {
        var obj = options && options.plainObjects ? Object.create(null) : {};
        for (var i = 0; i < source.length; ++i) {
            if (typeof source[i] !== 'undefined') {
                obj[i] = source[i];
            }
        }

        return obj;
    };

    var merge = function merge(target, source, options) {
        if (!source) {
            return target;
        }

        if (typeof source !== 'object') {
            if (isArray(target)) {
                target.push(source);
            } else if (target && typeof target === 'object') {
                if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                    target[source] = true;
                }
            } else {
                return [target, source];
            }

            return target;
        }

        if (!target || typeof target !== 'object') {
            return [target].concat(source);
        }

        var mergeTarget = target;
        if (isArray(target) && !isArray(source)) {
            mergeTarget = arrayToObject(target, options);
        }

        if (isArray(target) && isArray(source)) {
            source.forEach(function (item, i) {
                if (has.call(target, i)) {
                    var targetItem = target[i];
                    if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                        target[i] = merge(targetItem, item, options);
                    } else {
                        target.push(item);
                    }
                } else {
                    target[i] = item;
                }
            });
            return target;
        }

        return Object.keys(source).reduce(function (acc, key) {
            var value = source[key];

            if (has.call(acc, key)) {
                acc[key] = merge(acc[key], value, options);
            } else {
                acc[key] = value;
            }
            return acc;
        }, mergeTarget);
    };

    var assign = function assignSingleSource(target, source) {
        return Object.keys(source).reduce(function (acc, key) {
            acc[key] = source[key];
            return acc;
        }, target);
    };

    var decode = function (str, decoder, charset) {
        var strWithoutPlus = str.replace(/\+/g, ' ');
        if (charset === 'iso-8859-1') {
            // unescape never throws, no try...catch needed:
            return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
        }
        // utf-8
        try {
            return decodeURIComponent(strWithoutPlus);
        } catch (e) {
            return strWithoutPlus;
        }
    };

    var encode = function encode(str, defaultEncoder, charset) {
        // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
        // It has been adapted here for stricter adherence to RFC 3986
        if (str.length === 0) {
            return str;
        }

        var string = str;
        if (typeof str === 'symbol') {
            string = Symbol.prototype.toString.call(str);
        } else if (typeof str !== 'string') {
            string = String(str);
        }

        if (charset === 'iso-8859-1') {
            return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
                return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
            });
        }

        var out = '';
        for (var i = 0; i < string.length; ++i) {
            var c = string.charCodeAt(i);

            if (
                c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || (c >= 0x30 && c <= 0x39) // 0-9
                || (c >= 0x41 && c <= 0x5A) // a-z
                || (c >= 0x61 && c <= 0x7A) // A-Z
            ) {
                out += string.charAt(i);
                continue;
            }

            if (c < 0x80) {
                out = out + hexTable[c];
                continue;
            }

            if (c < 0x800) {
                out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
                continue;
            }

            i += 1;
            c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
            out += hexTable[0xF0 | (c >> 18)]
                + hexTable[0x80 | ((c >> 12) & 0x3F)]
                + hexTable[0x80 | ((c >> 6) & 0x3F)]
                + hexTable[0x80 | (c & 0x3F)];
        }

        return out;
    };

    var compact = function compact(value) {
        var queue = [{ obj: { o: value }, prop: 'o' }];
        var refs = [];

        for (var i = 0; i < queue.length; ++i) {
            var item = queue[i];
            var obj = item.obj[item.prop];

            var keys = Object.keys(obj);
            for (var j = 0; j < keys.length; ++j) {
                var key = keys[j];
                var val = obj[key];
                if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                    queue.push({ obj: obj, prop: key });
                    refs.push(val);
                }
            }
        }

        compactQueue(queue);

        return value;
    };

    var isRegExp = function isRegExp(obj) {
        return Object.prototype.toString.call(obj) === '[object RegExp]';
    };

    var isBuffer = function isBuffer(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }

        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };

    var combine = function combine(a, b) {
        return [].concat(a, b);
    };

    var utils = {
        arrayToObject: arrayToObject,
        assign: assign,
        combine: combine,
        compact: compact,
        decode: decode,
        encode: encode,
        isBuffer: isBuffer,
        isRegExp: isRegExp,
        merge: merge
    };

    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;



    var Format = {
        RFC1738: 'RFC1738',
        RFC3986: 'RFC3986'
    };

    var formats = utils.assign(
        {
            'default': Format.RFC3986,
            formatters: {
                RFC1738: function (value) {
                    return replace.call(value, percentTwenties, '+');
                },
                RFC3986: function (value) {
                    return String(value);
                }
            }
        },
        Format
    );

    var has$1 = Object.prototype.hasOwnProperty;

    var arrayPrefixGenerators = {
        brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
            return prefix + '[]';
        },
        comma: 'comma',
        indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
            return prefix + '[' + key + ']';
        },
        repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
            return prefix;
        }
    };

    var isArray$1 = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function (arr, valueOrArray) {
        push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
    };

    var toISO = Date.prototype.toISOString;

    var defaultFormat = formats['default'];
    var defaults = {
        addQueryPrefix: false,
        allowDots: false,
        charset: 'utf-8',
        charsetSentinel: false,
        delimiter: '&',
        encode: true,
        encoder: utils.encode,
        encodeValuesOnly: false,
        format: defaultFormat,
        formatter: formats.formatters[defaultFormat],
        // deprecated
        indices: false,
        serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
            return toISO.call(date);
        },
        skipNulls: false,
        strictNullHandling: false
    };

    var isNonNullishPrimitive = function isNonNullishPrimitive(v) { // eslint-disable-line func-name-matching
        return typeof v === 'string'
            || typeof v === 'number'
            || typeof v === 'boolean'
            || typeof v === 'symbol'
            || typeof v === 'bigint'; // eslint-disable-line valid-typeof
    };

    var stringify = function stringify( // eslint-disable-line func-name-matching
        object,
        prefix,
        generateArrayPrefix,
        strictNullHandling,
        skipNulls,
        encoder,
        filter,
        sort,
        allowDots,
        serializeDate,
        formatter,
        encodeValuesOnly,
        charset
    ) {
        var obj = object;
        if (typeof filter === 'function') {
            obj = filter(prefix, obj);
        } else if (obj instanceof Date) {
            obj = serializeDate(obj);
        } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
            obj = obj.join(',');
        }

        if (obj === null) {
            if (strictNullHandling) {
                return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
            }

            obj = '';
        }

        if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
            if (encoder) {
                var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
                return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
            }
            return [formatter(prefix) + '=' + formatter(String(obj))];
        }

        var values = [];

        if (typeof obj === 'undefined') {
            return values;
        }

        var objKeys;
        if (isArray$1(filter)) {
            objKeys = filter;
        } else {
            var keys = Object.keys(obj);
            objKeys = sort ? keys.sort(sort) : keys;
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];

            if (skipNulls && obj[key] === null) {
                continue;
            }

            if (isArray$1(obj)) {
                pushToArray(values, stringify(
                    obj[key],
                    typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix,
                    generateArrayPrefix,
                    strictNullHandling,
                    skipNulls,
                    encoder,
                    filter,
                    sort,
                    allowDots,
                    serializeDate,
                    formatter,
                    encodeValuesOnly,
                    charset
                ));
            } else {
                pushToArray(values, stringify(
                    obj[key],
                    prefix + (allowDots ? '.' + key : '[' + key + ']'),
                    generateArrayPrefix,
                    strictNullHandling,
                    skipNulls,
                    encoder,
                    filter,
                    sort,
                    allowDots,
                    serializeDate,
                    formatter,
                    encodeValuesOnly,
                    charset
                ));
            }
        }

        return values;
    };

    var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
        if (!opts) {
            return defaults;
        }

        if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
            throw new TypeError('Encoder has to be a function.');
        }

        var charset = opts.charset || defaults.charset;
        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
            throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
        }

        var format = formats['default'];
        if (typeof opts.format !== 'undefined') {
            if (!has$1.call(formats.formatters, opts.format)) {
                throw new TypeError('Unknown format option provided.');
            }
            format = opts.format;
        }
        var formatter = formats.formatters[format];

        var filter = defaults.filter;
        if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
            filter = opts.filter;
        }

        return {
            addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
            allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
            charset: charset,
            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
            delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
            encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
            encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
            encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
            filter: filter,
            formatter: formatter,
            serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
            skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
            sort: typeof opts.sort === 'function' ? opts.sort : null,
            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
        };
    };

    var stringify_1 = function (object, opts) {
        var obj = object;
        var options = normalizeStringifyOptions(opts);

        var objKeys;
        var filter;

        if (typeof options.filter === 'function') {
            filter = options.filter;
            obj = filter('', obj);
        } else if (isArray$1(options.filter)) {
            filter = options.filter;
            objKeys = filter;
        }

        var keys = [];

        if (typeof obj !== 'object' || obj === null) {
            return '';
        }

        var arrayFormat;
        if (opts && opts.arrayFormat in arrayPrefixGenerators) {
            arrayFormat = opts.arrayFormat;
        } else if (opts && 'indices' in opts) {
            arrayFormat = opts.indices ? 'indices' : 'repeat';
        } else {
            arrayFormat = 'indices';
        }

        var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

        if (!objKeys) {
            objKeys = Object.keys(obj);
        }

        if (options.sort) {
            objKeys.sort(options.sort);
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];

            if (options.skipNulls && obj[key] === null) {
                continue;
            }
            pushToArray(keys, stringify(
                obj[key],
                key,
                generateArrayPrefix,
                options.strictNullHandling,
                options.skipNulls,
                options.encode ? options.encoder : null,
                options.filter,
                options.sort,
                options.allowDots,
                options.serializeDate,
                options.formatter,
                options.encodeValuesOnly,
                options.charset
            ));
        }

        var joined = keys.join(options.delimiter);
        var prefix = options.addQueryPrefix === true ? '?' : '';

        if (options.charsetSentinel) {
            if (options.charset === 'iso-8859-1') {
                // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
                prefix += 'utf8=%26%2310003%3B&';
            } else {
                // encodeURIComponent('✓')
                prefix += 'utf8=%E2%9C%93&';
            }
        }

        return joined.length > 0 ? prefix + joined : '';
    };

    var has$2 = Object.prototype.hasOwnProperty;

    var defaults$1 = {
        allowDots: false,
        allowPrototypes: false,
        arrayLimit: 20,
        charset: 'utf-8',
        charsetSentinel: false,
        comma: false,
        decoder: utils.decode,
        delimiter: '&',
        depth: 5,
        ignoreQueryPrefix: false,
        interpretNumericEntities: false,
        parameterLimit: 1000,
        parseArrays: true,
        plainObjects: false,
        strictNullHandling: false
    };

    var interpretNumericEntities = function (str) {
        return str.replace(/&#(\d+);/g, function ($0, numberStr) {
            return String.fromCharCode(parseInt(numberStr, 10));
        });
    };

    // This is what browsers will submit when the ✓ character occurs in an
    // application/x-www-form-urlencoded body and the encoding of the page containing
    // the form is iso-8859-1, or when the submitted form has an accept-charset
    // attribute of iso-8859-1. Presumably also with other charsets that do not contain
    // the ✓ character, such as us-ascii.
    var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

    // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
    var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

    var parseValues = function parseQueryStringValues(str, options) {
        var obj = {};
        var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
        var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
        var parts = cleanStr.split(options.delimiter, limit);
        var skipIndex = -1; // Keep track of where the utf8 sentinel was found
        var i;

        var charset = options.charset;
        if (options.charsetSentinel) {
            for (i = 0; i < parts.length; ++i) {
                if (parts[i].indexOf('utf8=') === 0) {
                    if (parts[i] === charsetSentinel) {
                        charset = 'utf-8';
                    } else if (parts[i] === isoSentinel) {
                        charset = 'iso-8859-1';
                    }
                    skipIndex = i;
                    i = parts.length; // The eslint settings do not allow break;
                }
            }
        }

        for (i = 0; i < parts.length; ++i) {
            if (i === skipIndex) {
                continue;
            }
            var part = parts[i];

            var bracketEqualsPos = part.indexOf(']=');
            var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

            var key, val;
            if (pos === -1) {
                key = options.decoder(part, defaults$1.decoder, charset);
                val = options.strictNullHandling ? null : '';
            } else {
                key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset);
                val = options.decoder(part.slice(pos + 1), defaults$1.decoder, charset);
            }

            if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
                val = interpretNumericEntities(val);
            }

            if (val && options.comma && val.indexOf(',') > -1) {
                val = val.split(',');
            }

            if (has$2.call(obj, key)) {
                obj[key] = utils.combine(obj[key], val);
            } else {
                obj[key] = val;
            }
        }

        return obj;
    };

    var parseObject = function (chain, val, options) {
        var leaf = val;

        for (var i = chain.length - 1; i >= 0; --i) {
            var obj;
            var root = chain[i];

            if (root === '[]' && options.parseArrays) {
                obj = [].concat(leaf);
            } else {
                obj = options.plainObjects ? Object.create(null) : {};
                var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
                var index = parseInt(cleanRoot, 10);
                if (!options.parseArrays && cleanRoot === '') {
                    obj = { 0: leaf };
                } else if (
                    !isNaN(index)
                    && root !== cleanRoot
                    && String(index) === cleanRoot
                    && index >= 0
                    && (options.parseArrays && index <= options.arrayLimit)
                ) {
                    obj = [];
                    obj[index] = leaf;
                } else {
                    obj[cleanRoot] = leaf;
                }
            }

            leaf = obj;
        }

        return leaf;
    };

    var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
        if (!givenKey) {
            return;
        }

        // Transform dot notation to bracket notation
        var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

        // The regex chunks

        var brackets = /(\[[^[\]]*])/;
        var child = /(\[[^[\]]*])/g;

        // Get the parent

        var segment = options.depth > 0 && brackets.exec(key);
        var parent = segment ? key.slice(0, segment.index) : key;

        // Stash the parent if it exists

        var keys = [];
        if (parent) {
            // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
            if (!options.plainObjects && has$2.call(Object.prototype, parent)) {
                if (!options.allowPrototypes) {
                    return;
                }
            }

            keys.push(parent);
        }

        // Loop through children appending to the array until we hit depth

        var i = 0;
        while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
            i += 1;
            if (!options.plainObjects && has$2.call(Object.prototype, segment[1].slice(1, -1))) {
                if (!options.allowPrototypes) {
                    return;
                }
            }
            keys.push(segment[1]);
        }

        // If there's a remainder, just add whatever is left

        if (segment) {
            keys.push('[' + key.slice(segment.index) + ']');
        }

        return parseObject(keys, val, options);
    };

    var normalizeParseOptions = function normalizeParseOptions(opts) {
        if (!opts) {
            return defaults$1;
        }

        if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
            throw new TypeError('Decoder has to be a function.');
        }

        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
            throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
        }
        var charset = typeof opts.charset === 'undefined' ? defaults$1.charset : opts.charset;

        return {
            allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
            allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$1.allowPrototypes,
            arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$1.arrayLimit,
            charset: charset,
            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
            comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$1.comma,
            decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$1.decoder,
            delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
            // eslint-disable-next-line no-implicit-coercion, no-extra-parens
            depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults$1.depth,
            ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
            interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
            parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$1.parameterLimit,
            parseArrays: opts.parseArrays !== false,
            plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$1.plainObjects,
            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
        };
    };

    var parse = function (str, opts) {
        var options = normalizeParseOptions(opts);

        if (str === '' || str === null || typeof str === 'undefined') {
            return options.plainObjects ? Object.create(null) : {};
        }

        var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
        var obj = options.plainObjects ? Object.create(null) : {};

        // Iterate over the keys and setup the new object

        var keys = Object.keys(tempObj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var newObj = parseKeys(key, tempObj[key], options);
            obj = utils.merge(obj, newObj, options);
        }

        return utils.compact(obj);
    };

    var lib = {
        formats: formats,
        parse: parse,
        stringify: stringify_1
    };

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * A collection of HttpHeaders that can be sent with a HTTP request.
     */
    function getHeaderKey(headerName) {
        return headerName.toLowerCase();
    }
    /**
     * A collection of HTTP header key/value pairs.
     */
    var HttpHeaders = /** @class */ (function () {
        function HttpHeaders(rawHeaders) {
            this._headersMap = {};
            if (rawHeaders) {
                for (var headerName in rawHeaders) {
                    this.set(headerName, rawHeaders[headerName]);
                }
            }
        }
        /**
         * Set a header in this collection with the provided name and value. The name is
         * case-insensitive.
         * @param headerName The name of the header to set. This value is case-insensitive.
         * @param headerValue The value of the header to set.
         */
        HttpHeaders.prototype.set = function (headerName, headerValue) {
            this._headersMap[getHeaderKey(headerName)] = {
                name: headerName,
                value: headerValue.toString()
            };
        };
        /**
         * Get the header value for the provided header name, or undefined if no header exists in this
         * collection with the provided name.
         * @param headerName The name of the header.
         */
        HttpHeaders.prototype.get = function (headerName) {
            var header = this._headersMap[getHeaderKey(headerName)];
            return !header ? undefined : header.value;
        };
        /**
         * Get whether or not this header collection contains a header entry for the provided header name.
         */
        HttpHeaders.prototype.contains = function (headerName) {
            return !!this._headersMap[getHeaderKey(headerName)];
        };
        /**
         * Remove the header with the provided headerName. Return whether or not the header existed and
         * was removed.
         * @param headerName The name of the header to remove.
         */
        HttpHeaders.prototype.remove = function (headerName) {
            var result = this.contains(headerName);
            delete this._headersMap[getHeaderKey(headerName)];
            return result;
        };
        /**
         * Get the headers that are contained this collection as an object.
         */
        HttpHeaders.prototype.rawHeaders = function () {
            var result = {};
            for (var headerKey in this._headersMap) {
                var header = this._headersMap[headerKey];
                result[header.name.toLowerCase()] = header.value;
            }
            return result;
        };
        /**
         * Get the headers that are contained in this collection as an array.
         */
        HttpHeaders.prototype.headersArray = function () {
            var headers = [];
            for (var headerKey in this._headersMap) {
                headers.push(this._headersMap[headerKey]);
            }
            return headers;
        };
        /**
         * Get the header names that are contained in this collection.
         */
        HttpHeaders.prototype.headerNames = function () {
            var headerNames = [];
            var headers = this.headersArray();
            for (var i = 0; i < headers.length; ++i) {
                headerNames.push(headers[i].name);
            }
            return headerNames;
        };
        /**
         * Get the header names that are contained in this collection.
         */
        HttpHeaders.prototype.headerValues = function () {
            var headerValues = [];
            var headers = this.headersArray();
            for (var i = 0; i < headers.length; ++i) {
                headerValues.push(headers[i].value);
            }
            return headerValues;
        };
        /**
         * Get the JSON object representation of this HTTP header collection.
         */
        HttpHeaders.prototype.toJson = function () {
            return this.rawHeaders();
        };
        /**
         * Get the string representation of this HTTP header collection.
         */
        HttpHeaders.prototype.toString = function () {
            return JSON.stringify(this.toJson());
        };
        /**
         * Create a deep clone/copy of this HttpHeaders collection.
         */
        HttpHeaders.prototype.clone = function () {
            return new HttpHeaders(this.rawHeaders());
        };
        return HttpHeaders;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * Encodes a byte array in base64 format.
     * @param value the Uint8Aray to encode
     */
    function encodeByteArray(value) {
        var str = "";
        for (var i = 0; i < value.length; i++) {
            str += String.fromCharCode(value[i]);
        }
        return btoa(str);
    }
    /**
     * Decodes a base64 string into a byte array.
     * @param value the base64 string to decode
     */
    function decodeString(value) {
        var byteString = atob(value);
        var arr = new Uint8Array(byteString.length);
        for (var i = 0; i < byteString.length; i++) {
            arr[i] = byteString.charCodeAt(i);
        }
        return arr;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
    });

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([bth[buf[i++]], bth[buf[i++]], 
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]]]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rngBrowser)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    var Constants = {
        /**
         * The core-http version
         * @const
         * @type {string}
         */
        coreHttpVersion: "1.0.0-preview.2",
        /**
         * Specifies HTTP.
         *
         * @const
         * @type {string}
         */
        HTTP: "http:",
        /**
         * Specifies HTTPS.
         *
         * @const
         * @type {string}
         */
        HTTPS: "https:",
        /**
         * Specifies HTTP Proxy.
         *
         * @const
         * @type {string}
         */
        HTTP_PROXY: "HTTP_PROXY",
        /**
         * Specifies HTTPS Proxy.
         *
         * @const
         * @type {string}
         */
        HTTPS_PROXY: "HTTPS_PROXY",
        HttpConstants: {
            /**
             * Http Verbs
             *
             * @const
             * @enum {string}
             */
            HttpVerbs: {
                PUT: "PUT",
                GET: "GET",
                DELETE: "DELETE",
                POST: "POST",
                MERGE: "MERGE",
                HEAD: "HEAD",
                PATCH: "PATCH"
            },
            StatusCodes: {
                TooManyRequests: 429
            }
        },
        /**
         * Defines constants for use with HTTP headers.
         */
        HeaderConstants: {
            /**
             * The Authorization header.
             *
             * @const
             * @type {string}
             */
            AUTHORIZATION: "authorization",
            AUTHORIZATION_SCHEME: "Bearer",
            /**
             * The Retry-After response-header field can be used with a 503 (Service
             * Unavailable) or 349 (Too Many Requests) responses to indicate how long
             * the service is expected to be unavailable to the requesting client.
             *
             * @const
             * @type {string}
             */
            RETRY_AFTER: "Retry-After",
            /**
             * The UserAgent header.
             *
             * @const
             * @type {string}
             */
            USER_AGENT: "User-Agent"
        }
    };

    // Copyright (c) Microsoft Corporation.
    var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/gi;
    /**
     * A constant that indicates whether the environment is node.js or browser based.
     */
    var isNode = typeof process !== "undefined" &&
        !!process.version &&
        !!process.versions &&
        !!process.versions.node;
    /**
     * Returns a stripped version of the Http Response which only contains body,
     * headers and the status.
     *
     * @param {HttpOperationResponse} response The Http Response
     *
     * @return {object} The stripped version of Http Response.
     */
    function stripResponse(response) {
        var strippedResponse = {};
        strippedResponse.body = response.bodyAsText;
        strippedResponse.headers = response.headers;
        strippedResponse.status = response.status;
        return strippedResponse;
    }
    /**
     * Returns a stripped version of the Http Request that does not contain the
     * Authorization header.
     *
     * @param {WebResource} request The Http Request object
     *
     * @return {WebResource} The stripped version of Http Request.
     */
    function stripRequest(request) {
        var strippedRequest = request.clone();
        if (strippedRequest.headers) {
            strippedRequest.headers.remove("authorization");
        }
        return strippedRequest;
    }
    /**
     * Validates the given uuid as a string
     *
     * @param {string} uuid The uuid as a string that needs to be validated
     *
     * @return {boolean} True if the uuid is valid; false otherwise.
     */
    function isValidUuid(uuid) {
        return validUuidRegex.test(uuid);
    }
    /**
     * Generated UUID
     *
     * @return {string} RFC4122 v4 UUID.
     */
    function generateUuid() {
        return v4_1();
    }
    /**
     * A wrapper for setTimeout that resolves a promise after t milliseconds.
     * @param {number} t The number of milliseconds to be delayed.
     * @param {T} value The value to be resolved with after a timeout of t milliseconds.
     * @returns {Promise<T>} Resolved promise
     */
    function delay(t, value) {
        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
    }
    function prepareXMLRootList(obj, elementName) {
        var _a;
        if (!Array.isArray(obj)) {
            obj = [obj];
        }
        return _a = {}, _a[elementName] = obj, _a;
    }
    var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    /**
     * Indicates whether the given string is in ISO 8601 format.
     * @param {string} value The value to be validated for ISO 8601 duration format.
     * @return {boolean} `true` if valid, `false` otherwise.
     */
    function isDuration(value) {
        return validateISODuration.test(value);
    }
    /**
     * Replace all of the instances of searchValue in value with the provided replaceValue.
     * @param {string | undefined} value The value to search and replace in.
     * @param {string} searchValue The value to search for in the value argument.
     * @param {string} replaceValue The value to replace searchValue with in the value argument.
     * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.
     */
    function replaceAll(value, searchValue, replaceValue) {
        return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
    }
    /**
     * Determines whether the given entity is a basic/primitive type
     * (string, number, boolean, null, undefined).
     * @param {any} value Any entity
     * @return {boolean} - true is it is primitive type, false otherwise.
     */
    function isPrimitiveType(value) {
        return (typeof value !== "object" && typeof value !== "function") || value === null;
    }

    // Copyright (c) Microsoft Corporation.
    var Serializer = /** @class */ (function () {
        function Serializer(modelMappers, isXML) {
            if (modelMappers === void 0) { modelMappers = {}; }
            this.modelMappers = modelMappers;
            this.isXML = isXML;
        }
        Serializer.prototype.validateConstraints = function (mapper, value, objectName) {
            var failValidation = function (constraintName, constraintValue) {
                throw new Error("\"" + objectName + "\" with value \"" + value + "\" should satisfy the constraint \"" + constraintName + "\": " + constraintValue + ".");
            };
            if (mapper.constraints && value != undefined) {
                var _a = mapper.constraints, ExclusiveMaximum = _a.ExclusiveMaximum, ExclusiveMinimum = _a.ExclusiveMinimum, InclusiveMaximum = _a.InclusiveMaximum, InclusiveMinimum = _a.InclusiveMinimum, MaxItems = _a.MaxItems, MaxLength = _a.MaxLength, MinItems = _a.MinItems, MinLength = _a.MinLength, MultipleOf = _a.MultipleOf, Pattern = _a.Pattern, UniqueItems = _a.UniqueItems;
                if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {
                    failValidation("ExclusiveMaximum", ExclusiveMaximum);
                }
                if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {
                    failValidation("ExclusiveMinimum", ExclusiveMinimum);
                }
                if (InclusiveMaximum != undefined && value > InclusiveMaximum) {
                    failValidation("InclusiveMaximum", InclusiveMaximum);
                }
                if (InclusiveMinimum != undefined && value < InclusiveMinimum) {
                    failValidation("InclusiveMinimum", InclusiveMinimum);
                }
                if (MaxItems != undefined && value.length > MaxItems) {
                    failValidation("MaxItems", MaxItems);
                }
                if (MaxLength != undefined && value.length > MaxLength) {
                    failValidation("MaxLength", MaxLength);
                }
                if (MinItems != undefined && value.length < MinItems) {
                    failValidation("MinItems", MinItems);
                }
                if (MinLength != undefined && value.length < MinLength) {
                    failValidation("MinLength", MinLength);
                }
                if (MultipleOf != undefined && value % MultipleOf !== 0) {
                    failValidation("MultipleOf", MultipleOf);
                }
                if (Pattern) {
                    var pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
                    if (typeof value !== "string" || value.match(pattern) === null) {
                        failValidation("Pattern", Pattern);
                    }
                }
                if (UniqueItems &&
                    value.some(function (item, i, ar) { return ar.indexOf(item) !== i; })) {
                    failValidation("UniqueItems", UniqueItems);
                }
            }
        };
        /**
         * Serialize the given object based on its metadata defined in the mapper
         *
         * @param {Mapper} mapper The mapper which defines the metadata of the serializable object
         *
         * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized
         *
         * @param {string} objectName Name of the serialized object
         *
         * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object
         */
        Serializer.prototype.serialize = function (mapper, object, objectName) {
            var payload = {};
            var mapperType = mapper.type.name;
            if (!objectName) {
                objectName = mapper.serializedName;
            }
            if (mapperType.match(/^Sequence$/gi) !== null) {
                payload = [];
            }
            if (mapper.isConstant) {
                object = mapper.defaultValue;
            }
            // This table of allowed values should help explain
            // the mapper.required and mapper.nullable properties.
            // X means "neither undefined or null are allowed".
            //           || required
            //           || true      | false
            //  nullable || ==========================
            //      true || null      | undefined/null
            //     false || X         | undefined
            // undefined || X         | undefined/null
            var required = mapper.required, nullable = mapper.nullable;
            if (required && nullable && object === undefined) {
                throw new Error(objectName + " cannot be undefined.");
            }
            if (required && !nullable && object == undefined) {
                throw new Error(objectName + " cannot be null or undefined.");
            }
            if (!required && nullable === false && object === null) {
                throw new Error(objectName + " cannot be null.");
            }
            if (object == undefined) {
                payload = object;
            }
            else {
                // Validate Constraints if any
                this.validateConstraints(mapper, object, objectName);
                if (mapperType.match(/^any$/gi) !== null) {
                    payload = object;
                }
                else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/gi) !== null) {
                    payload = serializeBasicTypes(mapperType, objectName, object);
                }
                else if (mapperType.match(/^Enum$/gi) !== null) {
                    var enumMapper = mapper;
                    payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
                }
                else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/gi) !== null) {
                    payload = serializeDateTypes(mapperType, object, objectName);
                }
                else if (mapperType.match(/^ByteArray$/gi) !== null) {
                    payload = serializeByteArrayType(objectName, object);
                }
                else if (mapperType.match(/^Base64Url$/gi) !== null) {
                    payload = serializeBase64UrlType(objectName, object);
                }
                else if (mapperType.match(/^Sequence$/gi) !== null) {
                    payload = serializeSequenceType(this, mapper, object, objectName);
                }
                else if (mapperType.match(/^Dictionary$/gi) !== null) {
                    payload = serializeDictionaryType(this, mapper, object, objectName);
                }
                else if (mapperType.match(/^Composite$/gi) !== null) {
                    payload = serializeCompositeType(this, mapper, object, objectName);
                }
            }
            return payload;
        };
        /**
         * Deserialize the given object based on its metadata defined in the mapper
         *
         * @param {object} mapper The mapper which defines the metadata of the serializable object
         *
         * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized
         *
         * @param {string} objectName Name of the deserialized object
         *
         * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object
         */
        Serializer.prototype.deserialize = function (mapper, responseBody, objectName) {
            if (responseBody == undefined) {
                if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
                    // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
                    // between the list being empty versus being missing,
                    // so let's do the more user-friendly thing and return an empty list.
                    responseBody = [];
                }
                // specifically check for undefined as default value can be a falsey value `0, "", false, null`
                if (mapper.defaultValue !== undefined) {
                    responseBody = mapper.defaultValue;
                }
                return responseBody;
            }
            var payload;
            var mapperType = mapper.type.name;
            if (!objectName) {
                objectName = mapper.serializedName;
            }
            if (mapperType.match(/^Composite$/gi) !== null) {
                payload = deserializeCompositeType(this, mapper, responseBody, objectName);
            }
            else {
                if (this.isXML) {
                    /**
                     * If the mapper specifies this as a non-composite type value but the responseBody contains
                     * both header ("$") and body ("_") properties, then just reduce the responseBody value to
                     * the body ("_") property.
                     */
                    if (responseBody["$"] != undefined && responseBody["_"] != undefined) {
                        responseBody = responseBody["_"];
                    }
                }
                if (mapperType.match(/^Number$/gi) !== null) {
                    payload = parseFloat(responseBody);
                    if (isNaN(payload)) {
                        payload = responseBody;
                    }
                }
                else if (mapperType.match(/^Boolean$/gi) !== null) {
                    if (responseBody === "true") {
                        payload = true;
                    }
                    else if (responseBody === "false") {
                        payload = false;
                    }
                    else {
                        payload = responseBody;
                    }
                }
                else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/gi) !== null) {
                    payload = responseBody;
                }
                else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/gi) !== null) {
                    payload = new Date(responseBody);
                }
                else if (mapperType.match(/^UnixTime$/gi) !== null) {
                    payload = unixTimeToDate(responseBody);
                }
                else if (mapperType.match(/^ByteArray$/gi) !== null) {
                    payload = decodeString(responseBody);
                }
                else if (mapperType.match(/^Base64Url$/gi) !== null) {
                    payload = base64UrlToByteArray(responseBody);
                }
                else if (mapperType.match(/^Sequence$/gi) !== null) {
                    payload = deserializeSequenceType(this, mapper, responseBody, objectName);
                }
                else if (mapperType.match(/^Dictionary$/gi) !== null) {
                    payload = deserializeDictionaryType(this, mapper, responseBody, objectName);
                }
            }
            if (mapper.isConstant) {
                payload = mapper.defaultValue;
            }
            return payload;
        };
        return Serializer;
    }());
    function trimEnd(str, ch) {
        var len = str.length;
        while (len - 1 >= 0 && str[len - 1] === ch) {
            --len;
        }
        return str.substr(0, len);
    }
    function bufferToBase64Url(buffer) {
        if (!buffer) {
            return undefined;
        }
        if (!(buffer instanceof Uint8Array)) {
            throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
        }
        // Uint8Array to Base64.
        var str = encodeByteArray(buffer);
        // Base64 to Base64Url.
        return trimEnd(str, "=")
            .replace(/\+/g, "-")
            .replace(/\//g, "_");
    }
    function base64UrlToByteArray(str) {
        if (!str) {
            return undefined;
        }
        if (str && typeof str.valueOf() !== "string") {
            throw new Error("Please provide an input of type string for converting to Uint8Array");
        }
        // Base64Url to Base64.
        str = str.replace(/\-/g, "+").replace(/\_/g, "/");
        // Base64 to Uint8Array.
        return decodeString(str);
    }
    function splitSerializeName(prop) {
        var classes = [];
        var partialclass = "";
        if (prop) {
            var subwords = prop.split(".");
            for (var _i = 0, subwords_1 = subwords; _i < subwords_1.length; _i++) {
                var item = subwords_1[_i];
                if (item.charAt(item.length - 1) === "\\") {
                    partialclass += item.substr(0, item.length - 1) + ".";
                }
                else {
                    partialclass += item;
                    classes.push(partialclass);
                    partialclass = "";
                }
            }
        }
        return classes;
    }
    function dateToUnixTime(d) {
        if (!d) {
            return undefined;
        }
        if (typeof d.valueOf() === "string") {
            d = new Date(d);
        }
        return Math.floor(d.getTime() / 1000);
    }
    function unixTimeToDate(n) {
        if (!n) {
            return undefined;
        }
        return new Date(n * 1000);
    }
    function serializeBasicTypes(typeName, objectName, value) {
        if (value !== null && value !== undefined) {
            if (typeName.match(/^Number$/gi) !== null) {
                if (typeof value !== "number") {
                    throw new Error(objectName + " with value " + value + " must be of type number.");
                }
            }
            else if (typeName.match(/^String$/gi) !== null) {
                if (typeof value.valueOf() !== "string") {
                    throw new Error(objectName + " with value \"" + value + "\" must be of type string.");
                }
            }
            else if (typeName.match(/^Uuid$/gi) !== null) {
                if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
                    throw new Error(objectName + " with value \"" + value + "\" must be of type string and a valid uuid.");
                }
            }
            else if (typeName.match(/^Boolean$/gi) !== null) {
                if (typeof value !== "boolean") {
                    throw new Error(objectName + " with value " + value + " must be of type boolean.");
                }
            }
            else if (typeName.match(/^Stream$/gi) !== null) {
                var objectType = typeof value;
                if (objectType !== "string" &&
                    objectType !== "function" &&
                    !(value instanceof ArrayBuffer) &&
                    !ArrayBuffer.isView(value) &&
                    !(typeof Blob === "function" && value instanceof Blob)) {
                    throw new Error(objectName + " must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.");
                }
            }
        }
        return value;
    }
    function serializeEnumType(objectName, allowedValues, value) {
        if (!allowedValues) {
            throw new Error("Please provide a set of allowedValues to validate " + objectName + " as an Enum Type.");
        }
        var isPresent = allowedValues.some(function (item) {
            if (typeof item.valueOf() === "string") {
                return item.toLowerCase() === value.toLowerCase();
            }
            return item === value;
        });
        if (!isPresent) {
            throw new Error(value + " is not a valid value for " + objectName + ". The valid values are: " + JSON.stringify(allowedValues) + ".");
        }
        return value;
    }
    function serializeByteArrayType(objectName, value) {
        if (value != undefined) {
            if (!(value instanceof Uint8Array)) {
                throw new Error(objectName + " must be of type Uint8Array.");
            }
            value = encodeByteArray(value);
        }
        return value;
    }
    function serializeBase64UrlType(objectName, value) {
        if (value != undefined) {
            if (!(value instanceof Uint8Array)) {
                throw new Error(objectName + " must be of type Uint8Array.");
            }
            value = bufferToBase64Url(value);
        }
        return value;
    }
    function serializeDateTypes(typeName, value, objectName) {
        if (value != undefined) {
            if (typeName.match(/^Date$/gi) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
                }
                value =
                    value instanceof Date
                        ? value.toISOString().substring(0, 10)
                        : new Date(value).toISOString().substring(0, 10);
            }
            else if (typeName.match(/^DateTime$/gi) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
                }
                value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
            }
            else if (typeName.match(/^DateTimeRfc1123$/gi) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123 format.");
                }
                value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
            }
            else if (typeName.match(/^UnixTime$/gi) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123/ISO8601 format " +
                        "for it to be serialized in UnixTime/Epoch format.");
                }
                value = dateToUnixTime(value);
            }
            else if (typeName.match(/^TimeSpan$/gi) !== null) {
                if (!isDuration(value)) {
                    throw new Error(objectName + " must be a string in ISO 8601 format. Instead was \"" + value + "\".");
                }
                value = value;
            }
        }
        return value;
    }
    function serializeSequenceType(serializer, mapper, object, objectName) {
        if (!Array.isArray(object)) {
            throw new Error(objectName + " must be of type Array.");
        }
        var elementType = mapper.type.element;
        if (!elementType || typeof elementType !== "object") {
            throw new Error("element\" metadata for an Array must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName + "."));
        }
        var tempArray = [];
        for (var i = 0; i < object.length; i++) {
            tempArray[i] = serializer.serialize(elementType, object[i], objectName);
        }
        return tempArray;
    }
    function serializeDictionaryType(serializer, mapper, object, objectName) {
        if (typeof object !== "object") {
            throw new Error(objectName + " must be of type object.");
        }
        var valueType = mapper.type.value;
        if (!valueType || typeof valueType !== "object") {
            throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName + "."));
        }
        var tempDictionary = {};
        for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {
            var key = _a[_i];
            tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + "." + key);
        }
        return tempDictionary;
    }
    /**
     * Resolves a composite mapper's modelProperties.
     * @param serializer the serializer containing the entire set of mappers
     * @param mapper the composite mapper to resolve
     */
    function resolveModelProperties(serializer, mapper, objectName) {
        var modelProps = mapper.type.modelProperties;
        if (!modelProps) {
            var className = mapper.type.className;
            if (!className) {
                throw new Error("Class name for model \"" + objectName + "\" is not provided in the mapper \"" + JSON.stringify(mapper, undefined, 2) + "\".");
            }
            var modelMapper = serializer.modelMappers[className];
            if (!modelMapper) {
                throw new Error("mapper() cannot be null or undefined for model \"" + className + "\".");
            }
            modelProps = modelMapper.type.modelProperties;
            if (!modelProps) {
                throw new Error("modelProperties cannot be null or undefined in the " +
                    ("mapper \"" + JSON.stringify(modelMapper) + "\" of type \"" + className + "\" for object \"" + objectName + "\"."));
            }
        }
        return modelProps;
    }
    function serializeCompositeType(serializer, mapper, object, objectName) {
        var _a;
        if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
            mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
        }
        if (object != undefined) {
            var payload = {};
            var modelProps = resolveModelProperties(serializer, mapper, objectName);
            for (var _i = 0, _b = Object.keys(modelProps); _i < _b.length; _i++) {
                var key = _b[_i];
                var propertyMapper = modelProps[key];
                if (propertyMapper.readOnly) {
                    continue;
                }
                var propName = void 0;
                var parentObject = payload;
                if (serializer.isXML) {
                    if (propertyMapper.xmlIsWrapped) {
                        propName = propertyMapper.xmlName;
                    }
                    else {
                        propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
                    }
                }
                else {
                    var paths = splitSerializeName(propertyMapper.serializedName);
                    propName = paths.pop();
                    for (var _c = 0, paths_1 = paths; _c < paths_1.length; _c++) {
                        var pathName = paths_1[_c];
                        var childObject = parentObject[pathName];
                        if (childObject == undefined && object[key] != undefined) {
                            parentObject[pathName] = {};
                        }
                        parentObject = parentObject[pathName];
                    }
                }
                if (parentObject != undefined) {
                    var propertyObjectName = propertyMapper.serializedName !== ""
                        ? objectName + "." + propertyMapper.serializedName
                        : objectName;
                    var toSerialize = object[key];
                    var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
                    if (polymorphicDiscriminator &&
                        polymorphicDiscriminator.clientName === key &&
                        toSerialize == undefined) {
                        toSerialize = mapper.serializedName;
                    }
                    var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);
                    if (serializedValue !== undefined && propName != undefined) {
                        if (propertyMapper.xmlIsAttribute) {
                            // $ is the key attributes are kept under in xml2js.
                            // This keeps things simple while preventing name collision
                            // with names in user documents.
                            parentObject.$ = parentObject.$ || {};
                            parentObject.$[propName] = serializedValue;
                        }
                        else if (propertyMapper.xmlIsWrapped) {
                            parentObject[propName] = (_a = {}, _a[propertyMapper.xmlElementName] = serializedValue, _a);
                        }
                        else {
                            parentObject[propName] = serializedValue;
                        }
                    }
                }
            }
            var additionalPropertiesMapper = mapper.type.additionalProperties;
            if (additionalPropertiesMapper) {
                var propNames = Object.keys(modelProps);
                var _loop_1 = function (clientPropName) {
                    var isAdditionalProperty = propNames.every(function (pn) { return pn !== clientPropName; });
                    if (isAdditionalProperty) {
                        payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]');
                    }
                };
                for (var clientPropName in object) {
                    _loop_1(clientPropName);
                }
            }
            return payload;
        }
        return object;
    }
    function isSpecialXmlProperty(propertyName) {
        return ["$", "_"].includes(propertyName);
    }
    function deserializeCompositeType(serializer, mapper, responseBody, objectName) {
        if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
            mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
        }
        var modelProps = resolveModelProperties(serializer, mapper, objectName);
        var instance = {};
        var handledPropertyNames = [];
        for (var _i = 0, _a = Object.keys(modelProps); _i < _a.length; _i++) {
            var key = _a[_i];
            var propertyMapper = modelProps[key];
            var paths = splitSerializeName(modelProps[key].serializedName);
            handledPropertyNames.push(paths[0]);
            var serializedName = propertyMapper.serializedName, xmlName = propertyMapper.xmlName, xmlElementName = propertyMapper.xmlElementName;
            var propertyObjectName = objectName;
            if (serializedName !== "" && serializedName !== undefined) {
                propertyObjectName = objectName + "." + serializedName;
            }
            var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
            if (headerCollectionPrefix) {
                var dictionary = {};
                for (var _b = 0, _c = Object.keys(responseBody); _b < _c.length; _b++) {
                    var headerKey = _c[_b];
                    if (headerKey.startsWith(headerCollectionPrefix)) {
                        dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName);
                    }
                    handledPropertyNames.push(headerKey);
                }
                instance[key] = dictionary;
            }
            else if (serializer.isXML) {
                if (propertyMapper.xmlIsAttribute && responseBody.$) {
                    instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName], propertyObjectName);
                }
                else {
                    var propertyName = xmlElementName || xmlName || serializedName;
                    var unwrappedProperty = responseBody[propertyName];
                    if (propertyMapper.xmlIsWrapped) {
                        unwrappedProperty = responseBody[xmlName];
                        unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName];
                        var isEmptyWrappedList = unwrappedProperty === undefined;
                        if (isEmptyWrappedList) {
                            unwrappedProperty = [];
                        }
                    }
                    instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);
                }
            }
            else {
                // deserialize the property if it is present in the provided responseBody instance
                var propertyInstance = void 0;
                var res = responseBody;
                // traversing the object step by step.
                for (var _d = 0, paths_2 = paths; _d < paths_2.length; _d++) {
                    var item = paths_2[_d];
                    if (!res)
                        break;
                    res = res[item];
                }
                propertyInstance = res;
                var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
                // checking that the model property name (key)(ex: "fishtype") and the
                // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
                // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
                // is a better approach. The generator is not consistent with escaping '\.' in the
                // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
                // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
                // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
                // the transformation of model property name (ex: "fishtype") is done consistently.
                // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
                if (polymorphicDiscriminator &&
                    key === polymorphicDiscriminator.clientName &&
                    propertyInstance == undefined) {
                    propertyInstance = mapper.serializedName;
                }
                var serializedValue = void 0;
                // paging
                if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
                    propertyInstance = responseBody[key];
                    instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);
                }
                else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
                    serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);
                    instance[key] = serializedValue;
                }
            }
        }
        var additionalPropertiesMapper = mapper.type.additionalProperties;
        if (additionalPropertiesMapper) {
            var isAdditionalProperty = function (responsePropName) {
                for (var clientPropName in modelProps) {
                    var paths = splitSerializeName(modelProps[clientPropName].serializedName);
                    if (paths[0] === responsePropName) {
                        return false;
                    }
                }
                return true;
            };
            for (var responsePropName in responseBody) {
                if (isAdditionalProperty(responsePropName)) {
                    instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]');
                }
            }
        }
        else if (responseBody) {
            for (var _e = 0, _f = Object.keys(responseBody); _e < _f.length; _e++) {
                var key = _f[_e];
                if (instance[key] === undefined &&
                    !handledPropertyNames.includes(key) &&
                    !isSpecialXmlProperty(key)) {
                    instance[key] = responseBody[key];
                }
            }
        }
        return instance;
    }
    function deserializeDictionaryType(serializer, mapper, responseBody, objectName) {
        /*jshint validthis: true */
        var value = mapper.type.value;
        if (!value || typeof value !== "object") {
            throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName));
        }
        if (responseBody) {
            var tempDictionary = {};
            for (var _i = 0, _a = Object.keys(responseBody); _i < _a.length; _i++) {
                var key = _a[_i];
                tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);
            }
            return tempDictionary;
        }
        return responseBody;
    }
    function deserializeSequenceType(serializer, mapper, responseBody, objectName) {
        /*jshint validthis: true */
        var element = mapper.type.element;
        if (!element || typeof element !== "object") {
            throw new Error("element\" metadata for an Array must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName));
        }
        if (responseBody) {
            if (!Array.isArray(responseBody)) {
                // xml2js will interpret a single element array as just the element, so force it to be an array
                responseBody = [responseBody];
            }
            var tempArray = [];
            for (var i = 0; i < responseBody.length; i++) {
                tempArray[i] = serializer.deserialize(element, responseBody[i], objectName + "[" + i + "]");
            }
            return tempArray;
        }
        return responseBody;
    }
    function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
        var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
        if (polymorphicDiscriminator) {
            var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
            if (discriminatorName != undefined) {
                var discriminatorValue = object[discriminatorName];
                if (discriminatorValue != undefined) {
                    var typeName = mapper.type.uberParent || mapper.type.className;
                    var indexDiscriminator = discriminatorValue === typeName
                        ? discriminatorValue
                        : typeName + "." + discriminatorValue;
                    var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];
                    if (polymorphicMapper) {
                        mapper = polymorphicMapper;
                    }
                }
            }
        }
        return mapper;
    }
    function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
        return (mapper.type.polymorphicDiscriminator ||
            getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||
            getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));
    }
    function getPolymorphicDiscriminatorSafely(serializer, typeName) {
        return (typeName &&
            serializer.modelMappers[typeName] &&
            serializer.modelMappers[typeName].type.polymorphicDiscriminator);
    }
    /**
     * Utility function to create a K:V from a list of strings
     */
    function strEnum(o) {
        var result = {};
        for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {
            var key = o_1[_i];
            result[key] = key;
        }
        return result;
    }
    var MapperType = strEnum([
        "Base64Url",
        "Boolean",
        "ByteArray",
        "Composite",
        "Date",
        "DateTime",
        "DateTimeRfc1123",
        "Dictionary",
        "Enum",
        "Number",
        "Object",
        "Sequence",
        "String",
        "Stream",
        "TimeSpan",
        "UnixTime"
    ]);

    // Copyright (c) Microsoft Corporation.
    /**
     * Creates a new WebResource object.
     *
     * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
     * properties to initiate a request.
     *
     * @constructor
     */
    var WebResource = /** @class */ (function () {
        function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive) {
            this.streamResponseBody = streamResponseBody;
            this.url = url || "";
            this.method = method || "GET";
            this.headers = headers instanceof HttpHeaders ? headers : new HttpHeaders(headers);
            this.body = body;
            this.query = query;
            this.formData = undefined;
            this.withCredentials = withCredentials || false;
            this.abortSignal = abortSignal;
            this.timeout = timeout || 0;
            this.onUploadProgress = onUploadProgress;
            this.onDownloadProgress = onDownloadProgress;
            this.proxySettings = proxySettings;
            this.keepAlive = keepAlive;
        }
        /**
         * Validates that the required properties such as method, url, headers["Content-Type"],
         * headers["accept-language"] are defined. It will throw an error if one of the above
         * mentioned properties are not defined.
         */
        WebResource.prototype.validateRequestProperties = function () {
            if (!this.method) {
                throw new Error("WebResource.method is required.");
            }
            if (!this.url) {
                throw new Error("WebResource.url is required.");
            }
        };
        /**
         * Prepares the request.
         * @param {RequestPrepareOptions} options Options to provide for preparing the request.
         * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
         */
        WebResource.prototype.prepare = function (options) {
            if (!options) {
                throw new Error("options object is required");
            }
            if (options.method == undefined || typeof options.method.valueOf() !== "string") {
                throw new Error("options.method must be a string.");
            }
            if (options.url && options.pathTemplate) {
                throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
            }
            if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== "string") &&
                (options.url == undefined || typeof options.url.valueOf() !== "string")) {
                throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
            }
            // set the url if it is provided.
            if (options.url) {
                if (typeof options.url !== "string") {
                    throw new Error('options.url must be of type "string".');
                }
                this.url = options.url;
            }
            // set the method
            if (options.method) {
                var validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];
                if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
                    throw new Error('The provided method "' +
                        options.method +
                        '" is invalid. Supported HTTP methods are: ' +
                        JSON.stringify(validMethods));
                }
            }
            this.method = options.method.toUpperCase();
            // construct the url if path template is provided
            if (options.pathTemplate) {
                var pathTemplate_1 = options.pathTemplate, pathParameters_1 = options.pathParameters;
                if (typeof pathTemplate_1 !== "string") {
                    throw new Error('options.pathTemplate must be of type "string".');
                }
                if (!options.baseUrl) {
                    options.baseUrl = "https://management.azure.com";
                }
                var baseUrl = options.baseUrl;
                var url_1 = baseUrl +
                    (baseUrl.endsWith("/") ? "" : "/") +
                    (pathTemplate_1.startsWith("/") ? pathTemplate_1.slice(1) : pathTemplate_1);
                var segments = url_1.match(/({\w*\s*\w*})/gi);
                if (segments && segments.length) {
                    if (!pathParameters_1) {
                        throw new Error("pathTemplate: " + pathTemplate_1 + " has been provided. Hence, options.pathParameters must also be provided.");
                    }
                    segments.forEach(function (item) {
                        var pathParamName = item.slice(1, -1);
                        var pathParam = pathParameters_1[pathParamName];
                        if (pathParam === null ||
                            pathParam === undefined ||
                            !(typeof pathParam === "string" || typeof pathParam === "object")) {
                            var stringifiedPathParameters = JSON.stringify(pathParameters_1, undefined, 2);
                            throw new Error("pathTemplate: " + pathTemplate_1 + " contains the path parameter " + pathParamName +
                                (" however, it is not present in parameters: " + stringifiedPathParameters + ".") +
                                ("The value of the path parameter can either be a \"string\" of the form { " + pathParamName + ": \"some sample value\" } or ") +
                                ("it can be an \"object\" of the form { \"" + pathParamName + "\": { value: \"some sample value\", skipUrlEncoding: true } }."));
                        }
                        if (typeof pathParam.valueOf() === "string") {
                            url_1 = url_1.replace(item, encodeURIComponent(pathParam));
                        }
                        if (typeof pathParam.valueOf() === "object") {
                            if (!pathParam.value) {
                                throw new Error("options.pathParameters[" + pathParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                            }
                            if (pathParam.skipUrlEncoding) {
                                url_1 = url_1.replace(item, pathParam.value);
                            }
                            else {
                                url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));
                            }
                        }
                    });
                }
                this.url = url_1;
            }
            // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.
            if (options.queryParameters) {
                var queryParameters = options.queryParameters;
                if (typeof queryParameters !== "object") {
                    throw new Error("options.queryParameters must be of type object. It should be a JSON object " +
                        "of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. " +
                        "The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.");
                }
                // append question mark if it is not present in the url
                if (this.url && this.url.indexOf("?") === -1) {
                    this.url += "?";
                }
                // construct queryString
                var queryParams = [];
                // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().
                this.query = {};
                for (var queryParamName in queryParameters) {
                    var queryParam = queryParameters[queryParamName];
                    if (queryParam) {
                        if (typeof queryParam === "string") {
                            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
                            this.query[queryParamName] = encodeURIComponent(queryParam);
                        }
                        else if (typeof queryParam === "object") {
                            if (!queryParam.value) {
                                throw new Error("options.queryParameters[" + queryParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                            }
                            if (queryParam.skipUrlEncoding) {
                                queryParams.push(queryParamName + "=" + queryParam.value);
                                this.query[queryParamName] = queryParam.value;
                            }
                            else {
                                queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
                                this.query[queryParamName] = encodeURIComponent(queryParam.value);
                            }
                        }
                    }
                } // end-of-for
                // append the queryString
                this.url += queryParams.join("&");
            }
            // add headers to the request if they are provided
            if (options.headers) {
                var headers = options.headers;
                for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {
                    var headerName = _a[_i];
                    this.headers.set(headerName, headers[headerName]);
                }
            }
            // ensure accept-language is set correctly
            if (!this.headers.get("accept-language")) {
                this.headers.set("accept-language", "en-US");
            }
            // ensure the request-id is set correctly
            if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
                this.headers.set("x-ms-client-request-id", generateUuid());
            }
            // default
            if (!this.headers.get("Content-Type")) {
                this.headers.set("Content-Type", "application/json; charset=utf-8");
            }
            // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty
            this.body = options.body;
            if (options.body != undefined) {
                // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
                if (options.bodyIsStream) {
                    if (!this.headers.get("Transfer-Encoding")) {
                        this.headers.set("Transfer-Encoding", "chunked");
                    }
                    if (this.headers.get("Content-Type") !== "application/octet-stream") {
                        this.headers.set("Content-Type", "application/octet-stream");
                    }
                }
                else {
                    if (options.serializationMapper) {
                        this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
                    }
                    if (!options.disableJsonStringifyOnBody) {
                        this.body = JSON.stringify(options.body);
                    }
                }
            }
            if (options.spanOptions) {
                this.spanOptions = options.spanOptions;
            }
            this.abortSignal = options.abortSignal;
            this.onDownloadProgress = options.onDownloadProgress;
            this.onUploadProgress = options.onUploadProgress;
            return this;
        };
        /**
         * Clone this WebResource HTTP request object.
         * @returns {WebResource} The clone of this WebResource HTTP request object.
         */
        WebResource.prototype.clone = function () {
            var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive);
            if (this.formData) {
                result.formData = this.formData;
            }
            if (this.operationSpec) {
                result.operationSpec = this.operationSpec;
            }
            if (this.shouldDeserialize) {
                result.shouldDeserialize = this.shouldDeserialize;
            }
            if (this.operationResponseGetter) {
                result.operationResponseGetter = this.operationResponseGetter;
            }
            return result;
        };
        return WebResource;
    }());

    var listenersMap = new WeakMap();
    var abortedMap = new WeakMap();
    /**
     * An aborter instance implements AbortSignal interface, can abort HTTP requests.
     *
     * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
     * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
     * cannot or will not ever be cancelled.
     *
     * @example
     * // Abort without timeout
     * await doAsyncWork(AbortSignal.none);
     *
     * @export
     * @class AbortSignal
     * @implements {AbortSignalLike}
     */
    var AbortSignal = /** @class */ (function () {
        function AbortSignal() {
            /**
             * onabort event listener.
             *
             * @memberof AbortSignal
             */
            this.onabort = null;
            listenersMap.set(this, []);
            abortedMap.set(this, false);
        }
        Object.defineProperty(AbortSignal.prototype, "aborted", {
            /**
             * Status of whether aborted or not.
             *
             * @readonly
             * @type {boolean}
             * @memberof AbortSignal
             */
            get: function () {
                if (!abortedMap.has(this)) {
                    throw new TypeError("Expected `this` to be an instance of AbortSignal.");
                }
                return abortedMap.get(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbortSignal, "none", {
            /**
             * Creates a new AbortSignal instance that will never be aborted.
             *
             * @readonly
             * @static
             * @type {AbortSignal}
             * @memberof AbortSignal
             */
            get: function () {
                return new AbortSignal();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Added new "abort" event listener, only support "abort" event.
         *
         * @param {"abort"} _type Only support "abort" event
         * @param {(this: AbortSignalLike, ev: any) => any} listener
         * @memberof AbortSignal
         */
        AbortSignal.prototype.addEventListener = function (
        // tslint:disable-next-line:variable-name
        _type, listener) {
            if (!listenersMap.has(this)) {
                throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            var listeners = listenersMap.get(this);
            listeners.push(listener);
        };
        /**
         * Remove "abort" event listener, only support "abort" event.
         *
         * @param {"abort"} _type Only support "abort" event
         * @param {(this: AbortSignalLike, ev: any) => any} listener
         * @memberof AbortSignal
         */
        AbortSignal.prototype.removeEventListener = function (
        // tslint:disable-next-line:variable-name
        _type, listener) {
            if (!listenersMap.has(this)) {
                throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            var listeners = listenersMap.get(this);
            var index = listeners.indexOf(listener);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        };
        /**
          * Dispatches a synthetic event to the AbortSignal.
          */
        AbortSignal.prototype.dispatchEvent = function (event) {
            throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
        };
        return AbortSignal;
    }());
    /**
     * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
     * Will try to trigger abort event for all linked AbortSignal nodes.
     *
     * - If there is a timeout, the timer will be cancelled.
     * - If aborted is true, nothing will happen.
     *
     * @returns
     * @internal
     */
    function abortSignal(signal) {
        if (signal.aborted) {
            return;
        }
        if (signal.onabort) {
            signal.onabort.call(signal);
        }
        var listeners = listenersMap.get(signal);
        if (listeners) {
            listeners.forEach(function (listener) {
                listener.call(signal, { type: "abort" });
            });
        }
        abortedMap.set(signal, true);
    }

    /**
     * This error is thrown when an asynchronous operation has been aborted.
     * Check for this error by testing the `name` that the name property of the
     * error matches `"AbortError"`.
     *
     * @example
     * const controller = new AbortController();
     * controller.abort();
     * try {
     *   doAsyncWork(controller.signal)
     * } catch (e) {
     *   if (e.name === 'AbortError') {
     *     // handle abort error here.
     *   }
     * }
     */
    var AbortError = /** @class */ (function (_super) {
        __extends(AbortError, _super);
        function AbortError(message) {
            var _this = _super.call(this, message) || this;
            _this.name = "AbortError";
            return _this;
        }
        return AbortError;
    }(Error));
    /**
     * An AbortController provides an AbortSignal and the associated controls to signal
     * that an asynchronous operation should be aborted.
     *
     * @example
     * // Abort an operation when another event fires
     * const controller = new AbortController();
     * const signal = controller.signal;
     * doAsyncWork(signal);
     * button.addEventListener('click', () => controller.abort());
     *
     * @example
     * // Share aborter cross multiple operations in 30s
     * // Upload the same data to 2 different data centers at the same time,
     * // abort another when any of them is finished
     * const controller = AbortController.withTimeout(30 * 1000);
     * doAsyncWork(controller.signal).then(controller.abort);
     * doAsyncWork(controller.signal).then(controller.abort);
     *
     * @example
     * // Cascaded aborting
     * // All operations can't take more than 30 seconds
     * const aborter = Aborter.timeout(30 * 1000);
     *
     * // Following 2 operations can't take more than 25 seconds
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     *
     * @export
     * @class AbortController
     * @implements {AbortSignalLike}
     */
    var AbortController = /** @class */ (function () {
        function AbortController(parentSignals) {
            var _this = this;
            this._signal = new AbortSignal();
            if (!parentSignals) {
                return;
            }
            // coerce parentSignals into an array
            if (!Array.isArray(parentSignals)) {
                parentSignals = arguments;
            }
            for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {
                var parentSignal = parentSignals_1[_i];
                // if the parent signal has already had abort() called,
                // then call abort on this signal as well.
                if (parentSignal.aborted) {
                    this.abort();
                }
                else {
                    // when the parent signal aborts, this signal should as well.
                    parentSignal.addEventListener("abort", function () {
                        _this.abort();
                    });
                }
            }
        }
        Object.defineProperty(AbortController.prototype, "signal", {
            /**
             * The AbortSignal associated with this controller that will signal aborted
             * when the abort method is called on this controller.
             *
             * @readonly
             * @type {AbortSignal}
             * @memberof AbortController
             */
            get: function () {
                return this._signal;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Signal that any operations passed this controller's associated abort signal
         * to cancel any remaining work and throw an `AbortError`.
         *
         * @memberof AbortController
         */
        AbortController.prototype.abort = function () {
            abortSignal(this._signal);
        };
        /**
         * Creates a new AbortSignal instance that will abort after the provided ms.
         *
         * @static
         * @params {number} ms Elapsed time in milliseconds to trigger an abort.
         * @returns {AbortSignal}
         */
        AbortController.timeout = function (ms) {
            var signal = new AbortSignal();
            var timer = setTimeout(abortSignal, ms, signal);
            // Prevent the active Timer from keeping the Node.js event loop active.
            if (typeof timer.unref === "function") {
                timer.unref();
            }
            return signal;
        };
        return AbortController;
    }());

    // Copyright (c) Microsoft Corporation.
    var RestError = /** @class */ (function (_super) {
        __extends(RestError, _super);
        function RestError(message, code, statusCode, request, response) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.statusCode = statusCode;
            _this.request = request;
            _this.response = response;
            Object.setPrototypeOf(_this, RestError.prototype);
            return _this;
        }
        RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
        RestError.PARSE_ERROR = "PARSE_ERROR";
        return RestError;
    }(Error));

    // Copyright (c) Microsoft Corporation.
    /**
     * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
     */
    var XhrHttpClient = /** @class */ (function () {
        function XhrHttpClient() {
        }
        XhrHttpClient.prototype.sendRequest = function (request) {
            var xhr = new XMLHttpRequest();
            if (request.proxySettings) {
                throw new Error("HTTP proxy is not supported in browser environment");
            }
            var abortSignal = request.abortSignal;
            if (abortSignal) {
                if (abortSignal.aborted) {
                    return Promise.reject(new AbortError("The operation was aborted."));
                }
                var listener_1 = function () {
                    xhr.abort();
                };
                abortSignal.addEventListener("abort", listener_1);
                xhr.addEventListener("readystatechange", function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        abortSignal.removeEventListener("abort", listener_1);
                    }
                });
            }
            addProgressListener(xhr.upload, request.onUploadProgress);
            addProgressListener(xhr, request.onDownloadProgress);
            if (request.formData) {
                var formData = request.formData;
                var requestForm_1 = new FormData();
                var appendFormValue = function (key, value) {
                    if (value && value.hasOwnProperty("value") && value.hasOwnProperty("options")) {
                        requestForm_1.append(key, value.value, value.options);
                    }
                    else {
                        requestForm_1.append(key, value);
                    }
                };
                for (var _i = 0, _a = Object.keys(formData); _i < _a.length; _i++) {
                    var formKey = _a[_i];
                    var formValue = formData[formKey];
                    if (Array.isArray(formValue)) {
                        for (var j = 0; j < formValue.length; j++) {
                            appendFormValue(formKey, formValue[j]);
                        }
                    }
                    else {
                        appendFormValue(formKey, formValue);
                    }
                }
                request.body = requestForm_1;
                request.formData = undefined;
                var contentType = request.headers.get("Content-Type");
                if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
                    // browser will automatically apply a suitable content-type header
                    request.headers.remove("Content-Type");
                }
            }
            xhr.open(request.method, request.url);
            xhr.timeout = request.timeout;
            xhr.withCredentials = request.withCredentials;
            for (var _b = 0, _c = request.headers.headersArray(); _b < _c.length; _b++) {
                var header = _c[_b];
                xhr.setRequestHeader(header.name, header.value);
            }
            xhr.responseType = request.streamResponseBody ? "blob" : "text";
            // tslint:disable-next-line:no-null-keyword
            xhr.send(request.body === undefined ? null : request.body);
            if (request.streamResponseBody) {
                return new Promise(function (resolve, reject) {
                    xhr.addEventListener("readystatechange", function () {
                        // Resolve as soon as headers are loaded
                        if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
                            var blobBody = new Promise(function (resolve, reject) {
                                xhr.addEventListener("load", function () {
                                    resolve(xhr.response);
                                });
                                rejectOnTerminalEvent(request, xhr, reject);
                            });
                            resolve({
                                request: request,
                                status: xhr.status,
                                headers: parseHeaders(xhr),
                                blobBody: blobBody
                            });
                        }
                    });
                    rejectOnTerminalEvent(request, xhr, reject);
                });
            }
            else {
                return new Promise(function (resolve, reject) {
                    xhr.addEventListener("load", function () {
                        return resolve({
                            request: request,
                            status: xhr.status,
                            headers: parseHeaders(xhr),
                            bodyAsText: xhr.responseText
                        });
                    });
                    rejectOnTerminalEvent(request, xhr, reject);
                });
            }
        };
        return XhrHttpClient;
    }());
    function addProgressListener(xhr, listener) {
        if (listener) {
            xhr.addEventListener("progress", function (rawEvent) {
                return listener({
                    loadedBytes: rawEvent.loaded
                });
            });
        }
    }
    // exported locally for testing
    function parseHeaders(xhr) {
        var responseHeaders = new HttpHeaders();
        var headerLines = xhr
            .getAllResponseHeaders()
            .trim()
            .split(/[\r\n]+/);
        for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {
            var line = headerLines_1[_i];
            var index = line.indexOf(":");
            var headerName = line.slice(0, index);
            var headerValue = line.slice(index + 2);
            responseHeaders.set(headerName, headerValue);
        }
        return responseHeaders;
    }
    function rejectOnTerminalEvent(request, xhr, reject) {
        xhr.addEventListener("error", function () {
            return reject(new RestError("Failed to send request to " + request.url, RestError.REQUEST_SEND_ERROR, undefined, request));
        });
        xhr.addEventListener("abort", function () { return reject(new AbortError("The operation was aborted.")); });
        xhr.addEventListener("timeout", function () {
            return reject(new RestError("timeout of " + xhr.timeout + "ms exceeded", RestError.REQUEST_SEND_ERROR, undefined, request));
        });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * The different levels of logs that can be used with the HttpPipelineLogger.
     */
    var HttpPipelineLogLevel;
    (function (HttpPipelineLogLevel) {
        /**
         * A log level that indicates that no logs will be logged.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
        /**
         * An error log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
        /**
         * A warning log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
        /**
         * An information log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
    })(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * Tests an object to determine whether it implements TokenCredential.
     *
     * @param credential The assumed TokenCredential to be tested.
     */
    function isTokenCredential(credential) {
        // Check for an object with a 'getToken' function and possibly with
        // a 'signRequest' function.  We do this check to make sure that
        // a ServiceClientCredentials implementor (like TokenClientCredentials
        // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
        // it doesn't actually implement TokenCredential also.
        return (credential &&
            typeof credential.getToken === "function" &&
            (credential.signRequest === undefined || credential.getToken.length > 0));
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * A class that handles the query portion of a URLBuilder.
     */
    var URLQuery = /** @class */ (function () {
        function URLQuery() {
            this._rawQuery = {};
        }
        /**
         * Get whether or not there any query parameters in this URLQuery.
         */
        URLQuery.prototype.any = function () {
            return Object.keys(this._rawQuery).length > 0;
        };
        /**
         * Get the keys of the query string.
         */
        URLQuery.prototype.keys = function () {
            return Object.keys(this._rawQuery);
        };
        /**
         * Set a query parameter with the provided name and value. If the parameterValue is undefined or
         * empty, then this will attempt to remove an existing query parameter with the provided
         * parameterName.
         */
        URLQuery.prototype.set = function (parameterName, parameterValue) {
            if (parameterName) {
                if (parameterValue != undefined) {
                    var newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();
                    this._rawQuery[parameterName] = newValue;
                }
                else {
                    delete this._rawQuery[parameterName];
                }
            }
        };
        /**
         * Get the value of the query parameter with the provided name. If no parameter exists with the
         * provided parameter name, then undefined will be returned.
         */
        URLQuery.prototype.get = function (parameterName) {
            return parameterName ? this._rawQuery[parameterName] : undefined;
        };
        /**
         * Get the string representation of this query. The return value will not start with a "?".
         */
        URLQuery.prototype.toString = function () {
            var result = "";
            for (var parameterName in this._rawQuery) {
                if (result) {
                    result += "&";
                }
                var parameterValue = this._rawQuery[parameterName];
                if (Array.isArray(parameterValue)) {
                    var parameterStrings = [];
                    for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {
                        var parameterValueElement = parameterValue_1[_i];
                        parameterStrings.push(parameterName + "=" + parameterValueElement);
                    }
                    result += parameterStrings.join("&");
                }
                else {
                    result += parameterName + "=" + parameterValue;
                }
            }
            return result;
        };
        /**
         * Parse a URLQuery from the provided text.
         */
        URLQuery.parse = function (text) {
            var result = new URLQuery();
            if (text) {
                if (text.startsWith("?")) {
                    text = text.substring(1);
                }
                var currentState = "ParameterName";
                var parameterName = "";
                var parameterValue = "";
                for (var i = 0; i < text.length; ++i) {
                    var currentCharacter = text[i];
                    switch (currentState) {
                        case "ParameterName":
                            switch (currentCharacter) {
                                case "=":
                                    currentState = "ParameterValue";
                                    break;
                                case "&":
                                    parameterName = "";
                                    parameterValue = "";
                                    break;
                                default:
                                    parameterName += currentCharacter;
                                    break;
                            }
                            break;
                        case "ParameterValue":
                            switch (currentCharacter) {
                                case "=":
                                    parameterName = "";
                                    parameterValue = "";
                                    currentState = "Invalid";
                                    break;
                                case "&":
                                    result.set(parameterName, parameterValue);
                                    parameterName = "";
                                    parameterValue = "";
                                    currentState = "ParameterName";
                                    break;
                                default:
                                    parameterValue += currentCharacter;
                                    break;
                            }
                            break;
                        case "Invalid":
                            if (currentCharacter === "&") {
                                currentState = "ParameterName";
                            }
                            break;
                        default:
                            throw new Error("Unrecognized URLQuery parse state: " + currentState);
                    }
                }
                if (currentState === "ParameterValue") {
                    result.set(parameterName, parameterValue);
                }
            }
            return result;
        };
        return URLQuery;
    }());
    /**
     * A class that handles creating, modifying, and parsing URLs.
     */
    var URLBuilder = /** @class */ (function () {
        function URLBuilder() {
        }
        /**
         * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
         * (such as a host, port, path, or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setScheme = function (scheme) {
            if (!scheme) {
                this._scheme = undefined;
            }
            else {
                this.set(scheme, "SCHEME");
            }
        };
        /**
         * Get the scheme that has been set in this URL.
         */
        URLBuilder.prototype.getScheme = function () {
            return this._scheme;
        };
        /**
         * Set the host for this URL. If the provided host contains other parts of a URL (such as a
         * port, path, or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setHost = function (host) {
            if (!host) {
                this._host = undefined;
            }
            else {
                this.set(host, "SCHEME_OR_HOST");
            }
        };
        /**
         * Get the host that has been set in this URL.
         */
        URLBuilder.prototype.getHost = function () {
            return this._host;
        };
        /**
         * Set the port for this URL. If the provided port contains other parts of a URL (such as a
         * path or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setPort = function (port) {
            if (port == undefined || port === "") {
                this._port = undefined;
            }
            else {
                this.set(port.toString(), "PORT");
            }
        };
        /**
         * Get the port that has been set in this URL.
         */
        URLBuilder.prototype.getPort = function () {
            return this._port;
        };
        /**
         * Set the path for this URL. If the provided path contains a query, then it will be added to
         * this URL as well.
         */
        URLBuilder.prototype.setPath = function (path) {
            if (!path) {
                this._path = undefined;
            }
            else {
                if (path.indexOf("://") !== -1) {
                    this.set(path, "SCHEME");
                }
                else {
                    this.set(path, "PATH");
                }
            }
        };
        /**
         * Append the provided path to this URL's existing path. If the provided path contains a query,
         * then it will be added to this URL as well.
         */
        URLBuilder.prototype.appendPath = function (path) {
            if (path) {
                var currentPath = this.getPath();
                if (currentPath) {
                    if (!currentPath.endsWith("/")) {
                        currentPath += "/";
                    }
                    if (path.startsWith("/")) {
                        path = path.substring(1);
                    }
                    path = currentPath + path;
                }
                this.set(path, "PATH");
            }
        };
        /**
         * Get the path that has been set in this URL.
         */
        URLBuilder.prototype.getPath = function () {
            return this._path;
        };
        /**
         * Set the query in this URL.
         */
        URLBuilder.prototype.setQuery = function (query) {
            if (!query) {
                this._query = undefined;
            }
            else {
                this._query = URLQuery.parse(query);
            }
        };
        /**
         * Set a query parameter with the provided name and value in this URL's query. If the provided
         * query parameter value is undefined or empty, then the query parameter will be removed if it
         * existed.
         */
        URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {
            if (queryParameterName) {
                if (!this._query) {
                    this._query = new URLQuery();
                }
                this._query.set(queryParameterName, queryParameterValue);
            }
        };
        /**
         * Get the value of the query parameter with the provided query parameter name. If no query
         * parameter exists with the provided name, then undefined will be returned.
         */
        URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {
            return this._query ? this._query.get(queryParameterName) : undefined;
        };
        /**
         * Get the query in this URL.
         */
        URLBuilder.prototype.getQuery = function () {
            return this._query ? this._query.toString() : undefined;
        };
        /**
         * Set the parts of this URL by parsing the provided text using the provided startState.
         */
        URLBuilder.prototype.set = function (text, startState) {
            var tokenizer = new URLTokenizer(text, startState);
            while (tokenizer.next()) {
                var token = tokenizer.current();
                if (token) {
                    switch (token.type) {
                        case "SCHEME":
                            this._scheme = token.text || undefined;
                            break;
                        case "HOST":
                            this._host = token.text || undefined;
                            break;
                        case "PORT":
                            this._port = token.text || undefined;
                            break;
                        case "PATH":
                            var tokenPath = token.text || undefined;
                            if (!this._path || this._path === "/" || tokenPath !== "/") {
                                this._path = tokenPath;
                            }
                            break;
                        case "QUERY":
                            this._query = URLQuery.parse(token.text);
                            break;
                        default:
                            throw new Error("Unrecognized URLTokenType: " + token.type);
                    }
                }
            }
        };
        URLBuilder.prototype.toString = function () {
            var result = "";
            if (this._scheme) {
                result += this._scheme + "://";
            }
            if (this._host) {
                result += this._host;
            }
            if (this._port) {
                result += ":" + this._port;
            }
            if (this._path) {
                if (!this._path.startsWith("/")) {
                    result += "/";
                }
                result += this._path;
            }
            if (this._query && this._query.any()) {
                result += "?" + this._query.toString();
            }
            return result;
        };
        /**
         * If the provided searchValue is found in this URLBuilder, then replace it with the provided
         * replaceValue.
         */
        URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {
            if (searchValue) {
                this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));
                this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));
                this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));
                this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));
                this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));
            }
        };
        URLBuilder.parse = function (text) {
            var result = new URLBuilder();
            result.set(text, "SCHEME_OR_HOST");
            return result;
        };
        return URLBuilder;
    }());
    var URLToken = /** @class */ (function () {
        function URLToken(text, type) {
            this.text = text;
            this.type = type;
        }
        URLToken.scheme = function (text) {
            return new URLToken(text, "SCHEME");
        };
        URLToken.host = function (text) {
            return new URLToken(text, "HOST");
        };
        URLToken.port = function (text) {
            return new URLToken(text, "PORT");
        };
        URLToken.path = function (text) {
            return new URLToken(text, "PATH");
        };
        URLToken.query = function (text) {
            return new URLToken(text, "QUERY");
        };
        return URLToken;
    }());
    /**
     * Get whether or not the provided character (single character string) is an alphanumeric (letter or
     * digit) character.
     */
    function isAlphaNumericCharacter(character) {
        var characterCode = character.charCodeAt(0);
        return ((48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||
            (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||
            (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */);
    }
    /**
     * A class that tokenizes URL strings.
     */
    var URLTokenizer = /** @class */ (function () {
        function URLTokenizer(_text, state) {
            this._text = _text;
            this._textLength = _text ? _text.length : 0;
            this._currentState = state != undefined ? state : "SCHEME_OR_HOST";
            this._currentIndex = 0;
        }
        /**
         * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
         * hasn't started or has finished tokenizing.
         */
        URLTokenizer.prototype.current = function () {
            return this._currentToken;
        };
        /**
         * Advance to the next URLToken and return whether or not a URLToken was found.
         */
        URLTokenizer.prototype.next = function () {
            if (!hasCurrentCharacter(this)) {
                this._currentToken = undefined;
            }
            else {
                switch (this._currentState) {
                    case "SCHEME":
                        nextScheme(this);
                        break;
                    case "SCHEME_OR_HOST":
                        nextSchemeOrHost(this);
                        break;
                    case "HOST":
                        nextHost(this);
                        break;
                    case "PORT":
                        nextPort(this);
                        break;
                    case "PATH":
                        nextPath(this);
                        break;
                    case "QUERY":
                        nextQuery(this);
                        break;
                    default:
                        throw new Error("Unrecognized URLTokenizerState: " + this._currentState);
                }
            }
            return !!this._currentToken;
        };
        return URLTokenizer;
    }());
    /**
     * Read the remaining characters from this Tokenizer's character stream.
     */
    function readRemaining(tokenizer) {
        var result = "";
        if (tokenizer._currentIndex < tokenizer._textLength) {
            result = tokenizer._text.substring(tokenizer._currentIndex);
            tokenizer._currentIndex = tokenizer._textLength;
        }
        return result;
    }
    /**
     * Whether or not this URLTokenizer has a current character.
     */
    function hasCurrentCharacter(tokenizer) {
        return tokenizer._currentIndex < tokenizer._textLength;
    }
    /**
     * Get the character in the text string at the current index.
     */
    function getCurrentCharacter(tokenizer) {
        return tokenizer._text[tokenizer._currentIndex];
    }
    /**
     * Advance to the character in text that is "step" characters ahead. If no step value is provided,
     * then step will default to 1.
     */
    function nextCharacter(tokenizer, step) {
        if (hasCurrentCharacter(tokenizer)) {
            if (!step) {
                step = 1;
            }
            tokenizer._currentIndex += step;
        }
    }
    /**
     * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
     * Tokenizer's stream of characters.
     */
    function peekCharacters(tokenizer, charactersToPeek) {
        var endIndex = tokenizer._currentIndex + charactersToPeek;
        if (tokenizer._textLength < endIndex) {
            endIndex = tokenizer._textLength;
        }
        return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
    }
    /**
     * Read characters from this Tokenizer until the end of the stream or until the provided condition
     * is false when provided the current character.
     */
    function readWhile(tokenizer, condition) {
        var result = "";
        while (hasCurrentCharacter(tokenizer)) {
            var currentCharacter = getCurrentCharacter(tokenizer);
            if (!condition(currentCharacter)) {
                break;
            }
            else {
                result += currentCharacter;
                nextCharacter(tokenizer);
            }
        }
        return result;
    }
    /**
     * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
     * character stream is reached.
     */
    function readWhileLetterOrDigit(tokenizer) {
        return readWhile(tokenizer, function (character) { return isAlphaNumericCharacter(character); });
    }
    /**
     * Read characters from this Tokenizer until one of the provided terminating characters is read or
     * the end of the character stream is reached.
     */
    function readUntilCharacter(tokenizer) {
        var terminatingCharacters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            terminatingCharacters[_i - 1] = arguments[_i];
        }
        return readWhile(tokenizer, function (character) { return terminatingCharacters.indexOf(character) === -1; });
    }
    function nextScheme(tokenizer) {
        var scheme = readWhileLetterOrDigit(tokenizer);
        tokenizer._currentToken = URLToken.scheme(scheme);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else {
            tokenizer._currentState = "HOST";
        }
    }
    function nextSchemeOrHost(tokenizer) {
        var schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === ":") {
            if (peekCharacters(tokenizer, 3) === "://") {
                tokenizer._currentToken = URLToken.scheme(schemeOrHost);
                tokenizer._currentState = "HOST";
            }
            else {
                tokenizer._currentToken = URLToken.host(schemeOrHost);
                tokenizer._currentState = "PORT";
            }
        }
        else {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            if (getCurrentCharacter(tokenizer) === "/") {
                tokenizer._currentState = "PATH";
            }
            else {
                tokenizer._currentState = "QUERY";
            }
        }
    }
    function nextHost(tokenizer) {
        if (peekCharacters(tokenizer, 3) === "://") {
            nextCharacter(tokenizer, 3);
        }
        var host = readUntilCharacter(tokenizer, ":", "/", "?");
        tokenizer._currentToken = URLToken.host(host);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === ":") {
            tokenizer._currentState = "PORT";
        }
        else if (getCurrentCharacter(tokenizer) === "/") {
            tokenizer._currentState = "PATH";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextPort(tokenizer) {
        if (getCurrentCharacter(tokenizer) === ":") {
            nextCharacter(tokenizer);
        }
        var port = readUntilCharacter(tokenizer, "/", "?");
        tokenizer._currentToken = URLToken.port(port);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === "/") {
            tokenizer._currentState = "PATH";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextPath(tokenizer) {
        var path = readUntilCharacter(tokenizer, "?");
        tokenizer._currentToken = URLToken.path(path);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextQuery(tokenizer) {
        if (getCurrentCharacter(tokenizer) === "?") {
            nextCharacter(tokenizer);
        }
        var query = readRemaining(tokenizer);
        tokenizer._currentToken = URLToken.query(query);
        tokenizer._currentState = "DONE";
    }

    // Copyright (c) Microsoft Corporation.
    var BaseRequestPolicy = /** @class */ (function () {
        function BaseRequestPolicy(_nextPolicy, _options) {
            this._nextPolicy = _nextPolicy;
            this._options = _options;
        }
        /**
         * Get whether or not a log with the provided log level should be logged.
         * @param logLevel The log level of the log that will be logged.
         * @returns Whether or not a log with the provided log level should be logged.
         */
        BaseRequestPolicy.prototype.shouldLog = function (logLevel) {
            return this._options.shouldLog(logLevel);
        };
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meat the logger's threshold, then nothing will be logged.
         * @param logLevel The log level of this log.
         * @param message The message of this log.
         */
        BaseRequestPolicy.prototype.log = function (logLevel, message) {
            this._options.log(logLevel, message);
        };
        return BaseRequestPolicy;
    }());
    /**
     * Optional properties that can be used when creating a RequestPolicy.
     */
    var RequestPolicyOptions = /** @class */ (function () {
        function RequestPolicyOptions(_logger) {
            this._logger = _logger;
        }
        /**
         * Get whether or not a log with the provided log level should be logged.
         * @param logLevel The log level of the log that will be logged.
         * @returns Whether or not a log with the provided log level should be logged.
         */
        RequestPolicyOptions.prototype.shouldLog = function (logLevel) {
            return (!!this._logger &&
                logLevel !== HttpPipelineLogLevel.OFF &&
                logLevel <= this._logger.minimumLogLevel);
        };
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meat the logger's threshold, then nothing will be logged.
         * @param logLevel The log level of this log.
         * @param message The message of this log.
         */
        RequestPolicyOptions.prototype.log = function (logLevel, message) {
            if (this._logger && this.shouldLog(logLevel)) {
                this._logger.log(logLevel, message);
            }
        };
        return RequestPolicyOptions;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var logFunction = console.debug || console.log;
    function log() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        logFunction.apply(void 0, __spread(args));
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var debugEnvVariable = (typeof process !== "undefined" && process.env && process.env.DEBUG) || undefined;
    var enabledString;
    var enabledNamespaces = [];
    var skippedNamespaces = [];
    var debuggers = [];
    if (debugEnvVariable) {
        enable(debugEnvVariable);
    }
    function enable(namespaces) {
        var e_1, _a, e_2, _b;
        enabledString = namespaces;
        enabledNamespaces = [];
        skippedNamespaces = [];
        var wildcard = /\*/g;
        var namespaceList = namespaces.split(",").map(function (ns) { return ns.trim().replace(wildcard, ".*?"); });
        try {
            for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {
                var ns = namespaceList_1_1.value;
                if (ns.startsWith("-")) {
                    skippedNamespaces.push(new RegExp("^" + ns.substr(1) + "$"));
                }
                else {
                    enabledNamespaces.push(new RegExp("^" + ns + "$"));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {
                var instance = debuggers_1_1.value;
                instance.enabled = enabled(instance.namespace);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    function enabled(namespace) {
        var e_3, _a, e_4, _b;
        if (namespace.endsWith("*")) {
            return true;
        }
        try {
            for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {
                var skipped = skippedNamespaces_1_1.value;
                if (skipped.test(namespace)) {
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {
                var enabled_1 = enabledNamespaces_1_1.value;
                if (enabled_1.test(namespace)) {
                    return true;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return false;
    }
    function disable() {
        var result = enabledString || "";
        enable("");
        return result;
    }
    function createDebugger(namespace) {
        function debug() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!newDebugger.enabled) {
                return;
            }
            if (args.length > 0) {
                args[0] = namespace + " " + args[0];
            }
            newDebugger.log.apply(newDebugger, __spread(args));
        }
        var newDebugger = Object.assign(debug, {
            enabled: enabled(namespace),
            destroy: destroy,
            log: debugObj.log,
            namespace: namespace,
            extend: extend
        });
        debuggers.push(newDebugger);
        return newDebugger;
    }
    function destroy() {
        var index = debuggers.indexOf(this);
        if (index >= 0) {
            debuggers.splice(index, 1);
            return true;
        }
        return false;
    }
    function extend(namespace) {
        var newDebugger = createDebugger(this.namespace + ":" + namespace);
        newDebugger.log = this.log;
        return newDebugger;
    }
    var debugObj = Object.assign(function (namespace) {
        return createDebugger(namespace);
    }, {
        enable: enable,
        enabled: enabled,
        disable: disable,
        log: log
    });

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var registeredLoggers = new Set();
    var logLevelFromEnv = (typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;
    var azureLogLevel;
    /**
     * The AzureLogger provides a mechanism for overriding where logs are output to.
     * By default, logs are sent to stderr.
     * Override the `log` method to redirect logs to another location.
     */
    var AzureLogger = debugObj("azure");
    AzureLogger.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        debugObj.log.apply(debugObj, __spread(args));
    };
    var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
    if (logLevelFromEnv) {
        // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
        if (isAzureLogLevel(logLevelFromEnv)) {
            setLogLevel(logLevelFromEnv);
        }
        else {
            console.error("AZURE_LOG_LEVEL set to unknown log level '" + logLevelFromEnv + "'; logging is not enabled. Acceptable values: " + AZURE_LOG_LEVELS.join(", ") + ".");
        }
    }
    /**
     * Immediately enables logging at the specified log level.
     * @param level The log level to enable for logging.
     * Options from most verbose to least verbose are:
     * - verbose
     * - info
     * - warning
     * - error
     */
    function setLogLevel(level) {
        var e_1, _a;
        if (level && !isAzureLogLevel(level)) {
            throw new Error("Unknown log level '" + level + "'. Acceptable values: " + AZURE_LOG_LEVELS.join(","));
        }
        azureLogLevel = level;
        var enabledNamespaces = [];
        try {
            for (var registeredLoggers_1 = __values(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {
                var logger = registeredLoggers_1_1.value;
                if (shouldEnable(logger)) {
                    enabledNamespaces.push(logger.namespace);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        debugObj.enable(enabledNamespaces.join(","));
    }
    var levelMap = {
        verbose: 400,
        info: 300,
        warning: 200,
        error: 100
    };
    /**
     * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
     * @param namespace The name of the SDK package.
     * @ignore
     */
    function createClientLogger(namespace) {
        var clientRootLogger = AzureLogger.extend(namespace);
        patchLogMethod(AzureLogger, clientRootLogger);
        return {
            error: createLogger(clientRootLogger, "error"),
            warning: createLogger(clientRootLogger, "warning"),
            info: createLogger(clientRootLogger, "info"),
            verbose: createLogger(clientRootLogger, "verbose")
        };
    }
    function patchLogMethod(parent, child) {
        child.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            parent.log.apply(parent, __spread(args));
        };
    }
    function createLogger(parent, level) {
        var logger = Object.assign(parent.extend(level), {
            level: level
        });
        patchLogMethod(parent, logger);
        if (shouldEnable(logger)) {
            var enabledNamespaces = debugObj.disable();
            debugObj.enable(enabledNamespaces + "," + logger.namespace);
        }
        registeredLoggers.add(logger);
        return logger;
    }
    function shouldEnable(logger) {
        if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {
            return true;
        }
        else {
            return false;
        }
    }
    function isAzureLogLevel(logLevel) {
        return AZURE_LOG_LEVELS.includes(logLevel);
    }

    var logger = createClientLogger("core-http");

    // Copyright (c) Microsoft Corporation.
    var RedactedString = "REDACTED";
    var defaultAllowedHeaderNames = [
        "x-ms-client-request-id",
        "x-ms-return-client-request-id",
        "traceparent",
        "Accept",
        "Cache-Control",
        "Connection",
        "Content-Length",
        "Content-Type",
        "Date",
        "ETag",
        "Expires",
        "If-Match",
        "If-Modified-Since",
        "If-None-Match",
        "If-Unmodified-Since",
        "Last-Modified",
        "Pragma",
        "Request-Id",
        "Retry-After",
        "Server",
        "Transfer-Encoding",
        "User-Agent"
    ];
    var defaultAllowedQueryParameters = [
        "api-version"
    ];
    function logPolicy(logger$1, logOptions) {
        if (logger$1 === void 0) { logger$1 = logger.info.bind(logger); }
        if (logOptions === void 0) { logOptions = {}; }
        return {
            create: function (nextPolicy, options) {
                return new LogPolicy(nextPolicy, options, logger$1, logOptions);
            }
        };
    }
    var LogPolicy = /** @class */ (function (_super) {
        __extends(LogPolicy, _super);
        function LogPolicy(nextPolicy, options, logger, _a) {
            if (logger === void 0) { logger = console.log; }
            var _b = _a === void 0 ? {} : _a, _c = _b.allowedHeaderNames, allowedHeaderNames = _c === void 0 ? [] : _c, _d = _b.allowedQueryParameters, allowedQueryParameters = _d === void 0 ? [] : _d;
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.logger = logger;
            allowedHeaderNames =
                allowedHeaderNames && allowedHeaderNames instanceof Array
                    ? defaultAllowedHeaderNames.concat(allowedHeaderNames)
                    : defaultAllowedHeaderNames;
            allowedQueryParameters =
                allowedQueryParameters && allowedQueryParameters instanceof Array
                    ? defaultAllowedQueryParameters.concat(allowedQueryParameters)
                    : defaultAllowedQueryParameters;
            _this.allowedHeaderNames = new Set(allowedHeaderNames);
            _this.allowedQueryParameters = new Set(allowedQueryParameters);
            return _this;
        }
        LogPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            if (!logger.info.enabled)
                return this._nextPolicy.sendRequest(request);
            this.logRequest(request);
            return this._nextPolicy.sendRequest(request).then(function (response) { return _this.logResponse(response); });
        };
        LogPolicy.prototype.logRequest = function (request) {
            this.logger("Request: " + JSON.stringify(request, this.sanitize.bind(this), 2));
        };
        LogPolicy.prototype.sanitize = function (key, value) {
            if (key === "_headersMap") {
                return this.sanitizeHeaders(key, value);
            }
            else if (key === "url") {
                return this.sanitizeUrl(value);
            }
            else if (key === "query") {
                return this.sanitizeQuery(value);
            }
            else if (key === "body") {
                // Don't log the request body
                return undefined;
            }
            else if (key === "response") {
                // Don't log response again
                return undefined;
            }
            else if (key === "operationSpec") {
                // When using sendOperationRequest, the request carries a massive
                // field with the autorest spec. No need to log it.
                return undefined;
            }
            return value;
        };
        LogPolicy.prototype.sanitizeHeaders = function (_, value) {
            return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) { return v[k].value; });
        };
        LogPolicy.prototype.sanitizeQuery = function (value) {
            return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) { return v[k]; });
        };
        LogPolicy.prototype.sanitizeObject = function (value, allowedKeys, accessor) {
            if (typeof value !== "object" || value === null) {
                return value;
            }
            var sanitized = {};
            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                var k = _a[_i];
                if (allowedKeys.has(k)) {
                    sanitized[k] = accessor(value, k);
                }
                else {
                    sanitized[k] = RedactedString;
                }
            }
            return sanitized;
        };
        LogPolicy.prototype.sanitizeUrl = function (value) {
            if (typeof value !== "string" || value === null) {
                return value;
            }
            var urlBuilder = URLBuilder.parse(value);
            var queryString = urlBuilder.getQuery();
            if (!queryString) {
                return value;
            }
            var query = URLQuery.parse(queryString);
            for (var _i = 0, _a = query.keys(); _i < _a.length; _i++) {
                var k = _a[_i];
                if (!this.allowedQueryParameters.has(k)) {
                    query.set(k, RedactedString);
                }
            }
            urlBuilder.setQuery(query.toString());
            return urlBuilder.toString();
        };
        LogPolicy.prototype.logResponse = function (response) {
            this.logger("Response status code: " + response.status);
            this.logger("Headers: " + JSON.stringify(response.headers, this.sanitize.bind(this), 2));
            return response;
        };
        return LogPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * Get the path to this parameter's value as a dotted string (a.b.c).
     * @param parameter The parameter to get the path string for.
     * @returns The path to this parameter's value as a dotted string.
     */
    function getPathStringFromParameter(parameter) {
        return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
    }
    function getPathStringFromParameterPath(parameterPath, mapper) {
        var result;
        if (typeof parameterPath === "string") {
            result = parameterPath;
        }
        else if (Array.isArray(parameterPath)) {
            result = parameterPath.join(".");
        }
        else {
            result = mapper.serializedName;
        }
        return result;
    }

    // Copyright (c) Microsoft Corporation.
    function isStreamOperation(operationSpec) {
        var result = false;
        for (var statusCode in operationSpec.responses) {
            var operationResponse = operationSpec.responses[statusCode];
            if (operationResponse.bodyMapper &&
                operationResponse.bodyMapper.type.name === MapperType.Stream) {
                result = true;
                break;
            }
        }
        return result;
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    // tslint:disable-next-line:no-null-keyword
    var doc = document.implementation.createDocument(null, null, null);
    var parser = new DOMParser();
    function parseXML(str, opts) {
        try {
            var dom = parser.parseFromString(str, "application/xml");
            throwIfError(dom);
            var obj = void 0;
            if (opts && opts.includeRoot) {
                obj = domToObject(dom);
            }
            else {
                obj = domToObject(dom.childNodes[0]);
            }
            return Promise.resolve(obj);
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    var errorNS = "";
    try {
        errorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0]
            .namespaceURI;
    }
    catch (ignored) {
        // Most browsers will return a document containing <parsererror>, but IE will throw.
    }
    function throwIfError(dom) {
        if (errorNS) {
            var parserErrors = dom.getElementsByTagNameNS(errorNS, "parsererror");
            if (parserErrors.length) {
                throw new Error(parserErrors.item(0).innerHTML);
            }
        }
    }
    function isElement(node) {
        return !!node.attributes;
    }
    /**
     * Get the Element-typed version of the provided Node if the provided node is an element with
     * attributes. If it isn't, then undefined is returned.
     */
    function asElementWithAttributes(node) {
        return isElement(node) && node.hasAttributes() ? node : undefined;
    }
    function domToObject(node) {
        var result = {};
        var childNodeCount = node.childNodes.length;
        var firstChildNode = node.childNodes[0];
        var onlyChildTextValue = (firstChildNode &&
            childNodeCount === 1 &&
            firstChildNode.nodeType === Node.TEXT_NODE &&
            firstChildNode.nodeValue) ||
            undefined;
        var elementWithAttributes = asElementWithAttributes(node);
        if (elementWithAttributes) {
            result["$"] = {};
            for (var i = 0; i < elementWithAttributes.attributes.length; i++) {
                var attr = elementWithAttributes.attributes[i];
                result["$"][attr.nodeName] = attr.nodeValue;
            }
            if (onlyChildTextValue) {
                result["_"] = onlyChildTextValue;
            }
        }
        else if (childNodeCount === 0) {
            result = "";
        }
        else if (onlyChildTextValue) {
            result = onlyChildTextValue;
        }
        if (!onlyChildTextValue) {
            for (var i = 0; i < childNodeCount; i++) {
                var child = node.childNodes[i];
                // Ignore leading/trailing whitespace nodes
                if (child.nodeType !== Node.TEXT_NODE) {
                    var childObject = domToObject(child);
                    if (!result[child.nodeName]) {
                        result[child.nodeName] = childObject;
                    }
                    else if (Array.isArray(result[child.nodeName])) {
                        result[child.nodeName].push(childObject);
                    }
                    else {
                        result[child.nodeName] = [result[child.nodeName], childObject];
                    }
                }
            }
        }
        return result;
    }
    var serializer = new XMLSerializer();
    function stringifyXML(content, opts) {
        var rootName = (opts && opts.rootName) || "root";
        var dom = buildNode(content, rootName)[0];
        return ('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom));
    }
    function buildAttributes(attrs) {
        var result = [];
        for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
            var key = _a[_i];
            var attr = doc.createAttribute(key);
            attr.value = attrs[key].toString();
            result.push(attr);
        }
        return result;
    }
    function buildNode(obj, elementName) {
        if (obj == undefined ||
            typeof obj === "string" ||
            typeof obj === "number" ||
            typeof obj === "boolean") {
            var elem = doc.createElement(elementName);
            elem.textContent = obj == undefined ? "" : obj.toString();
            return [elem];
        }
        else if (Array.isArray(obj)) {
            var result = [];
            for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
                var arrayElem = obj_1[_i];
                for (var _a = 0, _b = buildNode(arrayElem, elementName); _a < _b.length; _a++) {
                    var child = _b[_a];
                    result.push(child);
                }
            }
            return result;
        }
        else if (typeof obj === "object") {
            var elem = doc.createElement(elementName);
            for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {
                var key = _d[_c];
                if (key === "$") {
                    for (var _e = 0, _f = buildAttributes(obj[key]); _e < _f.length; _e++) {
                        var attr = _f[_e];
                        elem.attributes.setNamedItem(attr);
                    }
                }
                else if (key === "_") {
                    elem.textContent = obj[key].toString();
                }
                else {
                    for (var _g = 0, _h = buildNode(obj[key], key); _g < _h.length; _g++) {
                        var child = _h[_g];
                        elem.appendChild(child);
                    }
                }
            }
            return [elem];
        }
        else {
            throw new Error("Illegal value passed to buildObject: " + obj);
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
     * pass through the HTTP pipeline.
     */
    function deserializationPolicy(deserializationContentTypes) {
        return {
            create: function (nextPolicy, options) {
                return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);
            }
        };
    }
    var defaultJsonContentTypes = ["application/json", "text/json", "text/plain"];
    var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
    /**
     * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
     * HTTP pipeline.
     */
    var DeserializationPolicy = /** @class */ (function (_super) {
        __extends(DeserializationPolicy, _super);
        function DeserializationPolicy(nextPolicy, deserializationContentTypes, options) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.jsonContentTypes =
                (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;
            _this.xmlContentTypes =
                (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;
            return _this;
        }
        DeserializationPolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._nextPolicy
                            .sendRequest(request)
                            .then(function (response) {
                            return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response);
                        })];
                });
            });
        };
        return DeserializationPolicy;
    }(BaseRequestPolicy));
    function getOperationResponse(parsedResponse) {
        var result;
        var request = parsedResponse.request;
        var operationSpec = request.operationSpec;
        if (operationSpec) {
            var operationResponseGetter = request.operationResponseGetter;
            if (!operationResponseGetter) {
                result = operationSpec.responses[parsedResponse.status];
            }
            else {
                result = operationResponseGetter(operationSpec, parsedResponse);
            }
        }
        return result;
    }
    function shouldDeserializeResponse(parsedResponse) {
        var shouldDeserialize = parsedResponse.request.shouldDeserialize;
        var result;
        if (shouldDeserialize === undefined) {
            result = true;
        }
        else if (typeof shouldDeserialize === "boolean") {
            result = shouldDeserialize;
        }
        else {
            result = shouldDeserialize(parsedResponse);
        }
        return result;
    }
    function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {
        return parse$1(jsonContentTypes, xmlContentTypes, response).then(function (parsedResponse) {
            var shouldDeserialize = shouldDeserializeResponse(parsedResponse);
            if (shouldDeserialize) {
                var operationSpec = parsedResponse.request.operationSpec;
                if (operationSpec && operationSpec.responses) {
                    var statusCode = parsedResponse.status;
                    var expectedStatusCodes = Object.keys(operationSpec.responses);
                    var hasNoExpectedStatusCodes = expectedStatusCodes.length === 0 ||
                        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default");
                    var responseSpec = getOperationResponse(parsedResponse);
                    var isExpectedStatusCode = hasNoExpectedStatusCodes
                        ? 200 <= statusCode && statusCode < 300
                        : !!responseSpec;
                    if (!isExpectedStatusCode) {
                        var defaultResponseSpec = operationSpec.responses.default;
                        if (defaultResponseSpec) {
                            var initialErrorMessage = isStreamOperation(operationSpec)
                                ? "Unexpected status code: " + statusCode
                                : parsedResponse.bodyAsText;
                            var error = new RestError(initialErrorMessage);
                            error.statusCode = statusCode;
                            error.request = stripRequest(parsedResponse.request);
                            error.response = stripResponse(parsedResponse);
                            var parsedErrorResponse = parsedResponse.parsedBody;
                            try {
                                if (parsedErrorResponse) {
                                    var defaultResponseBodyMapper = defaultResponseSpec.bodyMapper;
                                    if (defaultResponseBodyMapper &&
                                        defaultResponseBodyMapper.serializedName === "CloudError") {
                                        if (parsedErrorResponse.error) {
                                            parsedErrorResponse = parsedErrorResponse.error;
                                        }
                                        if (parsedErrorResponse.code) {
                                            error.code = parsedErrorResponse.code;
                                        }
                                        if (parsedErrorResponse.message) {
                                            error.message = parsedErrorResponse.message;
                                        }
                                    }
                                    else {
                                        var internalError = parsedErrorResponse;
                                        if (parsedErrorResponse.error) {
                                            internalError = parsedErrorResponse.error;
                                        }
                                        error.code = internalError.code;
                                        if (internalError.message) {
                                            error.message = internalError.message;
                                        }
                                    }
                                    if (defaultResponseBodyMapper) {
                                        var valueToDeserialize = parsedErrorResponse;
                                        if (operationSpec.isXML &&
                                            defaultResponseBodyMapper.type.name === MapperType.Sequence) {
                                            valueToDeserialize =
                                                typeof parsedErrorResponse === "object"
                                                    ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName]
                                                    : [];
                                        }
                                        error.response.parsedBody = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, "error.response.parsedBody");
                                    }
                                }
                                if (parsedResponse.headers && defaultResponseSpec.headersMapper) {
                                    error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultResponseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody - \"" + parsedResponse.bodyAsText + "\" for the default response.";
                            }
                            return Promise.reject(error);
                        }
                    }
                    else if (responseSpec) {
                        if (responseSpec.bodyMapper) {
                            var valueToDeserialize = parsedResponse.parsedBody;
                            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {
                                valueToDeserialize =
                                    typeof valueToDeserialize === "object"
                                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]
                                        : [];
                            }
                            try {
                                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody");
                            }
                            catch (error) {
                                var restError = new RestError("Error " + error + " occurred in deserializing the responseBody - " + parsedResponse.bodyAsText);
                                restError.request = stripRequest(parsedResponse.request);
                                restError.response = stripResponse(parsedResponse);
                                return Promise.reject(restError);
                            }
                        }
                        else if (operationSpec.httpMethod === "HEAD") {
                            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
                            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
                        }
                        if (responseSpec.headersMapper) {
                            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
                        }
                    }
                }
            }
            return Promise.resolve(parsedResponse);
        });
    }
    function parse$1(jsonContentTypes, xmlContentTypes, operationResponse) {
        var errorHandler = function (err) {
            var msg = "Error \"" + err + "\" occurred while parsing the response body - " + operationResponse.bodyAsText + ".";
            var errCode = err.code || RestError.PARSE_ERROR;
            var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
            return Promise.reject(e);
        };
        if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {
            var text_1 = operationResponse.bodyAsText;
            var contentType = operationResponse.headers.get("Content-Type") || "";
            var contentComponents = !contentType
                ? []
                : contentType.split(";").map(function (component) { return component.toLowerCase(); });
            if (contentComponents.length === 0 ||
                contentComponents.some(function (component) { return jsonContentTypes.indexOf(component) !== -1; })) {
                return new Promise(function (resolve) {
                    operationResponse.parsedBody = JSON.parse(text_1);
                    resolve(operationResponse);
                }).catch(errorHandler);
            }
            else if (contentComponents.some(function (component) { return xmlContentTypes.indexOf(component) !== -1; })) {
                return parseXML(text_1)
                    .then(function (body) {
                    operationResponse.parsedBody = body;
                    return operationResponse;
                })
                    .catch(errorHandler);
            }
        }
        return Promise.resolve(operationResponse);
    }

    // Copyright (c) Microsoft Corporation.
    function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
        return {
            create: function (nextPolicy, options) {
                return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
            }
        };
    }
    var DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
    var DEFAULT_CLIENT_RETRY_COUNT = 3;
    var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
    /**
     * Describes the Retry Mode type. Currently supporting only Exponential.
     * @enum RetryMode
     */
    var RetryMode;
    (function (RetryMode) {
        RetryMode[RetryMode["Exponential"] = 0] = "Exponential";
    })(RetryMode || (RetryMode = {}));
    /**
     * @class
     * Instantiates a new "ExponentialRetryPolicyFilter" instance.
     */
    var ExponentialRetryPolicy = /** @class */ (function (_super) {
        __extends(ExponentialRetryPolicy, _super);
        /**
         * @constructor
         * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.
         * @param {RequestPolicyOptions} options The options for this RequestPolicy.
         * @param {number} [retryCount]        The client retry count.
         * @param {number} [retryInterval]     The client retry interval, in milliseconds.
         * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.
         * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.
         */
        function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
            var _this = _super.call(this, nextPolicy, options) || this;
            function isNumber(n) {
                return typeof n === "number";
            }
            _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;
            _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;
            _this.maxRetryInterval = isNumber(maxRetryInterval)
                ? maxRetryInterval
                : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
            return _this;
        }
        ExponentialRetryPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .then(function (response) { return retry(_this, request, response); })
                .catch(function (error) { return retry(_this, request, error.response, undefined, error); });
        };
        return ExponentialRetryPolicy;
    }(BaseRequestPolicy));
    /**
     * Determines if the operation should be retried and how long to wait until the next retry.
     *
     * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.
     * @param {number} statusCode The HTTP status code.
     * @param {RetryData} retryData  The retry data.
     * @return {boolean} True if the operation qualifies for a retry; false otherwise.
     */
    function shouldRetry(policy, statusCode, retryData) {
        if (statusCode == undefined ||
            (statusCode < 500 && statusCode !== 408) ||
            statusCode === 501 ||
            statusCode === 505) {
            return false;
        }
        var currentCount;
        if (!retryData) {
            throw new Error("retryData for the ExponentialRetryPolicyFilter cannot be null.");
        }
        else {
            currentCount = retryData && retryData.retryCount;
        }
        return currentCount < policy.retryCount;
    }
    /**
     * Updates the retry data for the next attempt.
     *
     * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.
     * @param {RetryData} retryData  The retry data.
     * @param {RetryError} [err] The operation"s error, if any.
     */
    function updateRetryData(policy, retryData, err) {
        if (!retryData) {
            retryData = {
                retryCount: 0,
                retryInterval: 0
            };
        }
        if (err) {
            if (retryData.error) {
                err.innerError = retryData.error;
            }
            retryData.error = err;
        }
        // Adjust retry count
        retryData.retryCount++;
        // Adjust retry interval
        var incrementDelta = Math.pow(2, retryData.retryCount) - 1;
        var boundedRandDelta = policy.retryInterval * 0.8 +
            Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));
        incrementDelta *= boundedRandDelta;
        retryData.retryInterval = Math.min(incrementDelta, policy.maxRetryInterval);
        return retryData;
    }
    function retry(policy, request, response, retryData, requestError) {
        retryData = updateRetryData(policy, retryData, requestError);
        var isAborted = request.abortSignal && request.abortSignal.aborted;
        if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {
            logger.info("Retrying request in " + retryData.retryInterval);
            return delay(retryData.retryInterval)
                .then(function () { return policy._nextPolicy.sendRequest(request.clone()); })
                .then(function (res) { return retry(policy, request, res, retryData, undefined); })
                .catch(function (err) { return retry(policy, request, response, retryData, err); });
        }
        else if (isAborted || requestError || !response) {
            // If the operation failed in the end, return all errors instead of just the last one
            var err = retryData.error ||
                new RestError("Failed to send the request.", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
            return Promise.reject(err);
        }
        else {
            return Promise.resolve(response);
        }
    }

    // Copyright (c) Microsoft Corporation.
    function generateClientRequestIdPolicy(requestIdHeaderName) {
        if (requestIdHeaderName === void 0) { requestIdHeaderName = "x-ms-client-request-id"; }
        return {
            create: function (nextPolicy, options) {
                return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
            }
        };
    }
    var GenerateClientRequestIdPolicy = /** @class */ (function (_super) {
        __extends(GenerateClientRequestIdPolicy, _super);
        function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._requestIdHeaderName = _requestIdHeaderName;
            return _this;
        }
        GenerateClientRequestIdPolicy.prototype.sendRequest = function (request) {
            if (!request.headers.contains(this._requestIdHeaderName)) {
                request.headers.set(this._requestIdHeaderName, generateUuid());
            }
            return this._nextPolicy.sendRequest(request);
        };
        return GenerateClientRequestIdPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    function getDefaultUserAgentKey() {
        return "x-ms-command-name";
    }
    function getPlatformSpecificData() {
        var navigator = window.navigator;
        var osInfo = {
            key: "OS",
            value: (navigator.oscpu || navigator.platform).replace(" ", "")
        };
        return [osInfo];
    }

    // Copyright (c) Microsoft Corporation.
    function getRuntimeInfo() {
        var msRestRuntime = {
            key: "core-http",
            value: Constants.coreHttpVersion
        };
        return [msRestRuntime];
    }
    function getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {
        if (keySeparator === void 0) { keySeparator = " "; }
        if (valueSeparator === void 0) { valueSeparator = "/"; }
        return telemetryInfo
            .map(function (info) {
            var value = info.value ? "" + valueSeparator + info.value : "";
            return "" + info.key + value;
        })
            .join(keySeparator);
    }
    var getDefaultUserAgentHeaderName = getDefaultUserAgentKey;
    function getDefaultUserAgentValue() {
        var runtimeInfo = getRuntimeInfo();
        var platformSpecificData = getPlatformSpecificData();
        var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
        return userAgent;
    }
    function userAgentPolicy(userAgentData) {
        var key = !userAgentData || userAgentData.key == undefined ? getDefaultUserAgentKey() : userAgentData.key;
        var value = !userAgentData || userAgentData.value == undefined
            ? getDefaultUserAgentValue()
            : userAgentData.value;
        return {
            create: function (nextPolicy, options) {
                return new UserAgentPolicy(nextPolicy, options, key, value);
            }
        };
    }
    var UserAgentPolicy = /** @class */ (function (_super) {
        __extends(UserAgentPolicy, _super);
        function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {
            var _this = _super.call(this, _nextPolicy, _options) || this;
            _this._nextPolicy = _nextPolicy;
            _this._options = _options;
            _this.headerKey = headerKey;
            _this.headerValue = headerValue;
            return _this;
        }
        UserAgentPolicy.prototype.sendRequest = function (request) {
            this.addUserAgentHeader(request);
            return this._nextPolicy.sendRequest(request);
        };
        UserAgentPolicy.prototype.addUserAgentHeader = function (request) {
            if (!request.headers) {
                request.headers = new HttpHeaders();
            }
            if (!request.headers.get(this.headerKey) && this.headerValue) {
                request.headers.set(this.headerKey, this.headerValue);
            }
        };
        return UserAgentPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function redirectPolicy(maximumRetries) {
        if (maximumRetries === void 0) { maximumRetries = 20; }
        return {
            create: function (nextPolicy, options) {
                return new RedirectPolicy(nextPolicy, options, maximumRetries);
            }
        };
    }
    var RedirectPolicy = /** @class */ (function (_super) {
        __extends(RedirectPolicy, _super);
        function RedirectPolicy(nextPolicy, options, maxRetries) {
            if (maxRetries === void 0) { maxRetries = 20; }
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.maxRetries = maxRetries;
            return _this;
        }
        RedirectPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request)
                .then(function (response) { return handleRedirect(_this, response, 0); });
        };
        return RedirectPolicy;
    }(BaseRequestPolicy));
    function handleRedirect(policy, response, currentRetries) {
        var request = response.request, status = response.status;
        var locationHeader = response.headers.get("location");
        if (locationHeader &&
            (status === 300 || status === 307 || (status === 303 && request.method === "POST")) &&
            (!policy.maxRetries || currentRetries < policy.maxRetries)) {
            var builder = URLBuilder.parse(request.url);
            builder.setPath(locationHeader);
            request.url = builder.toString();
            // POST request with Status code 303 should be converted into a
            // redirected GET request if the redirect url is present in the location header
            if (status === 303) {
                request.method = "GET";
            }
            return policy._nextPolicy
                .sendRequest(request)
                .then(function (res) { return handleRedirect(policy, res, currentRetries + 1); });
        }
        return Promise.resolve(response);
    }

    function rpRegistrationPolicy(retryTimeout) {
        if (retryTimeout === void 0) { retryTimeout = 30; }
        return {
            create: function (nextPolicy, options) {
                return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
            }
        };
    }
    var RPRegistrationPolicy = /** @class */ (function (_super) {
        __extends(RPRegistrationPolicy, _super);
        function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {
            if (_retryTimeout === void 0) { _retryTimeout = 30; }
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._retryTimeout = _retryTimeout;
            return _this;
        }
        RPRegistrationPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .then(function (response) { return registerIfNeeded(_this, request, response); });
        };
        return RPRegistrationPolicy;
    }(BaseRequestPolicy));
    function registerIfNeeded(policy, request, response) {
        if (response.status === 409) {
            var rpName = checkRPNotRegisteredError(response.bodyAsText);
            if (rpName) {
                var urlPrefix = extractSubscriptionUrl(request.url);
                return (registerRP(policy, urlPrefix, rpName, request)
                    // Autoregistration of ${provider} failed for some reason. We will not return this error
                    // instead will return the initial response with 409 status code back to the user.
                    // do nothing here as we are returning the original response at the end of this method.
                    .catch(function () { return false; })
                    .then(function (registrationStatus) {
                    if (registrationStatus) {
                        // Retry the original request. We have to change the x-ms-client-request-id
                        // otherwise Azure endpoint will return the initial 409 (cached) response.
                        request.headers.set("x-ms-client-request-id", generateUuid());
                        return policy._nextPolicy.sendRequest(request.clone());
                    }
                    return response;
                }));
            }
        }
        return Promise.resolve(response);
    }
    /**
     * Reuses the headers of the original request and url (if specified).
     * @param {WebResource} originalRequest The original request
     * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.
     * @returns {object} A new request object with desired headers.
     */
    function getRequestEssentials(originalRequest, reuseUrlToo) {
        if (reuseUrlToo === void 0) { reuseUrlToo = false; }
        var reqOptions = originalRequest.clone();
        if (reuseUrlToo) {
            reqOptions.url = originalRequest.url;
        }
        // We have to change the x-ms-client-request-id otherwise Azure endpoint
        // will return the initial 409 (cached) response.
        reqOptions.headers.set("x-ms-client-request-id", generateUuid());
        // Set content-type to application/json
        reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
        return reqOptions;
    }
    /**
     * Validates the error code and message associated with 409 response status code. If it matches to that of
     * RP not registered then it returns the name of the RP else returns undefined.
     * @param {string} body The response body received after making the original request.
     * @returns {string} The name of the RP if condition is satisfied else undefined.
     */
    function checkRPNotRegisteredError(body) {
        var result, responseBody;
        if (body) {
            try {
                responseBody = JSON.parse(body);
            }
            catch (err) {
                // do nothing;
            }
            if (responseBody &&
                responseBody.error &&
                responseBody.error.message &&
                responseBody.error.code &&
                responseBody.error.code === "MissingSubscriptionRegistration") {
                var matchRes = responseBody.error.message.match(/.*'(.*)'/i);
                if (matchRes) {
                    result = matchRes.pop();
                }
            }
        }
        return result;
    }
    /**
     * Extracts the first part of the URL, just after subscription:
     * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param {string} url The original request url
     * @returns {string} The url prefix as explained above.
     */
    function extractSubscriptionUrl(url) {
        var result;
        var matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);
        if (matchRes && matchRes[0]) {
            result = matchRes[0];
        }
        else {
            throw new Error("Unable to extract subscriptionId from the given url - " + url + ".");
        }
        return result;
    }
    /**
     * Registers the given provider.
     * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.
     * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param {string} provider The provider name to be registered.
     * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     * @param {registrationCallback} callback The callback that handles the RP registration
     */
    function registerRP(policy, urlPrefix, provider, originalRequest) {
        var postUrl = urlPrefix + "providers/" + provider + "/register?api-version=2016-02-01";
        var getUrl = urlPrefix + "providers/" + provider + "?api-version=2016-02-01";
        var reqOptions = getRequestEssentials(originalRequest);
        reqOptions.method = "POST";
        reqOptions.url = postUrl;
        return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {
            if (response.status !== 200) {
                throw new Error("Autoregistration of " + provider + " failed. Please try registering manually.");
            }
            return getRegistrationStatus(policy, getUrl, originalRequest);
        });
    }
    /**
     * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
     * Polling will happen till the registrationState property of the response body is "Registered".
     * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.
     * @param {string} url The request url for polling
     * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     * @returns {Promise<boolean>} True if RP Registration is successful.
     */
    function getRegistrationStatus(policy, url, originalRequest) {
        var reqOptions = getRequestEssentials(originalRequest);
        reqOptions.url = url;
        reqOptions.method = "GET";
        return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {
            var obj = res.parsedBody;
            if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") {
                return true;
            }
            else {
                return delay(policy._retryTimeout * 1000)
                    .then(function () { return getRegistrationStatus(policy, url, originalRequest); });
            }
        });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * Defines the default token refresh buffer duration.
     */
    var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes
    /**
     * Provides an {@link AccessTokenCache} implementation which clears
     * the cached {@link AccessToken}'s after the expiresOnTimestamp has
     * passed.
     */
    var ExpiringAccessTokenCache = /** @class */ (function () {
        /**
         * Constructs an instance of {@link ExpiringAccessTokenCache} with
         * an optional expiration buffer time.
         */
        function ExpiringAccessTokenCache(tokenRefreshBufferMs) {
            if (tokenRefreshBufferMs === void 0) { tokenRefreshBufferMs = TokenRefreshBufferMs; }
            this.cachedToken = undefined;
            this.tokenRefreshBufferMs = tokenRefreshBufferMs;
        }
        ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {
            this.cachedToken = accessToken;
        };
        ExpiringAccessTokenCache.prototype.getCachedToken = function () {
            if (this.cachedToken &&
                Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {
                this.cachedToken = undefined;
            }
            return this.cachedToken;
        };
        return ExpiringAccessTokenCache;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * Creates a new BearerTokenAuthenticationPolicy factory.
     *
     * @param credential The TokenCredential implementation that can supply the bearer token.
     * @param scopes The scopes for which the bearer token applies.
     */
    function bearerTokenAuthenticationPolicy(credential, scopes) {
        var tokenCache = new ExpiringAccessTokenCache();
        return {
            create: function (nextPolicy, options) {
                return new BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes, tokenCache);
            }
        };
    }
    /**
     *
     * Provides a RequestPolicy that can request a token from a TokenCredential
     * implementation and then apply it to the Authorization header of a request
     * as a Bearer token.
     *
     */
    var BearerTokenAuthenticationPolicy = /** @class */ (function (_super) {
        __extends(BearerTokenAuthenticationPolicy, _super);
        /**
         * Creates a new BearerTokenAuthenticationPolicy object.
         *
         * @param nextPolicy The next RequestPolicy in the request pipeline.
         * @param options Options for this RequestPolicy.
         * @param credential The TokenCredential implementation that can supply the bearer token.
         * @param scopes The scopes for which the bearer token applies.
         * @param tokenCache The cache for the most recent AccessToken returned from the TokenCredential.
         */
        function BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes, tokenCache) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.credential = credential;
            _this.scopes = scopes;
            _this.tokenCache = tokenCache;
            return _this;
        }
        /**
         * Applies the Bearer token to the request through the Authorization header.
         * @param webResource
         */
        BearerTokenAuthenticationPolicy.prototype.sendRequest = function (webResource) {
            return __awaiter(this, void 0, void 0, function () {
                var token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!webResource.headers)
                                webResource.headers = new HttpHeaders();
                            return [4 /*yield*/, this.getToken({
                                    abortSignal: webResource.abortSignal,
                                    spanOptions: webResource.spanOptions
                                })];
                        case 1:
                            token = _a.sent();
                            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer " + token);
                            return [2 /*return*/, this._nextPolicy.sendRequest(webResource)];
                    }
                });
            });
        };
        BearerTokenAuthenticationPolicy.prototype.getToken = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            accessToken = this.tokenCache.getCachedToken();
                            if (!(accessToken === undefined)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.credential.getToken(this.scopes, options)];
                        case 1:
                            accessToken = (_a.sent()) || undefined;
                            this.tokenCache.setCachedToken(accessToken);
                            _a.label = 2;
                        case 2: return [2 /*return*/, accessToken ? accessToken.token : undefined];
                    }
                });
            });
        };
        return BearerTokenAuthenticationPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
        return {
            create: function (nextPolicy, options) {
                return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
            }
        };
    }
    /**
     * @class
     * Instantiates a new "ExponentialRetryPolicyFilter" instance.
     *
     * @constructor
     * @param {number} retryCount        The client retry count.
     * @param {number} retryInterval     The client retry interval, in milliseconds.
     * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.
     * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.
     */
    var SystemErrorRetryPolicy = /** @class */ (function (_super) {
        __extends(SystemErrorRetryPolicy, _super);
        function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
            _this.DEFAULT_CLIENT_RETRY_COUNT = 3;
            _this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
            _this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;
            _this.retryCount = typeof retryCount === "number" ? retryCount : _this.DEFAULT_CLIENT_RETRY_COUNT;
            _this.retryInterval =
                typeof retryInterval === "number" ? retryInterval : _this.DEFAULT_CLIENT_RETRY_INTERVAL;
            _this.minRetryInterval =
                typeof minRetryInterval === "number"
                    ? minRetryInterval
                    : _this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
            _this.maxRetryInterval =
                typeof maxRetryInterval === "number"
                    ? maxRetryInterval
                    : _this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
            return _this;
        }
        SystemErrorRetryPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .then(function (response) { return retry$1(_this, request, response); });
        };
        return SystemErrorRetryPolicy;
    }(BaseRequestPolicy));
    /**
     * Determines if the operation should be retried and how long to wait until the next retry.
     *
     * @param {number} statusCode The HTTP status code.
     * @param {RetryData} retryData  The retry data.
     * @return {boolean} True if the operation qualifies for a retry; false otherwise.
     */
    function shouldRetry$1(policy, retryData) {
        var currentCount;
        if (!retryData) {
            throw new Error("retryData for the SystemErrorRetryPolicyFilter cannot be null.");
        }
        else {
            currentCount = retryData && retryData.retryCount;
        }
        return currentCount < policy.retryCount;
    }
    /**
     * Updates the retry data for the next attempt.
     *
     * @param {RetryData} retryData  The retry data.
     * @param {object} err        The operation"s error, if any.
     */
    function updateRetryData$1(policy, retryData, err) {
        if (!retryData) {
            retryData = {
                retryCount: 0,
                retryInterval: 0
            };
        }
        if (err) {
            if (retryData.error) {
                err.innerError = retryData.error;
            }
            retryData.error = err;
        }
        // Adjust retry count
        retryData.retryCount++;
        // Adjust retry interval
        var incrementDelta = Math.pow(2, retryData.retryCount) - 1;
        var boundedRandDelta = policy.retryInterval * 0.8 +
            Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));
        incrementDelta *= boundedRandDelta;
        retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);
        return retryData;
    }
    function retry$1(policy, request, operationResponse, retryData, err) {
        retryData = updateRetryData$1(policy, retryData, err);
        if (err &&
            err.code &&
            shouldRetry$1(policy, retryData) &&
            (err.code === "ETIMEDOUT" ||
                err.code === "ESOCKETTIMEDOUT" ||
                err.code === "ECONNREFUSED" ||
                err.code === "ECONNRESET" ||
                err.code === "ENOENT")) {
            // If previous operation ended with an error and the policy allows a retry, do that
            return delay(retryData.retryInterval)
                .then(function () { return policy._nextPolicy.sendRequest(request.clone()); })
                .then(function (res) { return retry$1(policy, request, res, retryData, err); })
                .catch(function (err) { return retry$1(policy, request, operationResponse, retryData, err); });
        }
        else {
            if (err != undefined) {
                // If the operation failed in the end, return all errors instead of just the last one
                err = retryData.error;
                return Promise.reject(err);
            }
            return Promise.resolve(operationResponse);
        }
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * The format that will be used to join an array of values together for a query parameter value.
     */
    var QueryCollectionFormat;
    (function (QueryCollectionFormat) {
        QueryCollectionFormat["Csv"] = ",";
        QueryCollectionFormat["Ssv"] = " ";
        QueryCollectionFormat["Tsv"] = "\t";
        QueryCollectionFormat["Pipes"] = "|";
        QueryCollectionFormat["Multi"] = "Multi";
    })(QueryCollectionFormat || (QueryCollectionFormat = {}));

    // Copyright (c) Microsoft Corporation.
    var proxyNotSupportedInBrowser = new Error("ProxyPolicy is not supported in browser environment");
    function getDefaultProxySettings(_proxyUrl) {
        return undefined;
    }
    function proxyPolicy(_proxySettings) {
        return {
            create: function (_nextPolicy, _options) {
                throw proxyNotSupportedInBrowser;
            }
        };
    }
    var ProxyPolicy = /** @class */ (function (_super) {
        __extends(ProxyPolicy, _super);
        function ProxyPolicy(nextPolicy, options) {
            var _this = _super.call(this, nextPolicy, options) || this;
            throw proxyNotSupportedInBrowser;
            return _this;
        }
        ProxyPolicy.prototype.sendRequest = function (_request) {
            throw proxyNotSupportedInBrowser;
        };
        return ProxyPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    var StatusCodes = Constants.HttpConstants.StatusCodes;
    function throttlingRetryPolicy() {
        return {
            create: function (nextPolicy, options) {
                return new ThrottlingRetryPolicy(nextPolicy, options);
            }
        };
    }
    /**
     * To learn more, please refer to
     * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
     * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
     * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
     */
    var ThrottlingRetryPolicy = /** @class */ (function (_super) {
        __extends(ThrottlingRetryPolicy, _super);
        function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._handleResponse = _handleResponse || _this._defaultResponseHandler;
            return _this;
        }
        ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {
                            if (response.status !== StatusCodes.TooManyRequests) {
                                return response;
                            }
                            else {
                                return _this._handleResponse(httpRequest, response);
                            }
                        })];
                });
            });
        };
        ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {
            return __awaiter(this, void 0, void 0, function () {
                var retryAfterHeader, delayInMs;
                var _this = this;
                return __generator(this, function (_a) {
                    retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);
                    if (retryAfterHeader) {
                        delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);
                        if (delayInMs) {
                            return [2 /*return*/, delay(delayInMs).then(function (_) { return _this._nextPolicy.sendRequest(httpRequest); })];
                        }
                    }
                    return [2 /*return*/, httpResponse];
                });
            });
        };
        ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {
            var retryAfterInSeconds = Number(headerValue);
            if (Number.isNaN(retryAfterInSeconds)) {
                return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
            }
            else {
                return retryAfterInSeconds * 1000;
            }
        };
        ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {
            try {
                var now = Date.now();
                var date = Date.parse(headerValue);
                var diff = date - now;
                return Number.isNaN(diff) ? undefined : diff;
            }
            catch (error) {
                return undefined;
            }
        };
        return ThrottlingRetryPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function signingPolicy(authenticationProvider) {
        return {
            create: function (nextPolicy, options) {
                return new SigningPolicy(nextPolicy, options, authenticationProvider);
            }
        };
    }
    var SigningPolicy = /** @class */ (function (_super) {
        __extends(SigningPolicy, _super);
        function SigningPolicy(nextPolicy, options, authenticationProvider) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.authenticationProvider = authenticationProvider;
            return _this;
        }
        SigningPolicy.prototype.signRequest = function (request) {
            return this.authenticationProvider.signRequest(request);
        };
        SigningPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this.signRequest(request).then(function (nextRequest) {
                return _this._nextPolicy.sendRequest(nextRequest);
            });
        };
        return SigningPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    function tracingPolicy() {
        return {
            create: function (nextPolicy, options) {
                return new TracingPolicy(nextPolicy, options);
            }
        };
    }
    var TracingPolicy = /** @class */ (function (_super) {
        __extends(TracingPolicy, _super);
        function TracingPolicy(nextPolicy, options) {
            return _super.call(this, nextPolicy, options) || this;
        }
        TracingPolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var tracer, span, spanContext, traceParentHeader, traceState, response, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!request.spanOptions || !request.spanOptions.parent) {
                                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                            }
                            tracer = getTracer();
                            span = tracer.startSpan("core-http", request.spanOptions);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            spanContext = span.context();
                            traceParentHeader = getTraceParentHeader(spanContext);
                            if (traceParentHeader) {
                                request.headers.set("traceparent", traceParentHeader);
                                traceState = spanContext.traceState && spanContext.traceState.serialize();
                                // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent
                                if (traceState) {
                                    request.headers.set("tracestate", traceState);
                                }
                            }
                            return [4 /*yield*/, this._nextPolicy.sendRequest(request)];
                        case 2:
                            response = _a.sent();
                            span.end();
                            return [2 /*return*/, response];
                        case 3:
                            err_1 = _a.sent();
                            span.end();
                            throw err_1;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return TracingPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    /**
     * @class
     * Initializes a new instance of the ServiceClient.
     */
    var ServiceClient = /** @class */ (function () {
        /**
         * The ServiceClient constructor
         * @constructor
         * @param credentials The credentials used for authentication with the service.
         * @param options The service client options that govern the behavior of the client.
         */
        function ServiceClient(credentials, options) {
            var _this = this;
            if (!options) {
                options = {};
            }
            this._withCredentials = options.withCredentials || false;
            this._httpClient = options.httpClient || new XhrHttpClient();
            this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);
            var requestPolicyFactories;
            if (Array.isArray(options.requestPolicyFactories)) {
                logger.info("ServiceClient: using custom request policies");
                requestPolicyFactories = options.requestPolicyFactories;
            }
            else {
                var authPolicyFactory = undefined;
                if (isTokenCredential(credentials)) {
                    logger.info("ServiceClient: creating bearer token authentication policy from provided credentials");
                    // Create a wrapped RequestPolicyFactory here so that we can provide the
                    // correct scope to the BearerTokenAuthenticationPolicy at the first time
                    // one is requested.  This is needed because generated ServiceClient
                    // implementations do not set baseUri until after ServiceClient's constructor
                    // is finished, leaving baseUri empty at the time when it is needed to
                    // build the correct scope name.
                    var wrappedPolicyFactory = function () {
                        var bearerTokenPolicyFactory = undefined;
                        var serviceClient = _this;
                        return {
                            create: function (nextPolicy, options) {
                                if (bearerTokenPolicyFactory === undefined) {
                                    bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(credentials, (serviceClient.baseUri || "") + "/.default");
                                }
                                return bearerTokenPolicyFactory.create(nextPolicy, options);
                            }
                        };
                    };
                    authPolicyFactory = wrappedPolicyFactory();
                }
                else if (credentials && typeof credentials.signRequest === "function") {
                    logger.info("ServiceClient: creating signing policy from provided credentials");
                    authPolicyFactory = signingPolicy(credentials);
                }
                else if (credentials !== undefined) {
                    throw new Error("The credentials argument must implement the TokenCredential interface");
                }
                logger.info("ServiceClient: using default request policies");
                requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);
                if (options.requestPolicyFactories) {
                    // options.requestPolicyFactories can also be a function that manipulates
                    // the default requestPolicyFactories array
                    var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);
                    if (newRequestPolicyFactories) {
                        requestPolicyFactories = newRequestPolicyFactories;
                    }
                }
            }
            this._requestPolicyFactories = requestPolicyFactories;
        }
        /**
         * Send the provided httpRequest.
         */
        ServiceClient.prototype.sendRequest = function (options) {
            if (options === null || options === undefined || typeof options !== "object") {
                throw new Error("options cannot be null or undefined and it must be of type object.");
            }
            var httpRequest;
            try {
                if (options instanceof WebResource) {
                    options.validateRequestProperties();
                    httpRequest = options;
                }
                else {
                    httpRequest = new WebResource();
                    httpRequest = httpRequest.prepare(options);
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            var httpPipeline = this._httpClient;
            if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
                for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
                    httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
                }
            }
            return httpPipeline.sendRequest(httpRequest);
        };
        /**
         * Send an HTTP request that is populated using the provided OperationSpec.
         * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.
         * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.
         * @param {ServiceCallback} callback The callback to call when the response is received.
         */
        ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var httpRequest, result, baseUri, requestUrl, _i, _a, urlParameter, urlParameterValue, _b, _c, queryParameter, queryParameterValue, index, item, index, contentType, _d, _e, headerParameter, headerValue, headerCollectionPrefix, _f, _g, key, options, customHeaderName, rawResponse, sendRequestError, error_1, error_2, cb;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            if (typeof operationArguments.options === "function") {
                                callback = operationArguments.options;
                                operationArguments.options = undefined;
                            }
                            httpRequest = new WebResource();
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 6, , 7]);
                            baseUri = operationSpec.baseUrl || this.baseUri;
                            if (!baseUri) {
                                throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
                            }
                            httpRequest.method = operationSpec.httpMethod;
                            httpRequest.operationSpec = operationSpec;
                            requestUrl = URLBuilder.parse(baseUri);
                            if (operationSpec.path) {
                                requestUrl.appendPath(operationSpec.path);
                            }
                            if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
                                for (_i = 0, _a = operationSpec.urlParameters; _i < _a.length; _i++) {
                                    urlParameter = _a[_i];
                                    urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                                    urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));
                                    if (!urlParameter.skipEncoding) {
                                        urlParameterValue = encodeURIComponent(urlParameterValue);
                                    }
                                    requestUrl.replaceAll("{" + (urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)) + "}", urlParameterValue);
                                }
                            }
                            if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {
                                for (_b = 0, _c = operationSpec.queryParameters; _b < _c.length; _b++) {
                                    queryParameter = _c[_b];
                                    queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);
                                    if (queryParameterValue != undefined) {
                                        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));
                                        if (queryParameter.collectionFormat != undefined) {
                                            if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {
                                                if (queryParameterValue.length === 0) {
                                                    queryParameterValue = "";
                                                }
                                                else {
                                                    for (index in queryParameterValue) {
                                                        item = queryParameterValue[index];
                                                        queryParameterValue[index] = item == undefined ? "" : item.toString();
                                                    }
                                                }
                                            }
                                            else {
                                                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                                            }
                                        }
                                        if (!queryParameter.skipEncoding) {
                                            if (Array.isArray(queryParameterValue)) {
                                                for (index in queryParameterValue) {
                                                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                                                }
                                            }
                                            else {
                                                queryParameterValue = encodeURIComponent(queryParameterValue);
                                            }
                                        }
                                        requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
                                    }
                                }
                            }
                            httpRequest.url = requestUrl.toString();
                            contentType = operationSpec.contentType || this.requestContentType;
                            if (contentType) {
                                httpRequest.headers.set("Content-Type", contentType);
                            }
                            if (operationSpec.headerParameters) {
                                for (_d = 0, _e = operationSpec.headerParameters; _d < _e.length; _d++) {
                                    headerParameter = _e[_d];
                                    headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);
                                    if (headerValue != undefined) {
                                        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));
                                        headerCollectionPrefix = headerParameter.mapper
                                            .headerCollectionPrefix;
                                        if (headerCollectionPrefix) {
                                            for (_f = 0, _g = Object.keys(headerValue); _f < _g.length; _f++) {
                                                key = _g[_f];
                                                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                                            }
                                        }
                                        else {
                                            httpRequest.headers.set(headerParameter.mapper.serializedName ||
                                                getPathStringFromParameter(headerParameter), headerValue);
                                        }
                                    }
                                }
                            }
                            options = operationArguments.options;
                            if (options) {
                                if (options.customHeaders) {
                                    for (customHeaderName in options.customHeaders) {
                                        httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                                    }
                                }
                                if (options.abortSignal) {
                                    httpRequest.abortSignal = options.abortSignal;
                                }
                                if (options.timeout) {
                                    httpRequest.timeout = options.timeout;
                                }
                                if (options.onUploadProgress) {
                                    httpRequest.onUploadProgress = options.onUploadProgress;
                                }
                                if (options.onDownloadProgress) {
                                    httpRequest.onDownloadProgress = options.onDownloadProgress;
                                }
                                if (options.spanOptions) {
                                    httpRequest.spanOptions = options.spanOptions;
                                }
                            }
                            httpRequest.withCredentials = this._withCredentials;
                            serializeRequestBody(this, httpRequest, operationArguments, operationSpec);
                            if (httpRequest.streamResponseBody == undefined) {
                                httpRequest.streamResponseBody = isStreamOperation(operationSpec);
                            }
                            rawResponse = void 0;
                            sendRequestError = void 0;
                            _h.label = 2;
                        case 2:
                            _h.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.sendRequest(httpRequest)];
                        case 3:
                            rawResponse = _h.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            error_1 = _h.sent();
                            sendRequestError = error_1;
                            return [3 /*break*/, 5];
                        case 5:
                            if (sendRequestError) {
                                if (sendRequestError.response) {
                                    sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] ||
                                        operationSpec.responses["default"]);
                                }
                                result = Promise.reject(sendRequestError);
                            }
                            else {
                                result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            error_2 = _h.sent();
                            result = Promise.reject(error_2);
                            return [3 /*break*/, 7];
                        case 7:
                            cb = callback;
                            if (cb) {
                                result
                                    // tslint:disable-next-line:no-null-keyword
                                    .then(function (res) { return cb(null, res._response.parsedBody, res._response.request, res._response); })
                                    .catch(function (err) { return cb(err); });
                            }
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        return ServiceClient;
    }());
    function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
        if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
            httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
            var bodyMapper = operationSpec.requestBody.mapper;
            var required = bodyMapper.required, xmlName = bodyMapper.xmlName, xmlElementName = bodyMapper.xmlElementName, serializedName = bodyMapper.serializedName;
            var typeName = bodyMapper.type.name;
            try {
                if (httpRequest.body != undefined || required) {
                    var requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
                    httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);
                    var isStream = typeName === MapperType.Stream;
                    if (operationSpec.isXML) {
                        if (typeName === MapperType.Sequence) {
                            httpRequest.body = stringifyXML(prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName), { rootName: xmlName || serializedName });
                        }
                        else if (!isStream) {
                            httpRequest.body = stringifyXML(httpRequest.body, {
                                rootName: xmlName || serializedName
                            });
                        }
                    }
                    else if (!isStream) {
                        httpRequest.body = JSON.stringify(httpRequest.body);
                    }
                }
            }
            catch (error) {
                throw new Error("Error \"" + error.message + "\" occurred in serializing the payload - " + JSON.stringify(serializedName, undefined, "  ") + ".");
            }
        }
        else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
            httpRequest.formData = {};
            for (var _i = 0, _a = operationSpec.formDataParameters; _i < _a.length; _i++) {
                var formDataParameter = _a[_i];
                var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);
                if (formDataParameterValue != undefined) {
                    var formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
                    httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));
                }
            }
        }
    }
    function getValueOrFunctionResult(value, defaultValueCreator) {
        var result;
        if (typeof value === "string") {
            result = value;
        }
        else {
            result = defaultValueCreator();
            if (typeof value === "function") {
                result = value(result);
            }
        }
        return result;
    }
    function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
        var factories = [];
        if (options.generateClientRequestIdHeader) {
            factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));
        }
        if (authPolicyFactory) {
            factories.push(authPolicyFactory);
        }
        var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);
        var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);
        if (userAgentHeaderName && userAgentHeaderValue) {
            factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));
        }
        factories.push(redirectPolicy());
        factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));
        if (!options.noRetryPolicy) {
            factories.push(exponentialRetryPolicy());
            factories.push(systemErrorRetryPolicy());
            factories.push(throttlingRetryPolicy());
        }
        factories.push(deserializationPolicy(options.deserializationContentTypes));
        var proxySettings = options.proxySettings || getDefaultProxySettings();
        if (proxySettings) {
            factories.push(proxyPolicy());
        }
        factories.push(logPolicy(logger.info, {}));
        return factories;
    }
    function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
        return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
    }
    function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
        var value;
        if (typeof parameterPath === "string") {
            parameterPath = [parameterPath];
        }
        if (Array.isArray(parameterPath)) {
            if (parameterPath.length > 0) {
                if (parameterMapper.isConstant) {
                    value = parameterMapper.defaultValue;
                }
                else {
                    var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
                    if (!propertySearchResult.propertyFound) {
                        propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
                    }
                    var useDefaultValue = false;
                    if (!propertySearchResult.propertyFound) {
                        useDefaultValue =
                            parameterMapper.required ||
                                (parameterPath[0] === "options" && parameterPath.length === 2);
                    }
                    value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
                }
                // Serialize just for validation purposes.
                var parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);
                serializer.serialize(parameterMapper, value, parameterPathString);
            }
        }
        else {
            if (parameterMapper.required) {
                value = {};
            }
            for (var propertyName in parameterPath) {
                var propertyMapper = parameterMapper.type.modelProperties[propertyName];
                var propertyPath = parameterPath[propertyName];
                var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);
                // Serialize just for validation purposes.
                var propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);
                serializer.serialize(propertyMapper, propertyValue, propertyPathString);
                if (propertyValue !== undefined) {
                    if (!value) {
                        value = {};
                    }
                    value[propertyName] = propertyValue;
                }
            }
        }
        return value;
    }
    function getPropertyFromParameterPath(parent, parameterPath) {
        var result = { propertyFound: false };
        var i = 0;
        for (; i < parameterPath.length; ++i) {
            var parameterPathPart = parameterPath[i];
            // Make sure to check inherited properties too, so don't use hasOwnProperty().
            if (parent != undefined && parameterPathPart in parent) {
                parent = parent[parameterPathPart];
            }
            else {
                break;
            }
        }
        if (i === parameterPath.length) {
            result.propertyValue = parent;
            result.propertyFound = true;
        }
        return result;
    }
    function flattenResponse(_response, responseSpec) {
        var parsedHeaders = _response.parsedHeaders;
        var bodyMapper = responseSpec && responseSpec.bodyMapper;
        var addOperationResponse = function (obj) {
            return Object.defineProperty(obj, "_response", {
                value: _response
            });
        };
        if (bodyMapper) {
            var typeName = bodyMapper.type.name;
            if (typeName === "Stream") {
                return addOperationResponse(__assign({}, parsedHeaders, { blobBody: _response.blobBody, readableStreamBody: _response.readableStreamBody }));
            }
            var modelProperties_1 = (typeName === "Composite" && bodyMapper.type.modelProperties) || {};
            var isPageableResponse = Object.keys(modelProperties_1).some(function (k) { return modelProperties_1[k].serializedName === ""; });
            if (typeName === "Sequence" || isPageableResponse) {
                var arrayResponse = (_response.parsedBody || []).slice();
                for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (modelProperties_1[key].serializedName) {
                        arrayResponse[key] = _response.parsedBody[key];
                    }
                }
                if (parsedHeaders) {
                    for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {
                        var key = _c[_b];
                        arrayResponse[key] = parsedHeaders[key];
                    }
                }
                addOperationResponse(arrayResponse);
                return arrayResponse;
            }
            if (typeName === "Composite" || typeName === "Dictionary") {
                return addOperationResponse(__assign({}, parsedHeaders, _response.parsedBody));
            }
        }
        if (bodyMapper ||
            _response.request.method === "HEAD" ||
            isPrimitiveType(_response.parsedBody)) {
            // primitive body types and HEAD booleans
            return addOperationResponse(__assign({}, parsedHeaders, { body: _response.parsedBody }));
        }
        return addOperationResponse(__assign({}, parsedHeaders, _response.parsedBody));
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * The AzureLogger used for all clients within the identity package
     */
    const logger$1 = createClientLogger("identity");

    // Copyright (c) Microsoft Corporation.
    const DefaultAuthorityHost = "https://login.microsoftonline.com";
    class IdentityClient extends ServiceClient {
        constructor(options) {
            options = options || IdentityClient.getDefaultOptions();
            super(undefined, options);
            this.baseUri = this.authorityHost = options.authorityHost || DefaultAuthorityHost;
            if (!this.baseUri.startsWith("https:")) {
                throw new Error("The authorityHost address must use the 'https' protocol.");
            }
        }
        createWebResource(requestOptions) {
            const webResource = new WebResource();
            webResource.prepare(requestOptions);
            return webResource;
        }
        sendTokenRequest(webResource, expiresOnParser) {
            return __awaiter(this, void 0, void 0, function* () {
                logger$1.info(`IdentityClient: sending token request to [${webResource.url}]`);
                const response = yield this.sendRequest(webResource);
                expiresOnParser =
                    expiresOnParser ||
                        ((responseBody) => {
                            return Date.now() + responseBody.expires_in * 1000;
                        });
                if (response.status === 200 || response.status === 201) {
                    const token = {
                        accessToken: {
                            token: response.parsedBody.access_token,
                            expiresOnTimestamp: expiresOnParser(response.parsedBody)
                        },
                        refreshToken: response.parsedBody.refresh_token
                    };
                    logger$1.info(`IdentityClient: [${webResource.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);
                    return token;
                }
                else {
                    const error = new AuthenticationError(response.status, response.parsedBody || response.bodyAsText);
                    logger$1.warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);
                    throw error;
                }
            });
        }
        refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, expiresOnParser, options) {
            return __awaiter(this, void 0, void 0, function* () {
                if (refreshToken === undefined) {
                    return null;
                }
                logger$1.info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);
                const { span, options: newOptions } = createSpan("IdentityClient-refreshAccessToken", options);
                const refreshParams = {
                    grant_type: "refresh_token",
                    client_id: clientId,
                    refresh_token: refreshToken,
                    scope: scopes
                };
                if (clientSecret !== undefined) {
                    refreshParams.client_secret = clientSecret;
                }
                try {
                    const webResource = this.createWebResource({
                        url: `${this.authorityHost}/${tenantId}/oauth2/v2.0/token`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify(refreshParams),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        spanOptions: newOptions.spanOptions,
                        abortSignal: options && options.abortSignal
                    });
                    const response = yield this.sendTokenRequest(webResource, expiresOnParser);
                    logger$1.info(`IdentityClient: refreshed token for client ID: ${clientId}`);
                    return response;
                }
                catch (err) {
                    if (err.name === AuthenticationErrorName &&
                        err.errorResponse.error === "interaction_required") {
                        // It's likely that the refresh token has expired, so
                        // return null so that the credential implementation will
                        // initiate the authentication flow again.
                        logger$1.info(`IdentityClient: interaction required for client ID: ${clientId}`);
                        span.setStatus({
                            code: CanonicalCode.UNAUTHENTICATED,
                            message: err.message
                        });
                        return null;
                    }
                    else {
                        logger$1.warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);
                        span.setStatus({
                            code: CanonicalCode.UNKNOWN,
                            message: err.message
                        });
                        throw err;
                    }
                }
                finally {
                    span.end();
                }
            });
        }
        static getDefaultOptions() {
            return {
                authorityHost: DefaultAuthorityHost,
                requestPolicyFactories: (factories) => {
                    return [tracingPolicy(), ...factories];
                }
            };
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Enables authentication to Azure Active Directory using a client secret
     * that was generated for an App Registration.  More information on how
     * to configure a client secret can be found here:
     *
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application
     *
     */
    class ClientSecretCredential {
        /**
         * Creates an instance of the ClientSecretCredential with the details
         * needed to authenticate against Azure Active Directory with a client
         * secret.
         *
         * @param tenantId The Azure Active Directory tenant (directory) ID.
         * @param clientId The client (application) ID of an App Registration in the tenant.
         * @param clientSecret A client secret that was generated for the App Registration.
         * @param options Options for configuring the client which makes the authentication request.
         */
        constructor(tenantId, clientId, clientSecret, options) {
            this.identityClient = new IdentityClient(options);
            this.tenantId = tenantId;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
        }
        /**
         * Authenticates with Azure Active Directory and returns an {@link AccessToken} if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes The list of scopes for which the token will have access.
         * @param options The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { span, options: newOptions } = createSpan("ClientSecretCredential-getToken", options);
                try {
                    const webResource = this.identityClient.createWebResource({
                        url: `${this.identityClient.authorityHost}/${this.tenantId}/oauth2/v2.0/token`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify({
                            response_type: "token",
                            grant_type: "client_credentials",
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                            scope: typeof scopes === "string" ? scopes : scopes.join(" ")
                        }),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        abortSignal: options && options.abortSignal,
                        spanOptions: newOptions.spanOptions
                    });
                    const tokenResponse = yield this.identityClient.sendTokenRequest(webResource);
                    return (tokenResponse && tokenResponse.accessToken) || null;
                }
                catch (err) {
                    const code = err.name === AuthenticationErrorName
                        ? CanonicalCode.UNAUTHENTICATED
                        : CanonicalCode.UNKNOWN;
                    span.setStatus({
                        code,
                        message: err.message
                    });
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    const BrowserNotSupportedError$2 = new Error("ClientCertificateCredential is not supported in the browser.");
    class ClientCertificateCredential {
        constructor(tenantId, clientId, certificatePath, options) {
            throw BrowserNotSupportedError$2;
        }
        getToken(scopes, options) {
            throw BrowserNotSupportedError$2;
        }
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var CryptoUtils = /** @class */ (function () {
        function CryptoUtils() {
        }
        /**
         * Creates a new random GUID - used to populate state?
         * @returns string (GUID)
         */
        CryptoUtils.createNewGuid = function () {
            // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
            // pseudo-random numbers.
            // The algorithm is as follows:
            //     Set the two most significant bits (bits 6 and 7) of the
            //        clock_seq_hi_and_reserved to zero and one, respectively.
            //     Set the four most significant bits (bits 12 through 15) of the
            //        time_hi_and_version field to the 4-bit version number from
            //        Section 4.1.3. Version4
            //     Set all the other bits to randomly (or pseudo-randomly) chosen
            //     values.
            // UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
            // time-low               = 4hexOctet
            // time-mid               = 2hexOctet
            // time-high-and-version  = 2hexOctet
            // clock-seq-and-reserved = hexOctet:
            // clock-seq-low          = hexOctet
            // node                   = 6hexOctet
            // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
            // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
            // y values are 8, 9, A, B
            var cryptoObj = window.crypto; // for IE 11
            if (cryptoObj && cryptoObj.getRandomValues) {
                var buffer = new Uint8Array(16);
                cryptoObj.getRandomValues(buffer);
                //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
                buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.
                buffer[6] &= 0x4f; //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
                //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
                buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.
                buffer[8] &= 0xbf; //buffer[8] & 10111111 will set the 6 bit to 0.
                return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])
                    + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])
                    + "-" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])
                    + "-" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])
                    + "-" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])
                    + "-" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])
                    + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])
                    + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);
            }
            else {
                var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
                var hex = "0123456789abcdef";
                var r = 0;
                var guidResponse = "";
                for (var i = 0; i < 36; i++) {
                    if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                        // each x and y needs to be random
                        r = Math.random() * 16 | 0;
                    }
                    if (guidHolder[i] === "x") {
                        guidResponse += hex[r];
                    }
                    else if (guidHolder[i] === "y") {
                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                        r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                        r |= 0x8; // set pos 3 to 1 as 1???
                        guidResponse += hex[r];
                    }
                    else {
                        guidResponse += guidHolder[i];
                    }
                }
                return guidResponse;
            }
        };
        /**
         * Decimal to Hex
         *
         * @param num
         */
        CryptoUtils.decimalToHex = function (num) {
            var hex = num.toString(16);
            while (hex.length < 2) {
                hex = "0" + hex;
            }
            return hex;
        };
        // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it
        /**
         * encoding string to base64 - platform specific check
         *
         * @param input
         */
        CryptoUtils.base64Encode = function (input) {
            return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {
                return String.fromCharCode(Number("0x" + p1));
            }));
        };
        /**
         * decoding base64 token - platform specific check
         *
         * @param base64IdToken
         */
        CryptoUtils.base64Decode = function (input) {
            return decodeURIComponent(atob(input).split("").map(function (c) {
                return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(""));
        };
        /**
         * deserialize a string
         *
         * @param query
         */
        CryptoUtils.deserialize = function (query) {
            var match; // Regex for replacing addition symbol with a space
            var pl = /\+/g;
            var search = /([^&=]+)=([^&]*)/g;
            var decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); };
            var obj = {};
            match = search.exec(query);
            while (match) {
                obj[decode(match[1])] = decode(match[2]);
                match = search.exec(query);
            }
            return obj;
        };
        return CryptoUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     * Constants
     */
    var Constants$1 = /** @class */ (function () {
        function Constants() {
        }
        Object.defineProperty(Constants, "errorDescription", {
            get: function () { return "error_description"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "error", {
            get: function () { return "error"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "scope", {
            get: function () { return "scope"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "clientInfo", {
            get: function () { return "client_info"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "clientId", {
            get: function () { return "clientId"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "idToken", {
            get: function () { return "id_token"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "adalIdToken", {
            get: function () { return "adal.idtoken"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "accessToken", {
            get: function () { return "access_token"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "expiresIn", {
            get: function () { return "expires_in"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "sessionState", {
            get: function () { return "session_state"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "claims", {
            get: function () { return "claims"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "msalClientInfo", {
            get: function () { return "msal.client.info"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "msalError", {
            get: function () { return "msal.error"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "msalErrorDescription", {
            get: function () { return "msal.error.description"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "msalSessionState", {
            get: function () { return "msal.session.state"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "tokenKeys", {
            get: function () { return "msal.token.keys"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "accessTokenKey", {
            get: function () { return "msal.access.token.key"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "expirationKey", {
            get: function () { return "msal.expiration.key"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "stateLogin", {
            get: function () { return "msal.state.login"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "stateAcquireToken", {
            get: function () { return "msal.state.acquireToken"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "stateRenew", {
            get: function () { return "msal.state.renew"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "nonceIdToken", {
            get: function () { return "msal.nonce.idtoken"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "userName", {
            get: function () { return "msal.username"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "idTokenKey", {
            get: function () { return "msal.idtoken"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "loginRequest", {
            get: function () { return "msal.login.request"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "loginError", {
            get: function () { return "msal.login.error"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "renewStatus", {
            get: function () { return "msal.token.renew.status"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "urlHash", {
            get: function () { return "msal.urlHash"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "angularLoginRequest", {
            get: function () { return "msal.angular.login.request"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "msal", {
            get: function () { return "msal"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "no_account", {
            get: function () { return "NO_ACCOUNT"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "consumersUtid", {
            get: function () { return "9188040d-6c67-4c5b-b112-36a304b66dad"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "upn", {
            get: function () { return "upn"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt_select_account", {
            get: function () { return "&prompt=select_account"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt_none", {
            get: function () { return "&prompt=none"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt", {
            get: function () { return "prompt"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "response_mode_fragment", {
            get: function () { return "&response_mode=fragment"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "resourceDelimiter", {
            get: function () { return "|"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "tokenRenewStatusCancelled", {
            get: function () { return "Canceled"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "tokenRenewStatusCompleted", {
            get: function () { return "Completed"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "tokenRenewStatusInProgress", {
            get: function () { return "In Progress"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "popUpWidth", {
            get: function () { return this._popUpWidth; },
            set: function (width) {
                this._popUpWidth = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "popUpHeight", {
            get: function () { return this._popUpHeight; },
            set: function (height) {
                this._popUpHeight = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "login", {
            get: function () { return "LOGIN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "renewToken", {
            get: function () { return "RENEW_TOKEN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "unknown", {
            get: function () { return "UNKNOWN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "homeAccountIdentifier", {
            get: function () { return "homeAccountIdentifier"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "common", {
            get: function () { return "common"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "openidScope", {
            get: function () { return "openid"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "profileScope", {
            get: function () { return "profile"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "cacheLocationLocal", {
            get: function () { return "localStorage"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "cacheLocationSession", {
            get: function () { return "sessionStorage"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "interactionTypeRedirect", {
            get: function () { return "redirectInteraction"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "interactionTypePopup", {
            get: function () { return "popupInteraction"; },
            enumerable: true,
            configurable: true
        });
        Constants._popUpWidth = 483;
        Constants._popUpHeight = 600;
        return Constants;
    }());
    /**
     * @hidden
     * CacheKeys for 'authority' and 'account'
     */
    var CacheKeys = {
        AUTHORITY: "msal.authority",
        ACQUIRE_TOKEN_ACCOUNT: "msal.acquireTokenAccount"
    };
    var AADTrustedHostList = {
        "login.windows.net": "login.windows.net",
        "login.chinacloudapi.cn": "login.chinacloudapi.cn",
        "login.cloudgovapi.us": "login.cloudgovapi.us",
        "login.microsoftonline.com": "login.microsoftonline.com",
        "login.microsoftonline.de": "login.microsoftonline.de",
        "login.microsoftonline.us": "login.microsoftonline.us"
    };
    /**
     * @hidden
     * SSO Types - generated to populate hints
     */
    var SSOTypes = {
        ACCOUNT: "account",
        SID: "sid",
        LOGIN_HINT: "login_hint",
        ID_TOKEN: "id_token",
        DOMAIN_HINT: "domain_hint",
        ORGANIZATIONS: "organizations",
        CONSUMERS: "consumers",
        ACCOUNT_ID: "accountIdentifier",
        HOMEACCOUNT_ID: "homeAccountIdentifier",
        LOGIN_REQ: "login_req",
        DOMAIN_REQ: "domain_req"
    };
    /**
     * @hidden
     */
    var BlacklistedEQParams = [
        SSOTypes.SID,
        SSOTypes.LOGIN_HINT
    ];
    /**
     * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
     * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
     * internal partners too, hence the choice of generic "string" type instead of the "enum"
     * @hidden
     */
    var PromptState = {
        LOGIN: "login",
        SELECT_ACCOUNT: "select_account",
        CONSENT: "consent",
        NONE: "none",
    };
    /**
     * MSAL JS Library Version
     */
    function libraryVersion() {
        return "1.1.3";
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    var ScopeSet = /** @class */ (function () {
        function ScopeSet() {
        }
        /**
       * Check if there are dup scopes in a given request
       *
       * @param cachedScopes
       * @param scopes
       */
        // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker
        ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {
            cachedScopes = this.convertToLowerCase(cachedScopes);
            for (var i = 0; i < scopes.length; i++) {
                if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Check if a given scope is present in the request
         *
         * @param cachedScopes
         * @param scopes
         */
        ScopeSet.containsScope = function (cachedScopes, scopes) {
            cachedScopes = this.convertToLowerCase(cachedScopes);
            return scopes.every(function (value) { return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });
        };
        /**
         * toLower
         *
         * @param scopes
         */
        // TODO: Rename this, too generic name for a function that only deals with scopes
        ScopeSet.convertToLowerCase = function (scopes) {
            return scopes.map(function (scope) { return scope.toLowerCase(); });
        };
        /**
         * remove one element from a scope array
         *
         * @param scopes
         * @param scope
         */
        // TODO: Rename this, too generic name for a function that only deals with scopes
        ScopeSet.removeElement = function (scopes, scope) {
            return scopes.filter(function (value) { return value !== scope; });
        };
        /**
         * Parse the scopes into a formatted scopeList
         * @param scopes
         */
        ScopeSet.parseScope = function (scopes) {
            var scopeList = "";
            if (scopes) {
                for (var i = 0; i < scopes.length; ++i) {
                    scopeList += (i !== scopes.length - 1) ? scopes[i] + " " : scopes[i];
                }
            }
            return scopeList;
        };
        return ScopeSet;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var StringUtils = /** @class */ (function () {
        function StringUtils() {
        }
        /**
         * Check if a string is empty
         *
         * @param str
         */
        StringUtils.isEmpty = function (str) {
            return (typeof str === "undefined" || !str || 0 === str.length);
        };
        return StringUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var UrlUtils = /** @class */ (function () {
        function UrlUtils() {
        }
        /**
         * generates the URL with QueryString Parameters
         * @param scopes
         */
        UrlUtils.createNavigateUrl = function (serverRequestParams) {
            var str = this.createNavigationUrlString(serverRequestParams);
            var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint;
            // if the endpoint already has queryparams, lets add to it, otherwise add the first one
            if (authEndpoint.indexOf("?") < 0) {
                authEndpoint += "?";
            }
            else {
                authEndpoint += "&";
            }
            var requestUrl = "" + authEndpoint + str.join("&");
            return requestUrl;
        };
        /**
         * Generate the array of all QueryStringParams to be sent to the server
         * @param scopes
         */
        UrlUtils.createNavigationUrlString = function (serverRequestParams) {
            var scopes = serverRequestParams.scopes;
            if (scopes.indexOf(serverRequestParams.clientId) === -1) {
                scopes.push(serverRequestParams.clientId);
            }
            var str = [];
            str.push("response_type=" + serverRequestParams.responseType);
            this.translateclientIdUsedInScope(scopes, serverRequestParams.clientId);
            str.push("scope=" + encodeURIComponent(ScopeSet.parseScope(scopes)));
            str.push("client_id=" + encodeURIComponent(serverRequestParams.clientId));
            str.push("redirect_uri=" + encodeURIComponent(serverRequestParams.redirectUri));
            str.push("state=" + encodeURIComponent(serverRequestParams.state));
            str.push("nonce=" + encodeURIComponent(serverRequestParams.nonce));
            str.push("client_info=1");
            str.push("x-client-SKU=" + serverRequestParams.xClientSku);
            str.push("x-client-Ver=" + serverRequestParams.xClientVer);
            if (serverRequestParams.promptValue) {
                str.push("prompt=" + encodeURIComponent(serverRequestParams.promptValue));
            }
            if (serverRequestParams.claimsValue) {
                str.push("claims=" + encodeURIComponent(serverRequestParams.claimsValue));
            }
            if (serverRequestParams.queryParameters) {
                str.push(serverRequestParams.queryParameters);
            }
            if (serverRequestParams.extraQueryParameters) {
                str.push(serverRequestParams.extraQueryParameters);
            }
            str.push("client-request-id=" + encodeURIComponent(serverRequestParams.correlationId));
            return str;
        };
        /**
         * append the required scopes: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes
         * @param scopes
         */
        UrlUtils.translateclientIdUsedInScope = function (scopes, clientId) {
            var clientIdIndex = scopes.indexOf(clientId);
            if (clientIdIndex >= 0) {
                scopes.splice(clientIdIndex, 1);
                if (scopes.indexOf("openid") === -1) {
                    scopes.push("openid");
                }
                if (scopes.indexOf("profile") === -1) {
                    scopes.push("profile");
                }
            }
        };
        /**
         * Returns current window URL as redirect uri
         */
        UrlUtils.getDefaultRedirectUri = function () {
            return window.location.href.split("?")[0].split("#")[0];
        };
        /**
         * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
         * @param href The url
         * @param tenantId The tenant id to replace
         */
        UrlUtils.replaceTenantPath = function (url, tenantId) {
            url = url.toLowerCase();
            var urlObject = this.GetUrlComponents(url);
            var pathArray = urlObject.PathSegments;
            if (tenantId && (pathArray.length !== 0 && (pathArray[0] === Constants$1.common || pathArray[0] === SSOTypes.ORGANIZATIONS))) {
                pathArray[0] = tenantId;
            }
            return this.constructAuthorityUriFromObject(urlObject, pathArray);
        };
        UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {
            return this.CanonicalizeUri(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + pathArray.join("/"));
        };
        /**
         * Parses out the components from a url string.
         * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
         */
        UrlUtils.GetUrlComponents = function (url) {
            if (!url) {
                throw "Url required";
            }
            // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
            var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
            var match = url.match(regEx);
            if (!match || match.length < 6) {
                throw "Valid url required";
            }
            var urlComponents = {
                Protocol: match[1],
                HostNameAndPort: match[4],
                AbsolutePath: match[5]
            };
            var pathSegments = urlComponents.AbsolutePath.split("/");
            pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
            urlComponents.PathSegments = pathSegments;
            return urlComponents;
        };
        /**
         * Given a url or path, append a trailing slash if one doesnt exist
         *
         * @param url
         */
        UrlUtils.CanonicalizeUri = function (url) {
            if (url) {
                url = url.toLowerCase();
            }
            if (url && !UrlUtils.endsWith(url, "/")) {
                url += "/";
            }
            return url;
        };
        /**
         * Checks to see if the url ends with the suffix
         * Required because we are compiling for es5 instead of es6
         * @param url
         * @param str
         */
        // TODO: Rename this, not clear what it is supposed to do
        UrlUtils.endsWith = function (url, suffix) {
            if (!url || !suffix) {
                return false;
            }
            return url.indexOf(suffix, url.length - suffix.length) !== -1;
        };
        /**
         * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters
         * @param url
         * @param name
         */
        UrlUtils.urlRemoveQueryStringParameter = function (url, name) {
            if (StringUtils.isEmpty(url)) {
                return url;
            }
            var regex = new RegExp("(\\&" + name + "=)[^\&]+");
            url = url.replace(regex, "");
            // name=value&
            regex = new RegExp("(" + name + "=)[^\&]+&");
            url = url.replace(regex, "");
            // name=value
            regex = new RegExp("(" + name + "=)[^\&]+");
            url = url.replace(regex, "");
            return url;
        };
        /**
         * @hidden
         * @ignore
         *
         * Returns the anchor part(#) of the URL
         */
        UrlUtils.getHashFromUrl = function (urlStringOrFragment) {
            var hashIndex1 = urlStringOrFragment.indexOf("#");
            var hashIndex2 = urlStringOrFragment.indexOf("#/");
            if (hashIndex2 > -1) {
                return urlStringOrFragment.substring(hashIndex2 + 2);
            }
            else if (hashIndex1 > -1) {
                return urlStringOrFragment.substring(hashIndex1 + 1);
            }
            return urlStringOrFragment;
        };
        return UrlUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var AccessTokenKey = /** @class */ (function () {
        function AccessTokenKey(authority, clientId, scopes, uid, utid) {
            this.authority = UrlUtils.CanonicalizeUri(authority);
            this.clientId = clientId;
            this.scopes = scopes;
            this.homeAccountIdentifier = CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);
        }
        return AccessTokenKey;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var AccessTokenValue = /** @class */ (function () {
        function AccessTokenValue(accessToken, idToken, expiresIn, homeAccountIdentifier) {
            this.accessToken = accessToken;
            this.idToken = idToken;
            this.expiresIn = expiresIn;
            this.homeAccountIdentifier = homeAccountIdentifier;
        }
        return AccessTokenValue;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var AuthErrorMessage = {
        unexpectedError: {
            code: "unexpected_error",
            desc: "Unexpected error in authentication."
        }
    };
    /**
    * General error class thrown by the MSAL.js library.
    */
    var AuthError = /** @class */ (function (_super) {
        __extends(AuthError, _super);
        function AuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorMessage) || this;
            Object.setPrototypeOf(_this, AuthError.prototype);
            _this.errorCode = errorCode;
            _this.errorMessage = errorMessage;
            _this.name = "AuthError";
            return _this;
        }
        AuthError.createUnexpectedError = function (errDesc) {
            return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
        };
        return AuthError;
    }(Error));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var ClientAuthErrorMessage = {
        multipleMatchingTokens: {
            code: "multiple_matching_tokens",
            desc: "The cache contains multiple tokens satisfying the requirements. " +
                "Call AcquireToken again providing more requirements like authority."
        },
        multipleCacheAuthorities: {
            code: "multiple_authorities",
            desc: "Multiple authorities found in the cache. Pass authority in the API overload."
        },
        endpointResolutionError: {
            code: "endpoints_resolution_error",
            desc: "Error: could not resolve endpoints. Please check network and try again."
        },
        popUpWindowError: {
            code: "popup_window_error",
            desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
        },
        tokenRenewalError: {
            code: "token_renewal_error",
            desc: "Token renewal operation failed due to timeout."
        },
        invalidIdToken: {
            code: "invalid_id_token",
            desc: "Invalid ID token format."
        },
        invalidStateError: {
            code: "invalid_state_error",
            desc: "Invalid state."
        },
        nonceMismatchError: {
            code: "nonce_mismatch_error",
            desc: "Nonce is not matching, Nonce received: "
        },
        loginProgressError: {
            code: "login_progress_error",
            desc: "Login_In_Progress: Error during login call - login is already in progress."
        },
        acquireTokenProgressError: {
            code: "acquiretoken_progress_error",
            desc: "AcquireToken_In_Progress: Error during login call - login is already in progress."
        },
        userCancelledError: {
            code: "user_cancelled",
            desc: "User cancelled the flow."
        },
        callbackError: {
            code: "callback_error",
            desc: "Error occurred in token received callback function."
        },
        userLoginRequiredError: {
            code: "user_login_error",
            desc: "User login is required."
        },
        userDoesNotExistError: {
            code: "user_non_existent",
            desc: "User object does not exist. Please call a login API."
        },
        clientInfoDecodingError: {
            code: "client_info_decoding_error",
            desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
        },
        clientInfoNotPopulatedError: {
            code: "client_info_not_populated_error",
            desc: "The service did not populate client_info in the response, Please verify with the service team"
        },
        nullOrEmptyIdToken: {
            code: "null_or_empty_id_token",
            desc: "The idToken is null or empty. Please review the trace to determine the root cause."
        },
        idTokenNotParsed: {
            code: "id_token_parsing_error",
            desc: "ID token cannot be parsed. Please review stack trace to determine root cause."
        },
        tokenEncodingError: {
            code: "token_encoding_error",
            desc: "The token to be decoded is not encoded correctly."
        },
        invalidInteractionType: {
            code: "invalid_interaction_type",
            desc: "The interaction type passed to the handler was incorrect or unknown"
        }
    };
    /**
     * Error thrown when there is an error in the client code running on the browser.
     */
    var ClientAuthError = /** @class */ (function (_super) {
        __extends(ClientAuthError, _super);
        function ClientAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientAuthError";
            Object.setPrototypeOf(_this, ClientAuthError.prototype);
            return _this;
        }
        ClientAuthError.createEndpointResolutionError = function (errDetail) {
            var errorMessage = ClientAuthErrorMessage.endpointResolutionError.desc;
            if (errDetail && !StringUtils.isEmpty(errDetail)) {
                errorMessage += " Details: " + errDetail;
            }
            return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, errorMessage);
        };
        ClientAuthError.createMultipleMatchingTokensInCacheError = function (scope) {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, "Cache error for scope " + scope + ": " + ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
        };
        ClientAuthError.createMultipleAuthoritiesInCacheError = function (scope) {
            return new ClientAuthError(ClientAuthErrorMessage.multipleCacheAuthorities.code, "Cache error for scope " + scope + ": " + ClientAuthErrorMessage.multipleCacheAuthorities.desc + ".");
        };
        ClientAuthError.createPopupWindowError = function (errDetail) {
            var errorMessage = ClientAuthErrorMessage.popUpWindowError.desc;
            if (errDetail && !StringUtils.isEmpty(errDetail)) {
                errorMessage += " Details: " + errDetail;
            }
            return new ClientAuthError(ClientAuthErrorMessage.popUpWindowError.code, errorMessage);
        };
        ClientAuthError.createTokenRenewalTimeoutError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenRenewalError.code, ClientAuthErrorMessage.tokenRenewalError.desc);
        };
        ClientAuthError.createInvalidIdTokenError = function (idToken) {
            return new ClientAuthError(ClientAuthErrorMessage.invalidIdToken.code, ClientAuthErrorMessage.invalidIdToken.desc + " Given token: " + idToken);
        };
        //TODO: Is this not a security flaw to send the user the state expected??
        ClientAuthError.createInvalidStateError = function (invalidState, actualState) {
            return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " " + invalidState + ", state expected : " + actualState + ".");
        };
        //TODO: Is this not a security flaw to send the user the Nonce expected??
        ClientAuthError.createNonceMismatchError = function (invalidNonce, actualNonce) {
            return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc + " " + invalidNonce + ", nonce expected : " + actualNonce + ".");
        };
        ClientAuthError.createLoginInProgressError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.loginProgressError.code, ClientAuthErrorMessage.loginProgressError.desc);
        };
        ClientAuthError.createAcquireTokenInProgressError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.acquireTokenProgressError.code, ClientAuthErrorMessage.acquireTokenProgressError.desc);
        };
        ClientAuthError.createUserCancelledError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userCancelledError.code, ClientAuthErrorMessage.userCancelledError.desc);
        };
        ClientAuthError.createErrorInCallbackFunction = function (errorDesc) {
            return new ClientAuthError(ClientAuthErrorMessage.callbackError.code, ClientAuthErrorMessage.callbackError.desc + " " + errorDesc + ".");
        };
        ClientAuthError.createUserLoginRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userLoginRequiredError.code, ClientAuthErrorMessage.userLoginRequiredError.desc);
        };
        ClientAuthError.createUserDoesNotExistError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userDoesNotExistError.code, ClientAuthErrorMessage.userDoesNotExistError.desc);
        };
        ClientAuthError.createClientInfoDecodingError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
        };
        ClientAuthError.createClientInfoNotPopulatedError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoNotPopulatedError.code, ClientAuthErrorMessage.clientInfoNotPopulatedError.desc + " Failed with error: " + caughtError);
        };
        ClientAuthError.createIdTokenNullOrEmptyError = function (invalidRawTokenString) {
            return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyIdToken.code, ClientAuthErrorMessage.nullOrEmptyIdToken.desc + " Raw ID Token Value: " + invalidRawTokenString);
        };
        ClientAuthError.createIdTokenParsingError = function (caughtParsingError) {
            return new ClientAuthError(ClientAuthErrorMessage.idTokenNotParsed.code, ClientAuthErrorMessage.idTokenNotParsed.desc + " Failed with error: " + caughtParsingError);
        };
        ClientAuthError.createTokenEncodingError = function (incorrectlyEncodedToken) {
            return new ClientAuthError(ClientAuthErrorMessage.tokenEncodingError.code, ClientAuthErrorMessage.tokenEncodingError.desc + " Attempted to decode: " + incorrectlyEncodedToken);
        };
        ClientAuthError.createInvalidInteractionTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidInteractionType.code, ClientAuthErrorMessage.invalidInteractionType.desc);
        };
        return ClientAuthError;
    }(AuthError));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var ClientConfigurationErrorMessage = {
        configurationNotSet: {
            code: "no_config_set",
            desc: "Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object."
        },
        invalidCacheLocation: {
            code: "invalid_cache_location",
            desc: "The cache location provided is not valid."
        },
        noStorageSupported: {
            code: "browser_storage_not_supported",
            desc: "localStorage and sessionStorage are not supported."
        },
        noRedirectCallbacksSet: {
            code: "no_redirect_callbacks",
            desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        invalidCallbackObject: {
            code: "invalid_callback_object",
            desc: "The object passed for the callback was invalid. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        scopesRequired: {
            code: "scopes_required",
            desc: "Scopes are required to obtain an access token."
        },
        emptyScopes: {
            code: "empty_input_scopes_error",
            desc: "Scopes cannot be passed as empty array."
        },
        nonArrayScopes: {
            code: "nonarray_input_scopes_error",
            desc: "Scopes cannot be passed as non-array."
        },
        clientScope: {
            code: "clientid_input_scopes_error",
            desc: "Client ID can only be provided as a single scope."
        },
        invalidPrompt: {
            code: "invalid_prompt_value",
            desc: "Supported prompt values are 'login', 'select_account', 'consent' and 'none'",
        },
        invalidAuthorityType: {
            code: "invalid_authority_type",
            desc: "The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>."
        },
        authorityUriInsecure: {
            code: "authority_uri_insecure",
            desc: "Authority URIs must use https."
        },
        authorityUriInvalidPath: {
            code: "authority_uri_invalid_path",
            desc: "Given authority URI is invalid."
        },
        unsupportedAuthorityValidation: {
            code: "unsupported_authority_validation",
            desc: "The authority validation is not supported for this authority type."
        },
        b2cAuthorityUriInvalidPath: {
            code: "b2c_authority_uri_invalid_path",
            desc: "The given URI for the B2C authority is invalid."
        },
        claimsRequestParsingError: {
            code: "claims_request_parsing_error",
            desc: "Could not parse the given claims request object."
        },
        emptyRequestError: {
            code: "empty_request_error",
            desc: "Request object is required."
        },
        telemetryConfigError: {
            code: "telemetry_config_error",
            desc: "Telemetry config is not configured with required values"
        }
    };
    /**
     * Error thrown when there is an error in configuration of the .js library.
     */
    var ClientConfigurationError = /** @class */ (function (_super) {
        __extends(ClientConfigurationError, _super);
        function ClientConfigurationError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientConfigurationError";
            Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
            return _this;
        }
        ClientConfigurationError.createNoSetConfigurationError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.configurationNotSet.code, "" + ClientConfigurationErrorMessage.configurationNotSet.desc);
        };
        ClientConfigurationError.createInvalidCacheLocationConfigError = function (givenCacheLocation) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCacheLocation.code, ClientConfigurationErrorMessage.invalidCacheLocation.desc + " Provided value: " + givenCacheLocation + ". Possible values are: " + Constants$1.cacheLocationLocal + ", " + Constants$1.cacheLocationSession + ".");
        };
        ClientConfigurationError.createNoStorageSupportedError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.noStorageSupported.code, ClientConfigurationErrorMessage.noStorageSupported.desc);
        };
        ClientConfigurationError.createRedirectCallbacksNotSetError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.noRedirectCallbacksSet.code, ClientConfigurationErrorMessage.noRedirectCallbacksSet.desc);
        };
        ClientConfigurationError.createInvalidCallbackObjectError = function (callbackObject) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCallbackObject.code, ClientConfigurationErrorMessage.invalidCallbackObject.desc + " Given value for callback function: " + callbackObject);
        };
        ClientConfigurationError.createEmptyScopesArrayError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopes.code, ClientConfigurationErrorMessage.emptyScopes.desc + " Given value: " + scopesValue + ".");
        };
        ClientConfigurationError.createScopesNonArrayError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopes.code, ClientConfigurationErrorMessage.nonArrayScopes.desc + " Given value: " + scopesValue + ".");
        };
        ClientConfigurationError.createClientIdSingleScopeError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.clientScope.code, ClientConfigurationErrorMessage.clientScope.desc + " Given value: " + scopesValue + ".");
        };
        ClientConfigurationError.createScopesRequiredError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.scopesRequired.code, ClientConfigurationErrorMessage.scopesRequired.desc + " Given value: " + scopesValue);
        };
        ClientConfigurationError.createInvalidPromptError = function (promptValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
        };
        ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
        };
        ClientConfigurationError.createEmptyRequestError = function () {
            var _a = ClientConfigurationErrorMessage.emptyRequestError, code = _a.code, desc = _a.desc;
            return new ClientConfigurationError(code, desc);
        };
        ClientConfigurationError.createTelemetryConfigError = function (config) {
            var _a = ClientConfigurationErrorMessage.telemetryConfigError, code = _a.code, desc = _a.desc;
            var requiredKeys = {
                applicationName: "string",
                applicationVersion: "string",
                telemetryEmitter: "function"
            };
            var missingKeys = Object.keys(requiredKeys)
                .reduce(function (keys, key) {
                return config[key] ? keys : keys.concat([key + " (" + requiredKeys[key] + ")"]);
            }, []);
            return new ClientConfigurationError(code, desc + " mising values: " + missingKeys.join(","));
        };
        return ClientConfigurationError;
    }(ClientAuthError));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    function validateClaimsRequest(request) {
        if (!request.claimsRequest) {
            return;
        }
        var claims;
        try {
            claims = JSON.parse(request.claimsRequest);
        }
        catch (e) {
            throw ClientConfigurationError.createClaimsRequestParsingError(e);
        }
        // TODO: More validation will be added when the server team tells us how they have actually implemented claims
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
     * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12
     * @hidden
     */
    var ServerRequestParameters = /** @class */ (function () {
        /**
         * Constructor
         * @param authority
         * @param clientId
         * @param scope
         * @param responseType
         * @param redirectUri
         * @param state
         */
        function ServerRequestParameters(authority, clientId, scope, responseType, redirectUri, state) {
            this.authorityInstance = authority;
            this.clientId = clientId;
            if (!scope) {
                this.scopes = [clientId];
            }
            else {
                this.scopes = scope.slice();
            }
            this.nonce = CryptoUtils.createNewGuid();
            this.state = state && !StringUtils.isEmpty(state) ? CryptoUtils.createNewGuid() + "|" + state : CryptoUtils.createNewGuid();
            // TODO: Change this to user passed vs generated with the new PR
            this.correlationId = CryptoUtils.createNewGuid();
            // telemetry information
            this.xClientSku = "MSAL.JS";
            this.xClientVer = libraryVersion();
            this.responseType = responseType;
            this.redirectUri = redirectUri;
        }
        Object.defineProperty(ServerRequestParameters.prototype, "authority", {
            get: function () {
                return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @hidden
         * @ignore
         *
         * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers
         * @param request
         * @param serverAuthenticationRequest
         */
        ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {
            var queryParameters = {};
            if (request) {
                // add the prompt parameter to serverRequestParameters if passed
                if (request.prompt) {
                    this.validatePromptParameter(request.prompt);
                    this.promptValue = request.prompt;
                }
                // Add claims challenge to serverRequestParameters if passed
                if (request.claimsRequest) {
                    validateClaimsRequest(request);
                    this.claimsValue = request.claimsRequest;
                }
                // if the developer provides one of these, give preference to developer choice
                if (ServerRequestParameters.isSSOParam(request)) {
                    queryParameters = this.constructUnifiedCacheQueryParameter(request, null);
                }
            }
            if (adalIdTokenObject) {
                queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);
            }
            // adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint
            // this.logger.verbose("Calling addHint parameters");
            queryParameters = this.addHintParameters(account, queryParameters);
            // sanity check for developer passed extraQueryParameters
            var eQParams;
            if (request) {
                eQParams = this.sanitizeEQParams(request);
            }
            // Populate the extraQueryParameters to be sent to the server
            this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);
            this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);
        };
        //#region QueryParam helpers
        /**
         * @hidden
         * @ignore
         *
         * Utility to test if valid prompt value is passed in the request
         * @param request
         */
        ServerRequestParameters.prototype.validatePromptParameter = function (prompt) {
            if (!([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) >= 0)) {
                throw ClientConfigurationError.createInvalidPromptError(prompt);
            }
        };
        /**
         * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer
         * in any login() or acquireToken() calls
         * @param idTokenObject
         * @param extraQueryParameters
         * @param sid
         * @param loginHint
         */
        //TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.
        ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {
            // preference order: account > sid > login_hint
            var ssoType;
            var ssoData;
            var serverReqParam = {};
            // if account info is passed, account.sid > account.login_hint
            if (request) {
                if (request.account) {
                    var account = request.account;
                    if (account.sid) {
                        ssoType = SSOTypes.SID;
                        ssoData = account.sid;
                    }
                    else if (account.userName) {
                        ssoType = SSOTypes.LOGIN_HINT;
                        ssoData = account.userName;
                    }
                }
                // sid from request
                else if (request.sid) {
                    ssoType = SSOTypes.SID;
                    ssoData = request.sid;
                }
                // loginHint from request
                else if (request.loginHint) {
                    ssoType = SSOTypes.LOGIN_HINT;
                    ssoData = request.loginHint;
                }
            }
            // adalIdToken retrieved from cache
            else if (idTokenObject) {
                if (idTokenObject.hasOwnProperty(Constants$1.upn)) {
                    ssoType = SSOTypes.ID_TOKEN;
                    ssoData = idTokenObject.upn;
                }
                else {
                    ssoType = SSOTypes.ORGANIZATIONS;
                    ssoData = null;
                }
            }
            serverReqParam = this.addSSOParameter(ssoType, ssoData);
            // add the HomeAccountIdentifier info/ domain_hint
            if (request && request.account && request.account.homeAccountIdentifier) {
                serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);
            }
            return serverReqParam;
        };
        /**
         * @hidden
         *
         * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time
         * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user
         * domain_req utid received as part of the clientInfo
         * login_req uid received as part of clientInfo
         * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters
         *
         * @param {@link Account} account - Account for which the token is requested
         * @param queryparams
         * @param {@link ServerRequestParameters}
         * @ignore
         */
        ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {
            // This is a final check for all queryParams added so far; preference order: sid > login_hint
            // sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters
            if (account && !qParams[SSOTypes.SID]) {
                // sid - populate only if login_hint is not already populated and the account has sid
                var populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;
                if (populateSID) {
                    qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);
                }
                // login_hint - account.userName
                else {
                    var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);
                    if (populateLoginHint) {
                        qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);
                    }
                }
                var populateReqParams = !qParams[SSOTypes.DOMAIN_REQ] && !qParams[SSOTypes.LOGIN_REQ];
                if (populateReqParams) {
                    qParams = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);
                }
            }
            return qParams;
        };
        /**
         * Add SID to extraQueryParameters
         * @param sid
         */
        ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {
            if (!ssoParam) {
                ssoParam = {};
            }
            if (!ssoData) {
                return ssoParam;
            }
            switch (ssoType) {
                case SSOTypes.SID: {
                    ssoParam[SSOTypes.SID] = ssoData;
                    break;
                }
                case SSOTypes.ID_TOKEN: {
                    ssoParam[SSOTypes.LOGIN_HINT] = ssoData;
                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;
                    break;
                }
                case SSOTypes.LOGIN_HINT: {
                    ssoParam[SSOTypes.LOGIN_HINT] = ssoData;
                    break;
                }
                case SSOTypes.ORGANIZATIONS: {
                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;
                    break;
                }
                case SSOTypes.CONSUMERS: {
                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;
                    break;
                }
                case SSOTypes.HOMEACCOUNT_ID: {
                    var homeAccountId = ssoData.split(".");
                    var uid = CryptoUtils.base64Decode(homeAccountId[0]);
                    var utid = CryptoUtils.base64Decode(homeAccountId[1]);
                    // TODO: domain_req and login_req are not needed according to eSTS team
                    ssoParam[SSOTypes.LOGIN_REQ] = uid;
                    ssoParam[SSOTypes.DOMAIN_REQ] = utid;
                    if (utid === Constants$1.consumersUtid) {
                        ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;
                    }
                    else {
                        ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;
                    }
                    break;
                }
                case SSOTypes.LOGIN_REQ: {
                    ssoParam[SSOTypes.LOGIN_REQ] = ssoData;
                    break;
                }
                case SSOTypes.DOMAIN_REQ: {
                    ssoParam[SSOTypes.DOMAIN_REQ] = ssoData;
                    break;
                }
            }
            return ssoParam;
        };
        /**
         * @hidden
         * @ignore
         * Removes unnecessary or duplicate query parameters from extraQueryParameters
         * @param request
         */
        ServerRequestParameters.prototype.sanitizeEQParams = function (request) {
            var eQParams = request.extraQueryParameters;
            if (!eQParams) {
                return null;
            }
            if (request.claimsRequest) {
                // this.logger.warning("Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.");
                delete eQParams[Constants$1.claims];
            }
            BlacklistedEQParams.forEach(function (param) {
                if (eQParams[param]) {
                    // this.logger.warning("Removed duplicate " + param + " from extraQueryParameters. Please use the " + param + " field in request object.");
                    delete eQParams[param];
                }
            });
            return eQParams;
        };
        /**
         * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed
         * @param extraQueryParameters
         */
        ServerRequestParameters.generateQueryParametersString = function (queryParameters) {
            var paramsString = null;
            if (queryParameters) {
                Object.keys(queryParameters).forEach(function (key) {
                    if (paramsString == null) {
                        paramsString = key + "=" + encodeURIComponent(queryParameters[key]);
                    }
                    else {
                        paramsString += "&" + key + "=" + encodeURIComponent(queryParameters[key]);
                    }
                });
            }
            return paramsString;
        };
        //#endregion
        /**
         * Check to see if there are SSO params set in the Request
         * @param request
         */
        ServerRequestParameters.isSSOParam = function (request) {
            return request && (request.account || request.sid || request.loginHint);
        };
        return ServerRequestParameters;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var ClientInfo = /** @class */ (function () {
        function ClientInfo(rawClientInfo) {
            if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {
                this.uid = "";
                this.utid = "";
                return;
            }
            try {
                var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);
                var clientInfo = JSON.parse(decodedClientInfo);
                if (clientInfo) {
                    if (clientInfo.hasOwnProperty("uid")) {
                        this.uid = clientInfo.uid;
                    }
                    if (clientInfo.hasOwnProperty("utid")) {
                        this.utid = clientInfo.utid;
                    }
                }
            }
            catch (e) {
                throw ClientAuthError.createClientInfoDecodingError(e);
            }
        }
        Object.defineProperty(ClientInfo.prototype, "uid", {
            get: function () {
                return this._uid ? this._uid : "";
            },
            set: function (uid) {
                this._uid = uid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientInfo.prototype, "utid", {
            get: function () {
                return this._utid ? this._utid : "";
            },
            set: function (utid) {
                this._utid = utid;
            },
            enumerable: true,
            configurable: true
        });
        return ClientInfo;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var TokenUtils = /** @class */ (function () {
        function TokenUtils() {
        }
        /**
         * decode a JWT
         *
         * @param jwtToken
         */
        TokenUtils.decodeJwt = function (jwtToken) {
            if (StringUtils.isEmpty(jwtToken)) {
                return null;
            }
            var idTokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
            var matches = idTokenPartsRegex.exec(jwtToken);
            if (!matches || matches.length < 4) {
                //this._requestContext.logger.warn("The returned id_token is not parseable.");
                return null;
            }
            var crackedToken = {
                header: matches[1],
                JWSPayload: matches[2],
                JWSSig: matches[3]
            };
            return crackedToken;
        };
        /**
         * Extract IdToken by decoding the RAWIdToken
         *
         * @param encodedIdToken
         */
        TokenUtils.extractIdToken = function (encodedIdToken) {
            // id token will be decoded to get the username
            var decodedToken = this.decodeJwt(encodedIdToken);
            if (!decodedToken) {
                return null;
            }
            try {
                var base64IdToken = decodedToken.JWSPayload;
                var base64Decoded = CryptoUtils.base64Decode(base64IdToken);
                if (!base64Decoded) {
                    //this._requestContext.logger.info("The returned id_token could not be base64 url safe decoded.");
                    return null;
                }
                // ECMA script has JSON built-in support
                return JSON.parse(base64Decoded);
            }
            catch (err) {
                //this._requestContext.logger.error("The returned id_token could not be decoded" + err);
            }
            return null;
        };
        return TokenUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var IdToken = /** @class */ (function () {
        /* tslint:disable:no-string-literal */
        function IdToken(rawIdToken) {
            if (StringUtils.isEmpty(rawIdToken)) {
                throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);
            }
            try {
                this.rawIdToken = rawIdToken;
                this.claims = TokenUtils.extractIdToken(rawIdToken);
                if (this.claims) {
                    if (this.claims.hasOwnProperty("iss")) {
                        this.issuer = this.claims["iss"];
                    }
                    if (this.claims.hasOwnProperty("oid")) {
                        this.objectId = this.claims["oid"];
                    }
                    if (this.claims.hasOwnProperty("sub")) {
                        this.subject = this.claims["sub"];
                    }
                    if (this.claims.hasOwnProperty("tid")) {
                        this.tenantId = this.claims["tid"];
                    }
                    if (this.claims.hasOwnProperty("ver")) {
                        this.version = this.claims["ver"];
                    }
                    if (this.claims.hasOwnProperty("preferred_username")) {
                        this.preferredName = this.claims["preferred_username"];
                    }
                    if (this.claims.hasOwnProperty("name")) {
                        this.name = this.claims["name"];
                    }
                    if (this.claims.hasOwnProperty("nonce")) {
                        this.nonce = this.claims["nonce"];
                    }
                    if (this.claims.hasOwnProperty("exp")) {
                        this.expiration = this.claims["exp"];
                    }
                    if (this.claims.hasOwnProperty("home_oid")) {
                        this.homeObjectId = this.claims["home_oid"];
                    }
                    if (this.claims.hasOwnProperty("sid")) {
                        this.sid = this.claims["sid"];
                    }
                    /* tslint:enable:no-string-literal */
                }
            }
            catch (e) {
                // TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.
                // Need to add better error handling here to account for being unable to decode jwts.
                throw ClientAuthError.createIdTokenParsingError(e);
            }
        }
        return IdToken;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var AccessTokenCacheItem = /** @class */ (function () {
        function AccessTokenCacheItem(key, value) {
            this.key = key;
            this.value = value;
        }
        return AccessTokenCacheItem;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var Storage = /** @class */ (function () {
        function Storage(cacheLocation) {
            if (Storage.instance) {
                return Storage.instance;
            }
            this.cacheLocation = cacheLocation;
            this.localStorageSupported = typeof window[this.cacheLocation] !== "undefined" && window[this.cacheLocation] != null;
            this.sessionStorageSupported = typeof window[cacheLocation] !== "undefined" && window[cacheLocation] != null;
            Storage.instance = this;
            if (!this.localStorageSupported && !this.sessionStorageSupported) {
                throw ClientConfigurationError.createNoStorageSupportedError();
            }
            return Storage.instance;
        }
        // add value to storage
        Storage.prototype.setItem = function (key, value, enableCookieStorage) {
            if (window[this.cacheLocation]) {
                window[this.cacheLocation].setItem(key, value);
            }
            if (enableCookieStorage) {
                this.setItemCookie(key, value);
            }
        };
        // get one item by key from storage
        Storage.prototype.getItem = function (key, enableCookieStorage) {
            if (enableCookieStorage && this.getItemCookie(key)) {
                return this.getItemCookie(key);
            }
            if (window[this.cacheLocation]) {
                return window[this.cacheLocation].getItem(key);
            }
            return null;
        };
        // remove value from storage
        Storage.prototype.removeItem = function (key) {
            if (window[this.cacheLocation]) {
                return window[this.cacheLocation].removeItem(key);
            }
        };
        // clear storage (remove all items from it)
        Storage.prototype.clear = function () {
            if (window[this.cacheLocation]) {
                return window[this.cacheLocation].clear();
            }
        };
        Storage.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {
            var results = [];
            var accessTokenCacheItem;
            var storage = window[this.cacheLocation];
            if (storage) {
                var key = void 0;
                for (key in storage) {
                    if (storage.hasOwnProperty(key)) {
                        if (key.match(clientId) && key.match(homeAccountIdentifier)) {
                            var value = this.getItem(key);
                            if (value) {
                                accessTokenCacheItem = new AccessTokenCacheItem(JSON.parse(key), JSON.parse(value));
                                results.push(accessTokenCacheItem);
                            }
                        }
                    }
                }
            }
            return results;
        };
        Storage.prototype.removeAcquireTokenEntries = function (state) {
            var storage = window[this.cacheLocation];
            if (storage) {
                var key = void 0;
                for (key in storage) {
                    if (storage.hasOwnProperty(key)) {
                        if ((key.indexOf(CacheKeys.AUTHORITY) !== -1 || key.indexOf(CacheKeys.ACQUIRE_TOKEN_ACCOUNT) !== 1) && (!state || key.indexOf(state) !== -1)) {
                            var splitKey = key.split(Constants$1.resourceDelimiter);
                            var state_1 = void 0;
                            if (splitKey.length > 1) {
                                state_1 = splitKey[1];
                            }
                            if (state_1 && !this.tokenRenewalInProgress(state_1)) {
                                this.removeItem(key);
                                this.removeItem(Constants$1.renewStatus + state_1);
                                this.removeItem(Constants$1.stateLogin);
                                this.removeItem(Constants$1.stateAcquireToken);
                                this.setItemCookie(key, "", -1);
                            }
                        }
                    }
                }
            }
            this.clearCookie();
        };
        Storage.prototype.tokenRenewalInProgress = function (stateValue) {
            var storage = window[this.cacheLocation];
            var renewStatus = storage[Constants$1.renewStatus + stateValue];
            return !(!renewStatus || renewStatus !== Constants$1.tokenRenewStatusInProgress);
        };
        Storage.prototype.resetCacheItems = function () {
            var storage = window[this.cacheLocation];
            if (storage) {
                var key = void 0;
                for (key in storage) {
                    if (storage.hasOwnProperty(key)) {
                        if (key.indexOf(Constants$1.msal) !== -1) {
                            this.removeItem(key);
                        }
                    }
                }
                this.removeAcquireTokenEntries();
            }
        };
        Storage.prototype.setItemCookie = function (cName, cValue, expires) {
            var cookieStr = cName + "=" + cValue + ";";
            if (expires) {
                var expireTime = this.getCookieExpirationTime(expires);
                cookieStr += "expires=" + expireTime + ";";
            }
            document.cookie = cookieStr;
        };
        Storage.prototype.getItemCookie = function (cName) {
            var name = cName + "=";
            var ca = document.cookie.split(";");
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) === " ") {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        };
        Storage.prototype.getCookieExpirationTime = function (cookieLifeDays) {
            var today = new Date();
            var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);
            return expr.toUTCString();
        };
        Storage.prototype.clearCookie = function () {
            this.setItemCookie(Constants$1.nonceIdToken, "", -1);
            this.setItemCookie(Constants$1.stateLogin, "", -1);
            this.setItemCookie(Constants$1.loginRequest, "", -1);
            this.setItemCookie(Constants$1.stateAcquireToken, "", -1);
        };
        /**
         * Create acquireTokenAccountKey to cache account object
         * @param accountId
         * @param state
         */
        Storage.generateAcquireTokenAccountKey = function (accountId, state) {
            return CacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants$1.resourceDelimiter +
                ("" + accountId) + Constants$1.resourceDelimiter + ("" + state);
        };
        /**
         * Create authorityKey to cache authority
         * @param state
         */
        Storage.generateAuthorityKey = function (state) {
            return CacheKeys.AUTHORITY + Constants$1.resourceDelimiter + ("" + state);
        };
        return Storage;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * accountIdentifier       combination of idToken.uid and idToken.utid
     * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid
     * userName                idToken.preferred_username
     * name                    idToken.name
     * idToken                 idToken
     * sid                     idToken.sid - session identifier
     * environment             idtoken.issuer (the authority that issues the token)
     */
    var Account = /** @class */ (function () {
        /**
         * Creates an Account Object
         * @praram accountIdentifier
         * @param homeAccountIdentifier
         * @param userName
         * @param name
         * @param idToken
         * @param sid
         * @param environment
         */
        function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {
            this.accountIdentifier = accountIdentifier;
            this.homeAccountIdentifier = homeAccountIdentifier;
            this.userName = userName;
            this.name = name;
            // will be deprecated soon
            this.idToken = idTokenClaims;
            this.idTokenClaims = idTokenClaims;
            this.sid = sid;
            this.environment = environment;
        }
        /**
         * @hidden
         * @param idToken
         * @param clientInfo
         */
        Account.createAccount = function (idToken, clientInfo) {
            // create accountIdentifier
            var accountIdentifier = idToken.objectId || idToken.subject;
            // create homeAccountIdentifier
            var uid = clientInfo ? clientInfo.uid : "";
            var utid = clientInfo ? clientInfo.utid : "";
            var homeAccountIdentifier;
            if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {
                homeAccountIdentifier = CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);
            }
            return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);
        };
        /**
         * Utils function to compare two Account objects - used to check if the same user account is logged in
         *
         * @param a1: Account object
         * @param a2: Account object
         */
        Account.compareAccounts = function (a1, a2) {
            if (!a1 || !a2) {
                return false;
            }
            if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {
                if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {
                    return true;
                }
            }
            return false;
        };
        return Account;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var TimeUtils = /** @class */ (function () {
        function TimeUtils() {
        }
        /**
         * Returns time in seconds for expiration based on string value passed in.
         *
         * @param expiresIn
         */
        TimeUtils.parseExpiresIn = function (expiresIn) {
            // if AAD did not send "expires_in" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as "expires_in" value instead of 3600
            if (!expiresIn) {
                expiresIn = "3599";
            }
            return parseInt(expiresIn, 10);
        };
        /**
         * return the current time in Unix time. Date.getTime() returns in milliseconds.
         */
        TimeUtils.now = function () {
            return Math.round(new Date().getTime() / 1000.0);
        };
        return TimeUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * @hidden
     */
    var ResponseUtils = /** @class */ (function () {
        function ResponseUtils() {
        }
        ResponseUtils.setResponseIdToken = function (originalResponse, idTokenObj) {
            if (!originalResponse) {
                return null;
            }
            else if (!idTokenObj) {
                return originalResponse;
            }
            var exp = Number(idTokenObj.expiration);
            if (exp && !originalResponse.expiresOn) {
                originalResponse.expiresOn = new Date(exp * 1000);
            }
            return __assign({}, originalResponse, { idToken: idTokenObj, idTokenClaims: idTokenObj.claims, uniqueId: idTokenObj.objectId || idTokenObj.subject, tenantId: idTokenObj.tenantId });
        };
        return ResponseUtils;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    /**
     * XHR client for JSON endpoints
     * https://www.npmjs.com/package/async-promise
     * @hidden
     */
    var XhrClient = /** @class */ (function () {
        function XhrClient() {
        }
        XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, url, /*async: */ true);
                xhr.onload = function (ev) {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        reject(_this.handleError(xhr.responseText));
                    }
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                    }
                    catch (e) {
                        reject(_this.handleError(xhr.responseText));
                    }
                    resolve(jsonResponse);
                };
                xhr.onerror = function (ev) {
                    reject(xhr.status);
                };
                if (method === "GET") {
                    xhr.send();
                }
                else {
                    throw "not implemented";
                }
            });
        };
        XhrClient.prototype.handleError = function (responseText) {
            var jsonResponse;
            try {
                jsonResponse = JSON.parse(responseText);
                if (jsonResponse.error) {
                    return jsonResponse.error;
                }
                else {
                    throw responseText;
                }
            }
            catch (e) {
                return responseText;
            }
        };
        return XhrClient;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var AuthorityType;
    (function (AuthorityType) {
        AuthorityType[AuthorityType["Aad"] = 0] = "Aad";
        AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
        AuthorityType[AuthorityType["B2C"] = 2] = "B2C";
    })(AuthorityType || (AuthorityType = {}));
    /**
     * @hidden
     */
    var Authority = /** @class */ (function () {
        function Authority(authority, validateAuthority) {
            this.IsValidationEnabled = validateAuthority;
            this.CanonicalAuthority = authority;
            this.validateAsUri();
        }
        Object.defineProperty(Authority.prototype, "Tenant", {
            get: function () {
                return this.CanonicalAuthorityUrlComponents.PathSegments[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "AuthorizationEndpoint", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace("{tenant}", this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "EndSessionEndpoint", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.EndSessionEndpoint.replace("{tenant}", this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "SelfSignedJwtAudience", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.Issuer.replace("{tenant}", this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Authority.prototype.validateResolved = function () {
            if (!this.tenantDiscoveryResponse) {
                throw "Please call ResolveEndpointsAsync first";
            }
        };
        Object.defineProperty(Authority.prototype, "CanonicalAuthority", {
            /**
             * A URL that is the authority set by the developer
             */
            get: function () {
                return this.canonicalAuthority;
            },
            set: function (url) {
                this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);
                this.canonicalAuthorityUrlComponents = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "CanonicalAuthorityUrlComponents", {
            get: function () {
                if (!this.canonicalAuthorityUrlComponents) {
                    this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);
                }
                return this.canonicalAuthorityUrlComponents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "DefaultOpenIdConfigurationEndpoint", {
            /**
             * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
             */
            get: function () {
                return this.CanonicalAuthority + "v2.0/.well-known/openid-configuration";
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Given a string, validate that it is of the form https://domain/path
         */
        Authority.prototype.validateAsUri = function () {
            var components;
            try {
                components = this.CanonicalAuthorityUrlComponents;
            }
            catch (e) {
                throw ClientConfigurationErrorMessage.invalidAuthorityType;
            }
            if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
                throw ClientConfigurationErrorMessage.authorityUriInsecure;
            }
            if (!components.PathSegments || components.PathSegments.length < 1) {
                throw ClientConfigurationErrorMessage.authorityUriInvalidPath;
            }
        };
        /**
         * Calls the OIDC endpoint and returns the response
         */
        Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {
            var client = new XhrClient();
            return client.sendRequestAsync(openIdConfigurationEndpoint, "GET", /*enableCaching: */ true)
                .then(function (response) {
                return {
                    AuthorizationEndpoint: response.authorization_endpoint,
                    EndSessionEndpoint: response.end_session_endpoint,
                    Issuer: response.issuer
                };
            });
        };
        /**
         * Returns a promise.
         * Checks to see if the authority is in the cache
         * Discover endpoints via openid-configuration
         * If successful, caches the endpoint for later use in OIDC
         */
        Authority.prototype.resolveEndpointsAsync = function () {
            var _this = this;
            var openIdConfigurationEndpoint = "";
            return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {
                openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;
                return _this.DiscoverEndpoints(openIdConfigurationEndpoint);
            }).then(function (tenantDiscoveryResponse) {
                _this.tenantDiscoveryResponse = tenantDiscoveryResponse;
                return _this;
            });
        };
        return Authority;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var AadAuthority = /** @class */ (function (_super) {
        __extends(AadAuthority, _super);
        function AadAuthority(authority, validateAuthority) {
            return _super.call(this, authority, validateAuthority) || this;
        }
        Object.defineProperty(AadAuthority.prototype, "AadInstanceDiscoveryEndpointUrl", {
            get: function () {
                return AadAuthority.AadInstanceDiscoveryEndpoint + "?api-version=1.0&authorization_endpoint=" + this.CanonicalAuthority + "oauth2/v2.0/authorize";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AadAuthority.prototype, "AuthorityType", {
            get: function () {
                return AuthorityType.Aad;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns a promise which resolves to the OIDC endpoint
         * Only responds with the endpoint
         */
        AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {
            var _this = this;
            var resultPromise = new Promise(function (resolve, reject) {
                return resolve(_this.DefaultOpenIdConfigurationEndpoint);
            });
            if (!this.IsValidationEnabled) {
                return resultPromise;
            }
            var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;
            if (this.IsInTrustedHostList(host)) {
                return resultPromise;
            }
            var client = new XhrClient();
            return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, "GET", true)
                .then(function (response) {
                return response.tenant_discovery_endpoint;
            });
        };
        /**
         * Checks to see if the host is in a list of trusted hosts
         * @param {string} The host to look up
         */
        AadAuthority.prototype.IsInTrustedHostList = function (host) {
            return AADTrustedHostList[host.toLowerCase()];
        };
        AadAuthority.AadInstanceDiscoveryEndpoint = "https://login.microsoftonline.com/common/discovery/instance";
        return AadAuthority;
    }(Authority));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * @hidden
     */
    var B2cAuthority = /** @class */ (function (_super) {
        __extends(B2cAuthority, _super);
        function B2cAuthority(authority, validateAuthority) {
            var _this = _super.call(this, authority, validateAuthority) || this;
            var urlComponents = UrlUtils.GetUrlComponents(authority);
            var pathSegments = urlComponents.PathSegments;
            if (pathSegments.length < 3) {
                throw ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;
            }
            _this.CanonicalAuthority = "https://" + urlComponents.HostNameAndPort + "/" + pathSegments[0] + "/" + pathSegments[1] + "/" + pathSegments[2] + "/";
            return _this;
        }
        Object.defineProperty(B2cAuthority.prototype, "AuthorityType", {
            get: function () {
                return AuthorityType.B2C;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns a promise with the TenantDiscoveryEndpoint
         */
        B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {
            var _this = this;
            var resultPromise = new Promise(function (resolve, reject) {
                return resolve(_this.DefaultOpenIdConfigurationEndpoint);
            });
            if (!this.IsValidationEnabled) {
                return resultPromise;
            }
            if (this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {
                return resultPromise;
            }
            return new Promise(function (resolve, reject) {
                return reject(ClientConfigurationErrorMessage.unsupportedAuthorityValidation);
            });
        };
        B2cAuthority.B2C_PREFIX = "tfp";
        return B2cAuthority;
    }(AadAuthority));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var AuthorityFactory = /** @class */ (function () {
        function AuthorityFactory() {
        }
        /**
        * Parse the url and determine the type of authority
        */
        AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {
            authorityUrl = UrlUtils.CanonicalizeUri(authorityUrl);
            var components = UrlUtils.GetUrlComponents(authorityUrl);
            var pathSegments = components.PathSegments;
            switch (pathSegments[0]) {
                case "tfp":
                    return AuthorityType.B2C;
                case "adfs":
                    return AuthorityType.Adfs;
                default:
                    return AuthorityType.Aad;
            }
        };
        /**
        * Create an authority object of the correct type based on the url
        * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)
        */
        AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {
            if (StringUtils.isEmpty(authorityUrl)) {
                return null;
            }
            var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl);
            // Depending on above detection, create the right type.
            switch (type) {
                case AuthorityType.B2C:
                    return new B2cAuthority(authorityUrl, validateAuthority);
                case AuthorityType.Aad:
                    return new AadAuthority(authorityUrl, validateAuthority);
                default:
                    throw ClientConfigurationErrorMessage.invalidAuthorityType;
            }
        };
        return AuthorityFactory;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0] = "Error";
        LogLevel[LogLevel["Warning"] = 1] = "Warning";
        LogLevel[LogLevel["Info"] = 2] = "Info";
        LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    })(LogLevel || (LogLevel = {}));
    var Logger = /** @class */ (function () {
        function Logger(localCallback, options) {
            if (options === void 0) { options = {}; }
            /**
             * @hidden
             */
            this.level = LogLevel.Info;
            var _a = options.correlationId, correlationId = _a === void 0 ? "" : _a, _b = options.level, level = _b === void 0 ? LogLevel.Info : _b, _c = options.piiLoggingEnabled, piiLoggingEnabled = _c === void 0 ? false : _c;
            this.localCallback = localCallback;
            this.correlationId = correlationId;
            this.level = level;
            this.piiLoggingEnabled = piiLoggingEnabled;
        }
        /**
         * @hidden
         */
        Logger.prototype.logMessage = function (logLevel, logMessage, containsPii) {
            if ((logLevel > this.level) || (!this.piiLoggingEnabled && containsPii)) {
                return;
            }
            var timestamp = new Date().toUTCString();
            var log;
            if (!StringUtils.isEmpty(this.correlationId)) {
                log = timestamp + ":" + this.correlationId + "-" + libraryVersion() + "-" + LogLevel[logLevel] + " " + logMessage;
            }
            else {
                log = timestamp + ":" + libraryVersion() + "-" + LogLevel[logLevel] + " " + logMessage;
            }
            this.executeCallback(logLevel, log, containsPii);
        };
        /**
         * @hidden
         */
        Logger.prototype.executeCallback = function (level, message, containsPii) {
            if (this.localCallback) {
                this.localCallback(level, message, containsPii);
            }
        };
        /**
         * @hidden
         */
        Logger.prototype.error = function (message) {
            this.logMessage(LogLevel.Error, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.errorPii = function (message) {
            this.logMessage(LogLevel.Error, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.warning = function (message) {
            this.logMessage(LogLevel.Warning, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.warningPii = function (message) {
            this.logMessage(LogLevel.Warning, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.info = function (message) {
            this.logMessage(LogLevel.Info, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.infoPii = function (message) {
            this.logMessage(LogLevel.Info, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.verbose = function (message) {
            this.logMessage(LogLevel.Verbose, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.verbosePii = function (message) {
            this.logMessage(LogLevel.Verbose, message, true);
        };
        Logger.prototype.isPiiLoggingEnabled = function () {
            return this.piiLoggingEnabled;
        };
        return Logger;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    /**
     * Defaults for the Configuration Options
     */
    var FRAME_TIMEOUT = 6000;
    var OFFSET = 300;
    var NAVIGATE_FRAME_WAIT = 500;
    var DEFAULT_AUTH_OPTIONS = {
        clientId: "",
        authority: null,
        validateAuthority: true,
        redirectUri: function () { return UrlUtils.getDefaultRedirectUri(); },
        postLogoutRedirectUri: function () { return UrlUtils.getDefaultRedirectUri(); },
        navigateToLoginRequestUrl: true
    };
    var DEFAULT_CACHE_OPTIONS = {
        cacheLocation: "sessionStorage",
        storeAuthStateInCookie: false
    };
    var DEFAULT_SYSTEM_OPTIONS = {
        logger: new Logger(null),
        loadFrameTimeout: FRAME_TIMEOUT,
        tokenRenewalOffsetSeconds: OFFSET,
        navigateFrameWait: NAVIGATE_FRAME_WAIT
    };
    var DEFAULT_FRAMEWORK_OPTIONS = {
        isAngular: false,
        unprotectedResources: new Array(),
        protectedResourceMap: new Map()
    };
    /**
     * MSAL function that sets the default options when not explicitly configured from app developer
     *
     * @param TAuthOptions
     * @param TCacheOptions
     * @param TSystemOptions
     * @param TFrameworkOptions
     *
     * @returns TConfiguration object
     */
    function buildConfiguration(_a) {
        var auth = _a.auth, _b = _a.cache, cache = _b === void 0 ? {} : _b, _c = _a.system, system = _c === void 0 ? {} : _c, _d = _a.framework, framework = _d === void 0 ? {} : _d;
        var overlayedConfig = {
            auth: __assign({}, DEFAULT_AUTH_OPTIONS, auth),
            cache: __assign({}, DEFAULT_CACHE_OPTIONS, cache),
            system: __assign({}, DEFAULT_SYSTEM_OPTIONS, system),
            framework: __assign({}, DEFAULT_FRAMEWORK_OPTIONS, framework)
        };
        return overlayedConfig;
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var ServerErrorMessage = {
        serverUnavailable: {
            code: "server_unavailable",
            desc: "Server is temporarily unavailable."
        },
        unknownServerError: {
            code: "unknown_server_error"
        },
    };
    /**
     * Error thrown when there is an error with the server code, for example, unavailability.
     */
    var ServerError = /** @class */ (function (_super) {
        __extends(ServerError, _super);
        function ServerError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ServerError";
            Object.setPrototypeOf(_this, ServerError.prototype);
            return _this;
        }
        ServerError.createServerUnavailableError = function () {
            return new ServerError(ServerErrorMessage.serverUnavailable.code, ServerErrorMessage.serverUnavailable.desc);
        };
        ServerError.createUnknownServerError = function (errorDesc) {
            return new ServerError(ServerErrorMessage.unknownServerError.code, errorDesc);
        };
        return ServerError;
    }(AuthError));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var InteractionRequiredAuthErrorMessage = {
        interactionRequired: {
            code: "interaction_required"
        },
        consentRequired: {
            code: "consent_required"
        },
        loginRequired: {
            code: "login_required"
        },
    };
    /**
     * Error thrown when the user is required to perform an interactive token request.
     */
    var InteractionRequiredAuthError = /** @class */ (function (_super) {
        __extends(InteractionRequiredAuthError, _super);
        function InteractionRequiredAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "InteractionRequiredAuthError";
            Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
            return _this;
        }
        InteractionRequiredAuthError.isInteractionRequiredError = function (errorString) {
            var interactionRequiredCodes = [
                InteractionRequiredAuthErrorMessage.interactionRequired.code,
                InteractionRequiredAuthErrorMessage.consentRequired.code,
                InteractionRequiredAuthErrorMessage.loginRequired.code
            ];
            return errorString && interactionRequiredCodes.indexOf(errorString) > -1;
        };
        InteractionRequiredAuthError.createLoginRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.loginRequired.code, errorDesc);
        };
        InteractionRequiredAuthError.createInteractionRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.interactionRequired.code, errorDesc);
        };
        InteractionRequiredAuthError.createConsentRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.consentRequired.code, errorDesc);
        };
        return InteractionRequiredAuthError;
    }(ServerError));

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    function buildResponseStateOnly(state) {
        return {
            uniqueId: "",
            tenantId: "",
            tokenType: "",
            idToken: null,
            idTokenClaims: null,
            accessToken: "",
            scopes: null,
            expiresOn: null,
            account: null,
            accountState: state
        };
    }

    var EVENT_NAME_PREFIX = "msal.";
    var EVENT_NAME_KEY = "event_name";
    var START_TIME_KEY = "start_time";
    var ELAPSED_TIME_KEY = "elapsed_time";
    var TELEMETRY_BLOB_EVENT_NAMES = {
        MsalCorrelationIdConstStrKey: "Microsoft.MSAL.correlation_id",
        ApiTelemIdConstStrKey: "msal.api_telem_id",
        ApiIdConstStrKey: "msal.api_id",
        BrokerAppConstStrKey: "Microsoft_MSAL_broker_app",
        CacheEventCountConstStrKey: "Microsoft_MSAL_cache_event_count",
        HttpEventCountTelemetryBatchKey: "Microsoft_MSAL_http_event_count",
        IdpConstStrKey: "Microsoft_MSAL_idp",
        IsSilentTelemetryBatchKey: "",
        IsSuccessfulConstStrKey: "Microsoft_MSAL_is_successful",
        ResponseTimeConstStrKey: "Microsoft_MSAL_response_time",
        TenantIdConstStrKey: "Microsoft_MSAL_tenant_id",
        UiEventCountTelemetryBatchKey: "Microsoft_MSAL_ui_event_count"
    };

    var prependEventNamePrefix = function (suffix) { return "" + EVENT_NAME_PREFIX + (suffix || ""); };

    var TelemetryEvent = /** @class */ (function () {
        function TelemetryEvent(eventName, correlationId) {
            var _a;
            this.startTimestamp = Date.now();
            this.eventId = CryptoUtils.createNewGuid();
            this.event = (_a = {},
                _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName,
                _a[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp,
                _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1,
                _a["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,
                _a);
        }
        TelemetryEvent.prototype.setElapsedTime = function (time) {
            this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;
        };
        TelemetryEvent.prototype.stop = function () {
            // Set duration of event
            this.setElapsedTime(+Date.now() - +this.startTimestamp);
        };
        Object.defineProperty(TelemetryEvent.prototype, "telemetryCorrelationId", {
            get: function () {
                return this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];
            },
            set: function (value) {
                this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TelemetryEvent.prototype, "eventName", {
            get: function () {
                return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];
            },
            enumerable: true,
            configurable: true
        });
        TelemetryEvent.prototype.get = function () {
            return __assign({}, this.event, { eventId: this.eventId });
        };
        return TelemetryEvent;
    }());

    var DefaultEvent = /** @class */ (function (_super) {
        __extends(DefaultEvent, _super);
        // TODO Platform Type
        function DefaultEvent(platform, correlationId, clientId, eventCount) {
            var _this = _super.call(this, prependEventNamePrefix("default_event"), correlationId) || this;
            _this.event[prependEventNamePrefix("client_id")] = clientId;
            _this.event[prependEventNamePrefix("sdk_plaform")] = platform.sdk;
            _this.event[prependEventNamePrefix("sdk_version")] = platform.sdkVersion;
            _this.event[prependEventNamePrefix("application_name")] = platform.applicationName;
            _this.event[prependEventNamePrefix("application_version")] = platform.applicationVersion;
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("ui_event"), eventCount);
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("http_event"), eventCount);
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix("cache_event"), eventCount);
            return _this;
            /// Device id?
        }
        DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {
            if (!eventCount[eventName]) {
                return 0;
            }
            return eventCount[eventName];
        };
        return DefaultEvent;
    }(TelemetryEvent));

    var createEventKey = function (event) { return (event.telemetryCorrelationId + "-" + event.eventId + "-" + event.eventName); };
    var TelemetryManager = /** @class */ (function () {
        function TelemetryManager(config, telemetryEmitter) {
            // correlation Id to list of events
            this.completedEvents = {};
            // event key to event
            this.inProgressEvents = {};
            // correlation id to map of eventname to count
            this.eventCountByCorrelationId = {};
            //Implement after API EVENT
            this.onlySendFailureTelemetry = false;
            // TODO THROW if bad options
            this.telemetryPlatform = config.platform;
            this.clientId = config.clientId;
            this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;
            // TODO, when i get to wiring this through, think about what it means if
            // a developer does not implement telem at all, we still instrument, but telemetryEmitter can be
            // optional?
            this.telemetryEmitter = telemetryEmitter;
        }
        TelemetryManager.prototype.startEvent = function (event) {
            if (!this.telemetryEmitter) {
                return;
            }
            var eventKey = createEventKey(event);
            this.inProgressEvents[eventKey] = event;
        };
        TelemetryManager.prototype.stopEvent = function (event) {
            var eventKey = createEventKey(event);
            if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {
                return;
            }
            event.stop();
            this.incrementEventCount(event);
            var completedEvents = this.completedEvents[event.telemetryCorrelationId];
            this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);
            delete this.inProgressEvents[eventKey];
        };
        TelemetryManager.prototype.flush = function (correlationId) {
            var _this = this;
            // If there is only unfinished events should this still return them?
            if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {
                return;
            }
            var orphanedEvents = this.getOrphanedEvents(correlationId);
            orphanedEvents.forEach(function (event) { return _this.incrementEventCount(event); });
            var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);
            delete this.completedEvents[correlationId];
            var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];
            delete this.eventCountByCorrelationId[correlationId];
            // TODO add funcitonality for onlyFlushFailures after implementing api event? ??
            if (!eventsToFlush || !eventsToFlush.length) {
                return;
            }
            var defaultEvent = new DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);
            var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);
            this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) { return e.get(); }));
        };
        TelemetryManager.prototype.incrementEventCount = function (event) {
            var _a;
            // TODO, name cache event different?
            // if type is cache event, change name
            var eventName = event.eventName;
            var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];
            if (!eventCount) {
                this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {},
                    _a[eventName] = 1,
                    _a);
            }
            else {
                eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;
            }
        };
        TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {
            var _this = this;
            return Object.keys(this.inProgressEvents)
                .reduce(function (memo, eventKey) {
                if (eventKey.indexOf(correlationId) !== -1) {
                    var event_1 = _this.inProgressEvents[eventKey];
                    delete _this.inProgressEvents[eventKey];
                    return memo.concat([event_1]);
                }
                return memo;
            }, []);
        };
        return TelemetryManager;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // default authority
    var DEFAULT_AUTHORITY = "https://login.microsoftonline.com/common";
    /**
     * @hidden
     * @ignore
     * response_type from OpenIDConnect
     * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1
     * Since we support only implicit flow in this library, we restrict the response_type support to only 'token' and 'id_token'
     *
     */
    var ResponseTypes = {
        id_token: "id_token",
        token: "token",
        id_token_token: "id_token token"
    };
    /**
     * @hidden
     * @ignore
     * A wrapper to handle the token response/error within the iFrame always
     *
     * @param target
     * @param propertyKey
     * @param descriptor
     */
    var resolveTokenOnlyIfOutOfIframe = function (target, propertyKey, descriptor) {
        var tokenAcquisitionMethod = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.isInIframe()
                ? new Promise(function () {
                    return;
                })
                : tokenAcquisitionMethod.apply(this, args);
        };
        return descriptor;
    };
    /**
     * UserAgentApplication class
     *
     * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions
     */
    var UserAgentApplication = /** @class */ (function () {
        /**
         * @constructor
         * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application.
         * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         *
         * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/
      
         * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance
         */
        function UserAgentApplication(configuration) {
            // callbacks for token/error
            this.authResponseCallback = null;
            this.tokenReceivedCallback = null;
            this.errorReceivedCallback = null;
            // Set the Configuration
            this.config = buildConfiguration(configuration);
            // Set the callback boolean
            this.redirectCallbacksSet = false;
            this.logger = this.config.system.logger;
            this.clientId = this.config.auth.clientId;
            this.inCookie = this.config.cache.storeAuthStateInCookie;
            this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId);
            // if no authority is passed, set the default: "https://login.microsoftonline.com/common"
            this.authority = this.config.auth.authority || DEFAULT_AUTHORITY;
            // track login and acquireToken in progress
            this.loginInProgress = false;
            this.acquireTokenInProgress = false;
            // cache keys msal - typescript throws an error if any value other than "localStorage" or "sessionStorage" is passed
            try {
                this.cacheStorage = new Storage(this.config.cache.cacheLocation);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidCacheLocationConfigError(this.config.cache.cacheLocation);
            }
            // Initialize window handling code
            window.openedWindows = [];
            window.activeRenewals = {};
            window.renewStates = [];
            window.callbackMappedToRenewStates = {};
            window.promiseMappedToRenewStates = {};
            window.msal = this;
            var urlHash = window.location.hash;
            var urlContainsHash = this.urlContainsHash(urlHash);
            // On the server 302 - Redirect, handle this
            if (!this.config.framework.isAngular) {
                if (urlContainsHash) {
                    this.handleAuthenticationResponse(urlHash);
                }
            }
        }
        Object.defineProperty(UserAgentApplication.prototype, "authority", {
            /**
             * Method to manage the authority URL.
             *
             * @returns {string} authority
             */
            get: function () {
                return this.authorityInstance.CanonicalAuthority;
            },
            /**
             * setter for the authority URL
             * @param {string} authority
             */
            // If the developer passes an authority, create an instance
            set: function (val) {
                this.authorityInstance = AuthorityFactory.CreateInstance(val, this.config.auth.validateAuthority);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Get the current authority instance from the MSAL configuration object
         *
         * @returns {@link Authority} authority instance
         */
        UserAgentApplication.prototype.getAuthorityInstance = function () {
            return this.authorityInstance;
        };
        UserAgentApplication.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {
            if (!authOrTokenCallback) {
                this.redirectCallbacksSet = false;
                throw ClientConfigurationError.createInvalidCallbackObjectError(authOrTokenCallback);
            }
            // Set callbacks
            if (errorReceivedCallback) {
                this.tokenReceivedCallback = authOrTokenCallback;
                this.errorReceivedCallback = errorReceivedCallback;
                this.logger.warning("This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).");
            }
            else {
                this.authResponseCallback = authOrTokenCallback;
            }
            this.redirectCallbacksSet = true;
            // On the server 302 - Redirect, handle this
            if (!this.config.framework.isAngular) {
                var cachedHash = this.cacheStorage.getItem(Constants$1.urlHash);
                if (cachedHash) {
                    this.processCallBack(cachedHash, null);
                }
            }
        };
        UserAgentApplication.prototype.authResponseHandler = function (interactionType, response, resolve) {
            if (interactionType === Constants$1.interactionTypeRedirect) {
                if (this.errorReceivedCallback) {
                    this.tokenReceivedCallback(response);
                }
                else if (this.authResponseCallback) {
                    this.authResponseCallback(null, response);
                }
            }
            else if (interactionType === Constants$1.interactionTypePopup) {
                resolve(response);
            }
            else {
                throw ClientAuthError.createInvalidInteractionTypeError();
            }
        };
        UserAgentApplication.prototype.authErrorHandler = function (interactionType, authErr, response, reject) {
            if (interactionType === Constants$1.interactionTypeRedirect) {
                if (this.errorReceivedCallback) {
                    this.errorReceivedCallback(authErr, response.accountState);
                }
                else {
                    this.authResponseCallback(authErr, response);
                }
            }
            else if (interactionType === Constants$1.interactionTypePopup) {
                reject(authErr);
            }
            else {
                throw ClientAuthError.createInvalidInteractionTypeError();
            }
        };
        //#endregion
        /**
         * Use when initiating the login process by redirecting the user's browser to the authorization endpoint.
         * @param {@link (AuthenticationParameters:type)}
         */
        UserAgentApplication.prototype.loginRedirect = function (request) {
            // Throw error if callbacks are not set before redirect
            if (!this.redirectCallbacksSet) {
                throw ClientConfigurationError.createRedirectCallbacksNotSetError();
            }
            this.acquireTokenInteractive(Constants$1.interactionTypeRedirect, true, request);
        };
        /**
         * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint.
         * @param {@link (AuthenticationParameters:type)}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         */
        UserAgentApplication.prototype.acquireTokenRedirect = function (request) {
            if (!request) {
                throw ClientConfigurationError.createEmptyRequestError();
            }
            // Throw error if callbacks are not set before redirect
            if (!this.redirectCallbacksSet) {
                throw ClientConfigurationError.createRedirectCallbacksNotSetError();
            }
            this.acquireTokenInteractive(Constants$1.interactionTypeRedirect, false, request);
        };
        /**
         * Use when initiating the login process via opening a popup window in the user's browser
         *
         * @param {@link (AuthenticationParameters:type)}
         *
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        UserAgentApplication.prototype.loginPopup = function (request) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.acquireTokenInteractive(Constants$1.interactionTypePopup, true, request, resolve, reject);
            });
        };
        /**
         * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
         * @param {@link AuthenticationParameters}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        UserAgentApplication.prototype.acquireTokenPopup = function (request) {
            var _this = this;
            if (!request) {
                throw ClientConfigurationError.createEmptyRequestError();
            }
            return new Promise(function (resolve, reject) {
                _this.acquireTokenInteractive(Constants$1.interactionTypePopup, false, request, resolve, reject);
            });
        };
        //#region Acquire Token
        /**
         * Use when initiating the login process or when you want to obtain an access_token for your API,
         * either by redirecting the user's browser window to the authorization endpoint or via opening a popup window in the user's browser.
         * @param {@link (AuthenticationParameters:type)}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         */
        UserAgentApplication.prototype.acquireTokenInteractive = function (interactionType, isLoginCall, request, resolve, reject) {
            var _this = this;
            // If already in progress, do not proceed
            if (this.loginInProgress || this.acquireTokenInProgress) {
                var thrownError = this.loginInProgress ? ClientAuthError.createLoginInProgressError() : ClientAuthError.createAcquireTokenInProgressError();
                var stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request && request.state));
                this.authErrorHandler(interactionType, thrownError, stateOnlyResponse, reject);
                return;
            }
            // if extraScopesToConsent is passed in loginCall, append them to the login request
            var scopes = isLoginCall ? this.appendScopes(request) : request.scopes;
            // Validate and filter scopes (the validate function will throw if validation fails)
            this.validateInputScope(scopes, !isLoginCall);
            // Get the account object if a session exists
            var account = (request && request.account && !isLoginCall) ? request.account : this.getAccount();
            // If no session exists, prompt the user to login.
            if (!account && !ServerRequestParameters.isSSOParam(request)) {
                if (isLoginCall) {
                    // extract ADAL id_token if exists
                    var adalIdToken = this.extractADALIdToken();
                    // silent login if ADAL id_token is retrieved successfully - SSO
                    if (adalIdToken && !scopes) {
                        this.logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken ");
                        var tokenRequest = this.buildIDTokenRequest(request);
                        this.silentLogin = true;
                        this.acquireTokenSilent(tokenRequest).then(function (response) {
                            _this.silentLogin = false;
                            _this.logger.info("Unified cache call is successful");
                            _this.authResponseHandler(interactionType, response, resolve);
                            return;
                        }, function (error) {
                            _this.silentLogin = false;
                            _this.logger.error("Error occurred during unified cache ATS: " + error);
                            // proceed to login since ATS failed
                            _this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);
                        });
                    }
                    // No ADAL token found, proceed to login
                    else {
                        this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);
                    }
                }
                // AcquireToken call, but no account or context given, so throw error
                else {
                    this.logger.info("User login is required");
                    throw ClientAuthError.createUserLoginRequiredError();
                }
            }
            // User session exists
            else {
                this.acquireTokenHelper(account, interactionType, isLoginCall, request, scopes, resolve, reject);
            }
        };
        /**
         * @hidden
         * @ignore
         * Helper function to acquireToken
         *
         */
        UserAgentApplication.prototype.acquireTokenHelper = function (account, interactionType, isLoginCall, request, scopes, resolve, reject) {
            var _this = this;
            // Track the acquireToken progress
            if (isLoginCall) {
                this.loginInProgress = true;
            }
            else {
                this.acquireTokenInProgress = true;
            }
            var scope = scopes ? scopes.join(" ").toLowerCase() : this.clientId.toLowerCase();
            var serverAuthenticationRequest;
            var acquireTokenAuthority = (!isLoginCall && request && request.authority) ? AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;
            var popUpWindow;
            if (interactionType === Constants$1.interactionTypePopup) {
                // Generate a popup window
                popUpWindow = this.openWindow("about:blank", "_blank", 1, this, resolve, reject);
                if (!popUpWindow) {
                    // We pass reject in openWindow, we reject there during an error
                    return;
                }
            }
            acquireTokenAuthority.resolveEndpointsAsync().then(function () {
                // On Fulfillment
                var responseType = isLoginCall ? ResponseTypes.id_token : _this.getTokenType(account, scopes, false);
                var loginStartPage;
                if (isLoginCall) {
                    // if the user sets the login start page - angular only??
                    loginStartPage = _this.cacheStorage.getItem(Constants$1.angularLoginRequest);
                    if (!loginStartPage || loginStartPage === "") {
                        loginStartPage = window.location.href;
                    }
                    else {
                        _this.cacheStorage.setItem(Constants$1.angularLoginRequest, "");
                    }
                }
                serverAuthenticationRequest = new ServerRequestParameters(acquireTokenAuthority, _this.clientId, scopes, responseType, _this.getRedirectUri(), request && request.state);
                _this.updateCacheEntries(serverAuthenticationRequest, account, loginStartPage);
                // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer
                serverAuthenticationRequest.populateQueryParams(account, request);
                // Construct urlNavigate
                var urlNavigate = UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants$1.response_mode_fragment;
                // set state in cache
                if (interactionType === Constants$1.interactionTypeRedirect) {
                    if (!isLoginCall) {
                        _this.cacheStorage.setItem(Constants$1.stateAcquireToken, serverAuthenticationRequest.state, _this.inCookie);
                    }
                }
                else if (interactionType === Constants$1.interactionTypePopup) {
                    window.renewStates.push(serverAuthenticationRequest.state);
                    window.requestType = isLoginCall ? Constants$1.login : Constants$1.renewToken;
                    // Register callback to capture results from server
                    _this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);
                }
                else {
                    throw ClientAuthError.createInvalidInteractionTypeError();
                }
                // prompt user for interaction
                _this.navigateWindow(urlNavigate, popUpWindow);
            }).catch(function (err) {
                _this.logger.warning("could not resolve endpoints");
                _this.authErrorHandler(interactionType, ClientAuthError.createEndpointResolutionError(err.toString), buildResponseStateOnly(request.state), reject);
                if (popUpWindow) {
                    popUpWindow.close();
                }
            });
        };
        /**
         * Use this function to obtain a token before every call to the API / resource provider
         *
         * MSAL return's a cached token when available
         * Or it send's a request to the STS to obtain a new token using a hidden iframe.
         *
         * @param {@link AuthenticationParameters}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         *
         */
        UserAgentApplication.prototype.acquireTokenSilent = function (request) {
            var _this = this;
            if (!request) {
                throw ClientConfigurationError.createEmptyRequestError();
            }
            return new Promise(function (resolve, reject) {
                // Validate and filter scopes (the validate function will throw if validation fails)
                _this.validateInputScope(request.scopes, true);
                var scope = request.scopes.join(" ").toLowerCase();
                // if the developer passes an account, give that account the priority
                var account = request.account || _this.getAccount();
                // extract if there is an adalIdToken stashed in the cache
                var adalIdToken = _this.cacheStorage.getItem(Constants$1.adalIdToken);
                //if there is no account logged in and no login_hint/sid is passed in the request
                if (!account && !(request.sid || request.loginHint) && StringUtils.isEmpty(adalIdToken)) {
                    _this.logger.info("User login is required");
                    return reject(ClientAuthError.createUserLoginRequiredError());
                }
                var responseType = _this.getTokenType(account, request.scopes, true);
                var serverAuthenticationRequest = new ServerRequestParameters(AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority), _this.clientId, request.scopes, responseType, _this.getRedirectUri(), request && request.state);
                // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer
                if (ServerRequestParameters.isSSOParam(request) || account) {
                    serverAuthenticationRequest.populateQueryParams(account, request);
                }
                //if user didn't pass login_hint/sid and adal's idtoken is present, extract the login_hint from the adalIdToken
                else if (!account && !StringUtils.isEmpty(adalIdToken)) {
                    // if adalIdToken exists, extract the SSO info from the same
                    var adalIdTokenObject = TokenUtils.extractIdToken(adalIdToken);
                    _this.logger.verbose("ADAL's idToken exists. Extracting login information from ADAL's idToken ");
                    serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject);
                }
                var userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;
                var authErr;
                var cacheResultResponse;
                if (!userContainedClaims && !request.forceRefresh) {
                    try {
                        cacheResultResponse = _this.getCachedToken(serverAuthenticationRequest, account);
                    }
                    catch (e) {
                        authErr = e;
                    }
                }
                // resolve/reject based on cacheResult
                if (cacheResultResponse) {
                    _this.logger.info("Token is already in cache for scope:" + scope);
                    resolve(cacheResultResponse);
                    return null;
                }
                else if (authErr) {
                    _this.logger.infoPii(authErr.errorCode + ":" + authErr.errorMessage);
                    reject(authErr);
                    return null;
                }
                // else proceed with login
                else {
                    var logMessage = void 0;
                    if (userContainedClaims) {
                        logMessage = "Skipped cache lookup since claims were given.";
                    }
                    else if (request.forceRefresh) {
                        logMessage = "Skipped cache lookup since request.forceRefresh option was set to true";
                    }
                    else {
                        logMessage = "Token is not in cache for scope:" + scope;
                    }
                    _this.logger.verbose(logMessage);
                    // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the api.
                    if (!serverAuthenticationRequest.authorityInstance) {
                        serverAuthenticationRequest.authorityInstance = request.authority ? AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority) : _this.authorityInstance;
                    }
                    // cache miss
                    return serverAuthenticationRequest.authorityInstance.resolveEndpointsAsync()
                        .then(function () {
                        // refresh attempt with iframe
                        // Already renewing for this scope, callback when we get the token.
                        if (window.activeRenewals[scope]) {
                            _this.logger.verbose("Renew token for scope: " + scope + " is in progress. Registering callback");
                            // Active renewals contains the state for each renewal.
                            _this.registerCallback(window.activeRenewals[scope], scope, resolve, reject);
                        }
                        else {
                            if (request.scopes && request.scopes.indexOf(_this.clientId) > -1 && request.scopes.length === 1) {
                                // App uses idToken to send to api endpoints
                                // Default scope is tracked as clientId to store this token
                                _this.logger.verbose("renewing idToken");
                                _this.silentLogin = true;
                                _this.renewIdToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);
                            }
                            else {
                                // renew access token
                                _this.logger.verbose("renewing accesstoken");
                                _this.renewToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);
                            }
                        }
                    }).catch(function (err) {
                        _this.logger.warning("could not resolve endpoints");
                        reject(ClientAuthError.createEndpointResolutionError(err.toString()));
                        return null;
                    });
                }
            });
        };
        //#endregion
        //#region Popup Window Creation
        /**
         * @hidden
         *
         * Used to send the user to the redirect_uri after authentication is complete. The user's bearer token is attached to the URI fragment as an id_token/access_token field.
         * This function also closes the popup window after redirection.
         *
         * @param urlNavigate
         * @param title
         * @param interval
         * @param instance
         * @param resolve
         * @param reject
         * @ignore
         */
        UserAgentApplication.prototype.openWindow = function (urlNavigate, title, interval, instance, resolve, reject) {
            var _this = this;
            // Generate a popup window
            var popupWindow;
            try {
                popupWindow = this.openPopup(urlNavigate, title, Constants$1.popUpWidth, Constants$1.popUpHeight);
            }
            catch (e) {
                instance.loginInProgress = false;
                instance.acquireTokenInProgress = false;
                this.logger.info(ClientAuthErrorMessage.popUpWindowError.code + ":" + ClientAuthErrorMessage.popUpWindowError.desc);
                this.cacheStorage.setItem(Constants$1.msalError, ClientAuthErrorMessage.popUpWindowError.code);
                this.cacheStorage.setItem(Constants$1.msalErrorDescription, ClientAuthErrorMessage.popUpWindowError.desc);
                if (reject) {
                    reject(ClientAuthError.createPopupWindowError());
                }
                return null;
            }
            // Push popup window handle onto stack for tracking
            window.openedWindows.push(popupWindow);
            var pollTimer = window.setInterval(function () {
                // If popup closed or login in progress, cancel login
                if (popupWindow && popupWindow.closed && (instance.loginInProgress || instance.acquireTokenInProgress)) {
                    if (reject) {
                        reject(ClientAuthError.createUserCancelledError());
                    }
                    window.clearInterval(pollTimer);
                    if (_this.config.framework.isAngular) {
                        _this.broadcast("msal:popUpClosed", ClientAuthErrorMessage.userCancelledError.code + Constants$1.resourceDelimiter + ClientAuthErrorMessage.userCancelledError.desc);
                        return;
                    }
                    instance.loginInProgress = false;
                    instance.acquireTokenInProgress = false;
                }
                try {
                    var popUpWindowLocation = popupWindow.location;
                    // If the popup hash changes, close the popup window
                    if (popUpWindowLocation.href.indexOf(_this.getRedirectUri()) !== -1) {
                        window.clearInterval(pollTimer);
                        instance.loginInProgress = false;
                        instance.acquireTokenInProgress = false;
                        _this.logger.info("Closing popup window");
                        // TODO: Check how this can be extracted for any framework specific code?
                        if (_this.config.framework.isAngular) {
                            _this.broadcast("msal:popUpHashChanged", popUpWindowLocation.hash);
                            for (var i = 0; i < window.openedWindows.length; i++) {
                                window.openedWindows[i].close();
                            }
                        }
                    }
                }
                catch (e) {
                    // Cross Domain url check error.
                    // Will be thrown until AAD redirects the user back to the app"s root page with the token.
                    // No need to log or throw this error as it will create unnecessary traffic.
                }
            }, interval);
            return popupWindow;
        };
        /**
         * @hidden
         *
         * Configures popup window for login.
         *
         * @param urlNavigate
         * @param title
         * @param popUpWidth
         * @param popUpHeight
         * @ignore
         * @hidden
         */
        UserAgentApplication.prototype.openPopup = function (urlNavigate, title, popUpWidth, popUpHeight) {
            try {
                /**
                 * adding winLeft and winTop to account for dual monitor
                 * using screenLeft and screenTop for IE8 and earlier
                 */
                var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
                var winTop = window.screenTop ? window.screenTop : window.screenY;
                /**
                 * window.innerWidth displays browser window"s height and width excluding toolbars
                 * using document.documentElement.clientWidth for IE8 and earlier
                 */
                var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                var left = ((width / 2) - (popUpWidth / 2)) + winLeft;
                var top_1 = ((height / 2) - (popUpHeight / 2)) + winTop;
                // open the window
                var popupWindow = window.open(urlNavigate, title, "width=" + popUpWidth + ", height=" + popUpHeight + ", top=" + top_1 + ", left=" + left);
                if (!popupWindow) {
                    throw ClientAuthError.createPopupWindowError();
                }
                if (popupWindow.focus) {
                    popupWindow.focus();
                }
                return popupWindow;
            }
            catch (e) {
                this.logger.error("error opening popup " + e.message);
                this.loginInProgress = false;
                this.acquireTokenInProgress = false;
                throw ClientAuthError.createPopupWindowError(e.toString());
            }
        };
        //#endregion
        //#region Iframe Management
        /**
         * @hidden
         * Returns whether current window is in ifram for token renewal
         * @ignore
         */
        UserAgentApplication.prototype.isInIframe = function () {
            return window.parent !== window;
        };
        /**
         * @hidden
         * Returns whether parent window exists and has msal
         */
        UserAgentApplication.prototype.parentIsMsal = function () {
            return window.parent !== window && window.parent.msal;
        };
        /**
         * @hidden
         * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.
         * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.
         * @ignore
         */
        UserAgentApplication.prototype.loadIframeTimeout = function (urlNavigate, frameName, scope) {
            var _this = this;
            //set iframe session to pending
            var expectedState = window.activeRenewals[scope];
            this.logger.verbose("Set loading state to pending for: " + scope + ":" + expectedState);
            this.cacheStorage.setItem(Constants$1.renewStatus + expectedState, Constants$1.tokenRenewStatusInProgress);
            this.loadFrame(urlNavigate, frameName);
            setTimeout(function () {
                if (_this.cacheStorage.getItem(Constants$1.renewStatus + expectedState) === Constants$1.tokenRenewStatusInProgress) {
                    // fail the iframe session if it"s in pending state
                    _this.logger.verbose("Loading frame has timed out after: " + (_this.config.system.loadFrameTimeout / 1000) + " seconds for scope " + scope + ":" + expectedState);
                    // Error after timeout
                    if (expectedState && window.callbackMappedToRenewStates[expectedState]) {
                        window.callbackMappedToRenewStates[expectedState](null, ClientAuthError.createTokenRenewalTimeoutError());
                    }
                    _this.cacheStorage.setItem(Constants$1.renewStatus + expectedState, Constants$1.tokenRenewStatusCancelled);
                }
            }, this.config.system.loadFrameTimeout);
        };
        /**
         * @hidden
         * Loads iframe with authorization endpoint URL
         * @ignore
         */
        UserAgentApplication.prototype.loadFrame = function (urlNavigate, frameName) {
            var _this = this;
            // This trick overcomes iframe navigation in IE
            // IE does not load the page consistently in iframe
            this.logger.info("LoadFrame: " + frameName);
            var frameCheck = frameName;
            setTimeout(function () {
                var frameHandle = _this.addHiddenIFrame(frameCheck);
                if (frameHandle.src === "" || frameHandle.src === "about:blank") {
                    frameHandle.src = urlNavigate;
                    _this.logger.infoPii("Frame Name : " + frameName + " Navigated to: " + urlNavigate);
                }
            }, this.config.system.navigateFrameWait);
        };
        /**
         * @hidden
         * Adds the hidden iframe for silent token renewal.
         * @ignore
         */
        UserAgentApplication.prototype.addHiddenIFrame = function (iframeId) {
            if (typeof iframeId === "undefined") {
                return null;
            }
            this.logger.info("Add msal frame to document:" + iframeId);
            var adalFrame = document.getElementById(iframeId);
            if (!adalFrame) {
                if (document.createElement &&
                    document.documentElement &&
                    (window.navigator.userAgent.indexOf("MSIE 5.0") === -1)) {
                    var ifr = document.createElement("iframe");
                    ifr.setAttribute("id", iframeId);
                    ifr.style.visibility = "hidden";
                    ifr.style.position = "absolute";
                    ifr.style.width = ifr.style.height = "0";
                    ifr.style.border = "0";
                    adalFrame = document.getElementsByTagName("body")[0].appendChild(ifr);
                }
                else if (document.body && document.body.insertAdjacentHTML) {
                    document.body.insertAdjacentHTML("beforeend", "<iframe name='" + iframeId + "' id='" + iframeId + "' style='display:none'></iframe>");
                }
                if (window.frames && window.frames[iframeId]) {
                    adalFrame = window.frames[iframeId];
                }
            }
            return adalFrame;
        };
        //#endregion
        //#region General Helpers
        /**
         * @hidden
         * Used to redirect the browser to the STS authorization endpoint
         * @param {string} urlNavigate - URL of the authorization endpoint
         */
        UserAgentApplication.prototype.navigateWindow = function (urlNavigate, popupWindow) {
            // Navigate if valid URL
            if (urlNavigate && !StringUtils.isEmpty(urlNavigate)) {
                var navigateWindow = popupWindow ? popupWindow : window;
                var logMessage = popupWindow ? "Navigated Popup window to:" + urlNavigate : "Navigate to:" + urlNavigate;
                this.logger.infoPii(logMessage);
                navigateWindow.location.replace(urlNavigate);
            }
            else {
                this.logger.info("Navigate url is empty");
                throw AuthError.createUnexpectedError("Navigate url is empty");
            }
        };
        /**
         * @hidden
         * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object
         * @param {string} expectedState - Unique state identifier (guid).
         * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {Function} resolve - The resolve function of the promise object.
         * @param {Function} reject - The reject function of the promise object.
         * @ignore
         */
        UserAgentApplication.prototype.registerCallback = function (expectedState, scope, resolve, reject) {
            var _this = this;
            // track active renewals
            window.activeRenewals[scope] = expectedState;
            // initialize callbacks mapped array
            if (!window.promiseMappedToRenewStates[expectedState]) {
                window.promiseMappedToRenewStates[expectedState] = [];
            }
            // indexing on the current state, push the callback params to callbacks mapped
            window.promiseMappedToRenewStates[expectedState].push({ resolve: resolve, reject: reject });
            // Store the server esponse in the current window??
            if (!window.callbackMappedToRenewStates[expectedState]) {
                window.callbackMappedToRenewStates[expectedState] =
                    function (response, error) {
                        // reset active renewals
                        window.activeRenewals[scope] = null;
                        // for all promiseMappedtoRenewStates for a given 'state' - call the reject/resolve with error/token respectively
                        for (var i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {
                            try {
                                if (error) {
                                    window.promiseMappedToRenewStates[expectedState][i].reject(error);
                                }
                                else if (response) {
                                    window.promiseMappedToRenewStates[expectedState][i].resolve(response);
                                }
                                else {
                                    throw AuthError.createUnexpectedError("Error and response are both null");
                                }
                            }
                            catch (e) {
                                _this.logger.warning(e);
                            }
                        }
                        // reset
                        window.promiseMappedToRenewStates[expectedState] = null;
                        window.callbackMappedToRenewStates[expectedState] = null;
                    };
            }
        };
        //#endregion
        //#region Logout
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         */
        UserAgentApplication.prototype.logout = function () {
            var _this = this;
            this.clearCache();
            this.account = null;
            var logout = "";
            if (this.getPostLogoutRedirectUri()) {
                logout = "post_logout_redirect_uri=" + encodeURIComponent(this.getPostLogoutRedirectUri());
            }
            this.authorityInstance.resolveEndpointsAsync().then(function (authority) {
                var urlNavigate = authority.EndSessionEndpoint
                    ? authority.EndSessionEndpoint + "?" + logout
                    : _this.authority + "oauth2/v2.0/logout?" + logout;
                _this.navigateWindow(urlNavigate);
            });
        };
        /**
         * @hidden
         * Clear all access tokens in the cache.
         * @ignore
         */
        UserAgentApplication.prototype.clearCache = function () {
            window.renewStates = [];
            var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants$1.clientId, Constants$1.homeAccountIdentifier);
            for (var i = 0; i < accessTokenItems.length; i++) {
                this.cacheStorage.removeItem(JSON.stringify(accessTokenItems[i].key));
            }
            this.cacheStorage.resetCacheItems();
            this.cacheStorage.clearCookie();
        };
        /**
         * @hidden
         * Clear a given access token from the cache.
         *
         * @param accessToken
         */
        UserAgentApplication.prototype.clearCacheForScope = function (accessToken) {
            var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants$1.clientId, Constants$1.homeAccountIdentifier);
            for (var i = 0; i < accessTokenItems.length; i++) {
                var token = accessTokenItems[i];
                if (token.value.accessToken === accessToken) {
                    this.cacheStorage.removeItem(JSON.stringify(token.key));
                }
            }
        };
        //#endregion
        //#region Response
        /**
         * @hidden
         * @ignore
         * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.
         * @param {string} hash - Hash passed from redirect page.
         * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.
         */
        UserAgentApplication.prototype.isCallback = function (hash) {
            this.logger.info("isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.");
            return this.urlContainsHash(hash);
        };
        UserAgentApplication.prototype.urlContainsHash = function (urlString) {
            var parameters = this.deserializeHash(urlString);
            return (parameters.hasOwnProperty(Constants$1.errorDescription) ||
                parameters.hasOwnProperty(Constants$1.error) ||
                parameters.hasOwnProperty(Constants$1.accessToken) ||
                parameters.hasOwnProperty(Constants$1.idToken));
        };
        /**
         * @hidden
         * Used to call the constructor callback with the token/error
         * @param {string} [hash=window.location.hash] - Hash fragment of Url.
         */
        UserAgentApplication.prototype.processCallBack = function (hash, stateInfo, parentCallback) {
            this.logger.info("Processing the callback from redirect response");
            // get the state info from the hash
            if (!stateInfo) {
                stateInfo = this.getResponseState(hash);
            }
            var response;
            var authErr;
            // Save the token info from the hash
            try {
                response = this.saveTokenFromHash(hash, stateInfo);
            }
            catch (err) {
                authErr = err;
            }
            // remove hash from the cache
            this.cacheStorage.removeItem(Constants$1.urlHash);
            try {
                // Clear the cookie in the hash
                this.cacheStorage.clearCookie();
                var accountState = this.getAccountState(stateInfo.state);
                if (response) {
                    if ((stateInfo.requestType === Constants$1.renewToken) || response.accessToken) {
                        if (window.parent !== window) {
                            this.logger.verbose("Window is in iframe, acquiring token silently");
                        }
                        else {
                            this.logger.verbose("acquiring token interactive in progress");
                        }
                        response.tokenType = Constants$1.accessToken;
                    }
                    else if (stateInfo.requestType === Constants$1.login) {
                        response.tokenType = Constants$1.idToken;
                    }
                    if (!parentCallback) {
                        this.authResponseHandler(Constants$1.interactionTypeRedirect, response);
                        return;
                    }
                }
                else if (!parentCallback) {
                    this.authErrorHandler(Constants$1.interactionTypeRedirect, authErr, buildResponseStateOnly(accountState));
                    return;
                }
                parentCallback(response, authErr);
            }
            catch (err) {
                this.logger.error("Error occurred in token received callback function: " + err);
                throw ClientAuthError.createErrorInCallbackFunction(err.toString());
            }
        };
        /**
         * @hidden
         * This method must be called for processing the response received from the STS. It extracts the hash, processes the token or error information and saves it in the cache. It then
         * calls the registered callbacks in case of redirect or resolves the promises with the result.
         * @param {string} [hash=window.location.hash] - Hash fragment of Url.
         */
        UserAgentApplication.prototype.handleAuthenticationResponse = function (hash) {
            // retrieve the hash
            if (hash == null) {
                hash = window.location.hash;
            }
            var self = null;
            var isPopup = false;
            var isWindowOpenerMsal = false;
            // Check if the current window opened the iFrame/popup
            try {
                isWindowOpenerMsal = window.opener && window.opener.msal && window.opener.msal !== window.msal;
            }
            catch (err) {
                // err = SecurityError: Blocked a frame with origin "[url]" from accessing a cross-origin frame.
                isWindowOpenerMsal = false;
            }
            // Set the self to the window that created the popup/iframe
            if (isWindowOpenerMsal) {
                self = window.opener.msal;
                isPopup = true;
            }
            else if (window.parent && window.parent.msal) {
                self = window.parent.msal;
            }
            // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically
            var stateInfo = self.getResponseState(hash);
            var tokenResponseCallback = null;
            self.logger.info("Returned from redirect url");
            // If parent window is the msal instance which opened the current window (iframe)
            if (this.parentIsMsal()) {
                tokenResponseCallback = window.parent.callbackMappedToRenewStates[stateInfo.state];
            }
            // Current window is window opener (popup)
            else if (isWindowOpenerMsal) {
                tokenResponseCallback = window.opener.callbackMappedToRenewStates[stateInfo.state];
            }
            // Redirect cases
            else {
                tokenResponseCallback = null;
                // if set to navigate to loginRequest page post login
                if (self.config.auth.navigateToLoginRequestUrl) {
                    self.cacheStorage.setItem(Constants$1.urlHash, hash);
                    if (window.parent === window && !isPopup) {
                        window.location.href = self.cacheStorage.getItem(Constants$1.loginRequest, self.inCookie);
                    }
                    return;
                }
                else {
                    window.location.hash = "";
                }
                if (!this.redirectCallbacksSet) {
                    // We reached this point too early - cache hash, return and process in handleRedirectCallbacks
                    self.cacheStorage.setItem(Constants$1.urlHash, hash);
                    return;
                }
            }
            self.processCallBack(hash, stateInfo, tokenResponseCallback);
            // If current window is opener, close all windows
            if (isWindowOpenerMsal) {
                for (var i = 0; i < window.opener.openedWindows.length; i++) {
                    window.opener.openedWindows[i].close();
                }
            }
        };
        /**
         * @hidden
         * Returns deserialized portion of URL hash
         * @param hash
         */
        UserAgentApplication.prototype.deserializeHash = function (urlFragment) {
            var hash = UrlUtils.getHashFromUrl(urlFragment);
            return CryptoUtils.deserialize(hash);
        };
        /**
         * @hidden
         * Creates a stateInfo object from the URL fragment and returns it.
         * @param {string} hash  -  Hash passed from redirect page
         * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.
         * @ignore
         */
        UserAgentApplication.prototype.getResponseState = function (hash) {
            var parameters = this.deserializeHash(hash);
            var stateResponse;
            if (!parameters) {
                throw AuthError.createUnexpectedError("Hash was not parsed correctly.");
            }
            if (parameters.hasOwnProperty("state")) {
                stateResponse = {
                    requestType: Constants$1.unknown,
                    state: parameters.state,
                    stateMatch: false
                };
            }
            else {
                throw AuthError.createUnexpectedError("Hash does not contain state.");
            }
            // async calls can fire iframe and login request at the same time if developer does not use the API as expected
            // incoming callback needs to be looked up to find the request type
            // loginRedirect
            if (stateResponse.state === this.cacheStorage.getItem(Constants$1.stateLogin, this.inCookie) || stateResponse.state === this.silentAuthenticationState) { // loginRedirect
                stateResponse.requestType = Constants$1.login;
                stateResponse.stateMatch = true;
                return stateResponse;
            }
            // acquireTokenRedirect
            else if (stateResponse.state === this.cacheStorage.getItem(Constants$1.stateAcquireToken, this.inCookie)) { //acquireTokenRedirect
                stateResponse.requestType = Constants$1.renewToken;
                stateResponse.stateMatch = true;
                return stateResponse;
            }
            // external api requests may have many renewtoken requests for different resource
            if (!stateResponse.stateMatch) {
                stateResponse.requestType = window.requestType;
                var statesInParentContext = window.renewStates;
                for (var i = 0; i < statesInParentContext.length; i++) {
                    if (statesInParentContext[i] === stateResponse.state) {
                        stateResponse.stateMatch = true;
                        break;
                    }
                }
            }
            return stateResponse;
        };
        //#endregion
        //#region Token Processing (Extract to TokenProcessing.ts)
        /**
         * @hidden
         * Used to get token for the specified set of scopes from the cache
         * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token
         * @param {Account} account - Account for which the scopes were requested
         */
        UserAgentApplication.prototype.getCachedToken = function (serverAuthenticationRequest, account) {
            var accessTokenCacheItem = null;
            var scopes = serverAuthenticationRequest.scopes;
            // filter by clientId and account
            var tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null);
            // No match found after initial filtering
            if (tokenCacheItems.length === 0) {
                return null;
            }
            var filteredItems = [];
            // if no authority passed
            if (!serverAuthenticationRequest.authority) {
                // filter by scope
                for (var i = 0; i < tokenCacheItems.length; i++) {
                    var cacheItem = tokenCacheItems[i];
                    var cachedScopes = cacheItem.key.scopes.split(" ");
                    if (ScopeSet.containsScope(cachedScopes, scopes)) {
                        filteredItems.push(cacheItem);
                    }
                }
                // if only one cached token found
                if (filteredItems.length === 1) {
                    accessTokenCacheItem = filteredItems[0];
                    serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);
                }
                // if more than one cached token is found
                else if (filteredItems.length > 1) {
                    throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());
                }
                // if no match found, check if there was a single authority used
                else {
                    var authorityList = this.getUniqueAuthority(tokenCacheItems, "authority");
                    if (authorityList.length > 1) {
                        throw ClientAuthError.createMultipleAuthoritiesInCacheError(scopes.toString());
                    }
                    serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(authorityList[0], this.config.auth.validateAuthority);
                }
            }
            // if an authority is passed in the API
            else {
                // filter by authority and scope
                for (var i = 0; i < tokenCacheItems.length; i++) {
                    var cacheItem = tokenCacheItems[i];
                    var cachedScopes = cacheItem.key.scopes.split(" ");
                    if (ScopeSet.containsScope(cachedScopes, scopes) && UrlUtils.CanonicalizeUri(cacheItem.key.authority) === serverAuthenticationRequest.authority) {
                        filteredItems.push(cacheItem);
                    }
                }
                // no match
                if (filteredItems.length === 0) {
                    return null;
                }
                // if only one cachedToken Found
                else if (filteredItems.length === 1) {
                    accessTokenCacheItem = filteredItems[0];
                }
                else {
                    // if more than cached token is found
                    throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());
                }
            }
            if (accessTokenCacheItem != null) {
                var expired = Number(accessTokenCacheItem.value.expiresIn);
                // If expiration is within offset, it will force renew
                var offset = this.config.system.tokenRenewalOffsetSeconds || 300;
                if (expired && (expired > TimeUtils.now() + offset)) {
                    var idTokenObj = new IdToken(accessTokenCacheItem.value.idToken);
                    if (!account) {
                        account = this.getAccount();
                        if (!account) {
                            throw AuthError.createUnexpectedError("Account should not be null here.");
                        }
                    }
                    var aState = this.getAccountState(serverAuthenticationRequest.state);
                    var response = {
                        uniqueId: "",
                        tenantId: "",
                        tokenType: (accessTokenCacheItem.value.idToken === accessTokenCacheItem.value.accessToken) ? Constants$1.idToken : Constants$1.accessToken,
                        idToken: idTokenObj,
                        idTokenClaims: idTokenObj.claims,
                        accessToken: accessTokenCacheItem.value.accessToken,
                        scopes: accessTokenCacheItem.key.scopes.split(" "),
                        expiresOn: new Date(expired * 1000),
                        account: account,
                        accountState: aState,
                    };
                    ResponseUtils.setResponseIdToken(response, idTokenObj);
                    return response;
                }
                else {
                    this.cacheStorage.removeItem(JSON.stringify(filteredItems[0].key));
                    return null;
                }
            }
            else {
                return null;
            }
        };
        /**
         * @hidden
         * Used to get a unique list of authoritues from the cache
         * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache
         * @ignore
         */
        UserAgentApplication.prototype.getUniqueAuthority = function (accessTokenCacheItems, property) {
            var authorityList = [];
            var flags = [];
            accessTokenCacheItems.forEach(function (element) {
                if (element.key.hasOwnProperty(property) && (flags.indexOf(element.key[property]) === -1)) {
                    flags.push(element.key[property]);
                    authorityList.push(element.key[property]);
                }
            });
            return authorityList;
        };
        /**
         * @hidden
         * Check if ADAL id_token exists and return if exists.
         *
         */
        UserAgentApplication.prototype.extractADALIdToken = function () {
            var adalIdToken = this.cacheStorage.getItem(Constants$1.adalIdToken);
            if (!StringUtils.isEmpty(adalIdToken)) {
                return TokenUtils.extractIdToken(adalIdToken);
            }
            return null;
        };
        /**
         * @hidden
         * Acquires access token using a hidden iframe.
         * @ignore
         */
        UserAgentApplication.prototype.renewToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {
            var scope = scopes.join(" ").toLowerCase();
            this.logger.verbose("renewToken is called for scope:" + scope);
            var frameHandle = this.addHiddenIFrame("msalRenewFrame" + scope);
            this.updateCacheEntries(serverAuthenticationRequest, account);
            this.logger.verbose("Renew token Expected state: " + serverAuthenticationRequest.state);
            // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame
            var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants$1.prompt) + Constants$1.prompt_none;
            window.renewStates.push(serverAuthenticationRequest.state);
            window.requestType = Constants$1.renewToken;
            this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);
            this.logger.infoPii("Navigate to:" + urlNavigate);
            frameHandle.src = "about:blank";
            this.loadIframeTimeout(urlNavigate, "msalRenewFrame" + scope, scope);
        };
        /**
         * @hidden
         * Renews idtoken for app"s own backend when clientId is passed as a single scope in the scopes array.
         * @ignore
         */
        UserAgentApplication.prototype.renewIdToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {
            this.logger.info("renewidToken is called");
            var frameHandle = this.addHiddenIFrame("msalIdTokenFrame");
            this.updateCacheEntries(serverAuthenticationRequest, account);
            this.logger.verbose("Renew Idtoken Expected state: " + serverAuthenticationRequest.state);
            // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame
            var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants$1.prompt) + Constants$1.prompt_none;
            if (this.silentLogin) {
                window.requestType = Constants$1.login;
                this.silentAuthenticationState = serverAuthenticationRequest.state;
            }
            else {
                window.requestType = Constants$1.renewToken;
                window.renewStates.push(serverAuthenticationRequest.state);
            }
            // note: scope here is clientId
            this.registerCallback(serverAuthenticationRequest.state, this.clientId, resolve, reject);
            this.logger.infoPii("Navigate to:" + urlNavigate);
            frameHandle.src = "about:blank";
            this.loadIframeTimeout(urlNavigate, "msalIdTokenFrame", this.clientId);
        };
        /**
         * @hidden
         *
         * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.
         * @param {string} authority authority received in the redirect response from AAD.
         * @param {TokenResponse} requestInfo an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.
         * @param {Account} account account object for which scopes are consented for. The default account is the logged in account.
         * @param {ClientInfo} clientInfo clientInfo received as part of the response comprising of fields uid and utid.
         * @param {IdToken} idToken idToken received as part of the response.
         * @ignore
         * @private
         */
        /* tslint:disable:no-string-literal */
        UserAgentApplication.prototype.saveAccessToken = function (response, authority, parameters, clientInfo, idTokenObj) {
            var scope;
            var accessTokenResponse = __assign({}, response);
            var clientObj = new ClientInfo(clientInfo);
            var expiration;
            // if the response contains "scope"
            if (parameters.hasOwnProperty("scope")) {
                // read the scopes
                scope = parameters["scope"];
                var consentedScopes = scope.split(" ");
                // retrieve all access tokens from the cache, remove the dup scores
                var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);
                for (var i = 0; i < accessTokenCacheItems.length; i++) {
                    var accessTokenCacheItem = accessTokenCacheItems[i];
                    if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {
                        var cachedScopes = accessTokenCacheItem.key.scopes.split(" ");
                        if (ScopeSet.isIntersectingScopes(cachedScopes, consentedScopes)) {
                            this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));
                        }
                    }
                }
                // Generate and cache accessTokenKey and accessTokenValue
                var expiresIn = TimeUtils.parseExpiresIn(parameters[Constants$1.expiresIn]);
                expiration = TimeUtils.now() + expiresIn;
                var accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);
                var accessTokenValue = new AccessTokenValue(parameters[Constants$1.accessToken], idTokenObj.rawIdToken, expiration.toString(), clientInfo);
                this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));
                accessTokenResponse.accessToken = parameters[Constants$1.accessToken];
                accessTokenResponse.scopes = consentedScopes;
            }
            // if the response does not contain "scope" - scope is usually client_id and the token will be id_token
            else {
                scope = this.clientId;
                // Generate and cache accessTokenKey and accessTokenValue
                var accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);
                expiration = Number(idTokenObj.expiration);
                var accessTokenValue = new AccessTokenValue(parameters[Constants$1.idToken], parameters[Constants$1.idToken], expiration.toString(), clientInfo);
                this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));
                accessTokenResponse.scopes = [scope];
                accessTokenResponse.accessToken = parameters[Constants$1.idToken];
            }
            if (expiration) {
                accessTokenResponse.expiresOn = new Date(expiration * 1000);
            }
            else {
                this.logger.error("Could not parse expiresIn parameter");
            }
            return accessTokenResponse;
        };
        /**
         * @hidden
         * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.
         * @ignore
         */
        UserAgentApplication.prototype.saveTokenFromHash = function (hash, stateInfo) {
            this.logger.info("State status:" + stateInfo.stateMatch + "; Request type:" + stateInfo.requestType);
            this.cacheStorage.setItem(Constants$1.msalError, "");
            this.cacheStorage.setItem(Constants$1.msalErrorDescription, "");
            var response = {
                uniqueId: "",
                tenantId: "",
                tokenType: "",
                idToken: null,
                idTokenClaims: null,
                accessToken: null,
                scopes: [],
                expiresOn: null,
                account: null,
                accountState: "",
            };
            var error;
            var hashParams = this.deserializeHash(hash);
            var authorityKey = "";
            var acquireTokenAccountKey = "";
            var idTokenObj = null;
            // If server returns an error
            if (hashParams.hasOwnProperty(Constants$1.errorDescription) || hashParams.hasOwnProperty(Constants$1.error)) {
                this.logger.infoPii("Error :" + hashParams[Constants$1.error] + "; Error description:" + hashParams[Constants$1.errorDescription]);
                this.cacheStorage.setItem(Constants$1.msalError, hashParams[Constants$1.error]);
                this.cacheStorage.setItem(Constants$1.msalErrorDescription, hashParams[Constants$1.errorDescription]);
                // login
                if (stateInfo.requestType === Constants$1.login) {
                    this.loginInProgress = false;
                    this.cacheStorage.setItem(Constants$1.loginError, hashParams[Constants$1.errorDescription] + ":" + hashParams[Constants$1.error]);
                    authorityKey = Storage.generateAuthorityKey(stateInfo.state);
                }
                // acquireToken
                if (stateInfo.requestType === Constants$1.renewToken) {
                    this.acquireTokenInProgress = false;
                    authorityKey = Storage.generateAuthorityKey(stateInfo.state);
                    var account = this.getAccount();
                    var accountId = void 0;
                    if (account && !StringUtils.isEmpty(account.homeAccountIdentifier)) {
                        accountId = account.homeAccountIdentifier;
                    }
                    else {
                        accountId = Constants$1.no_account;
                    }
                    acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountId, stateInfo.state);
                }
                var _a = Constants$1.error, hashErr = hashParams[_a], _b = Constants$1.errorDescription, hashErrDesc = hashParams[_b];
                if (InteractionRequiredAuthError.isInteractionRequiredError(hashErr) ||
                    InteractionRequiredAuthError.isInteractionRequiredError(hashErrDesc)) {
                    error = new InteractionRequiredAuthError(hashParams[Constants$1.error], hashParams[Constants$1.errorDescription]);
                }
                else {
                    error = new ServerError(hashParams[Constants$1.error], hashParams[Constants$1.errorDescription]);
                }
            }
            // If the server returns "Success"
            else {
                // Verify the state from redirect and record tokens to storage if exists
                if (stateInfo.stateMatch) {
                    this.logger.info("State is right");
                    if (hashParams.hasOwnProperty(Constants$1.sessionState)) {
                        this.cacheStorage.setItem(Constants$1.msalSessionState, hashParams[Constants$1.sessionState]);
                    }
                    response.accountState = this.getAccountState(stateInfo.state);
                    var clientInfo = "";
                    // Process access_token
                    if (hashParams.hasOwnProperty(Constants$1.accessToken)) {
                        this.logger.info("Fragment has access token");
                        this.acquireTokenInProgress = false;
                        // retrieve the id_token from response if present
                        if (hashParams.hasOwnProperty(Constants$1.idToken)) {
                            idTokenObj = new IdToken(hashParams[Constants$1.idToken]);
                            response.idToken = idTokenObj;
                            response.idTokenClaims = idTokenObj.claims;
                        }
                        else {
                            idTokenObj = new IdToken(this.cacheStorage.getItem(Constants$1.idTokenKey));
                            response = ResponseUtils.setResponseIdToken(response, idTokenObj);
                        }
                        // retrieve the authority from cache and replace with tenantID
                        var authorityKey_1 = Storage.generateAuthorityKey(stateInfo.state);
                        var authority = this.cacheStorage.getItem(authorityKey_1, this.inCookie);
                        if (!StringUtils.isEmpty(authority)) {
                            authority = UrlUtils.replaceTenantPath(authority, response.tenantId);
                        }
                        // retrieve client_info - if it is not found, generate the uid and utid from idToken
                        if (hashParams.hasOwnProperty(Constants$1.clientInfo)) {
                            clientInfo = hashParams[Constants$1.clientInfo];
                        }
                        else {
                            this.logger.warning("ClientInfo not received in the response from AAD");
                            throw ClientAuthError.createClientInfoNotPopulatedError("ClientInfo not received in the response from the server");
                        }
                        response.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));
                        var accountKey = void 0;
                        if (response.account && !StringUtils.isEmpty(response.account.homeAccountIdentifier)) {
                            accountKey = response.account.homeAccountIdentifier;
                        }
                        else {
                            accountKey = Constants$1.no_account;
                        }
                        acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountKey, stateInfo.state);
                        var acquireTokenAccountKey_noaccount = Storage.generateAcquireTokenAccountKey(Constants$1.no_account, stateInfo.state);
                        var cachedAccount = this.cacheStorage.getItem(acquireTokenAccountKey);
                        var acquireTokenAccount = void 0;
                        // Check with the account in the Cache
                        if (!StringUtils.isEmpty(cachedAccount)) {
                            acquireTokenAccount = JSON.parse(cachedAccount);
                            if (response.account && acquireTokenAccount && Account.compareAccounts(response.account, acquireTokenAccount)) {
                                response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);
                                this.logger.info("The user object received in the response is the same as the one passed in the acquireToken request");
                            }
                            else {
                                this.logger.warning("The account object created from the response is not the same as the one passed in the acquireToken request");
                            }
                        }
                        else if (!StringUtils.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {
                            response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);
                        }
                    }
                    // Process id_token
                    if (hashParams.hasOwnProperty(Constants$1.idToken)) {
                        this.logger.info("Fragment has id token");
                        // login no longer in progress
                        this.loginInProgress = false;
                        // set the idToken
                        idTokenObj = new IdToken(hashParams[Constants$1.idToken]);
                        response = ResponseUtils.setResponseIdToken(response, idTokenObj);
                        if (hashParams.hasOwnProperty(Constants$1.clientInfo)) {
                            clientInfo = hashParams[Constants$1.clientInfo];
                        }
                        else {
                            this.logger.warning("ClientInfo not received in the response from AAD");
                        }
                        authorityKey = Storage.generateAuthorityKey(stateInfo.state);
                        var authority = this.cacheStorage.getItem(authorityKey, this.inCookie);
                        if (!StringUtils.isEmpty(authority)) {
                            authority = UrlUtils.replaceTenantPath(authority, idTokenObj.tenantId);
                        }
                        this.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));
                        response.account = this.account;
                        if (idTokenObj && idTokenObj.nonce) {
                            // check nonce integrity if idToken has nonce - throw an error if not matched
                            if (idTokenObj.nonce !== this.cacheStorage.getItem(Constants$1.nonceIdToken, this.inCookie)) {
                                this.account = null;
                                this.cacheStorage.setItem(Constants$1.loginError, "Nonce Mismatch. Expected Nonce: " + this.cacheStorage.getItem(Constants$1.nonceIdToken, this.inCookie) + "," + "Actual Nonce: " + idTokenObj.nonce);
                                this.logger.error("Nonce Mismatch.Expected Nonce: " + this.cacheStorage.getItem(Constants$1.nonceIdToken, this.inCookie) + "," + "Actual Nonce: " + idTokenObj.nonce);
                                error = ClientAuthError.createNonceMismatchError(this.cacheStorage.getItem(Constants$1.nonceIdToken, this.inCookie), idTokenObj.nonce);
                            }
                            // Save the token
                            else {
                                this.cacheStorage.setItem(Constants$1.idTokenKey, hashParams[Constants$1.idToken]);
                                this.cacheStorage.setItem(Constants$1.msalClientInfo, clientInfo);
                                // Save idToken as access token for app itself
                                this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);
                            }
                        }
                        else {
                            authorityKey = stateInfo.state;
                            acquireTokenAccountKey = stateInfo.state;
                            this.logger.error("Invalid id_token received in the response");
                            error = ClientAuthError.createInvalidIdTokenError(idTokenObj);
                            this.cacheStorage.setItem(Constants$1.msalError, error.errorCode);
                            this.cacheStorage.setItem(Constants$1.msalErrorDescription, error.errorMessage);
                        }
                    }
                }
                // State mismatch - unexpected/invalid state
                else {
                    authorityKey = stateInfo.state;
                    acquireTokenAccountKey = stateInfo.state;
                    var expectedState = this.cacheStorage.getItem(Constants$1.stateLogin, this.inCookie);
                    this.logger.error("State Mismatch.Expected State: " + expectedState + "," + "Actual State: " + stateInfo.state);
                    error = ClientAuthError.createInvalidStateError(stateInfo.state, expectedState);
                    this.cacheStorage.setItem(Constants$1.msalError, error.errorCode);
                    this.cacheStorage.setItem(Constants$1.msalErrorDescription, error.errorMessage);
                }
            }
            this.cacheStorage.setItem(Constants$1.renewStatus + stateInfo.state, Constants$1.tokenRenewStatusCompleted);
            this.cacheStorage.removeAcquireTokenEntries(stateInfo.state);
            // this is required if navigateToLoginRequestUrl=false
            if (this.inCookie) {
                this.cacheStorage.setItemCookie(authorityKey, "", -1);
                this.cacheStorage.clearCookie();
            }
            if (error) {
                throw error;
            }
            if (!response) {
                throw AuthError.createUnexpectedError("Response is null");
            }
            return response;
        };
        /* tslint:enable:no-string-literal */
        //#endregion
        //#region Account
        /**
         * Returns the signed in account
         * (the account object is created at the time of successful login)
         * or null when no state is found
         * @returns {@link Account} - the account object stored in MSAL
         */
        UserAgentApplication.prototype.getAccount = function () {
            // if a session already exists, get the account from the session
            if (this.account) {
                return this.account;
            }
            // frame is used to get idToken and populate the account for the given session
            var rawIdToken = this.cacheStorage.getItem(Constants$1.idTokenKey);
            var rawClientInfo = this.cacheStorage.getItem(Constants$1.msalClientInfo);
            if (!StringUtils.isEmpty(rawIdToken) && !StringUtils.isEmpty(rawClientInfo)) {
                var idToken = new IdToken(rawIdToken);
                var clientInfo = new ClientInfo(rawClientInfo);
                this.account = Account.createAccount(idToken, clientInfo);
                return this.account;
            }
            // if login not yet done, return null
            return null;
        };
        /**
         * @hidden
         *
         * Extracts state value from the accountState sent with the authentication request.
         * @returns {string} scope.
         * @ignore
         */
        UserAgentApplication.prototype.getAccountState = function (state) {
            if (state) {
                var splitIndex = state.indexOf("|");
                if (splitIndex > -1 && splitIndex + 1 < state.length) {
                    return state.substring(splitIndex + 1);
                }
            }
            return state;
        };
        /**
         * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.
         *
         * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.
         */
        UserAgentApplication.prototype.getAllAccounts = function () {
            var accounts = [];
            var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants$1.clientId, Constants$1.homeAccountIdentifier);
            for (var i = 0; i < accessTokenCacheItems.length; i++) {
                var idToken = new IdToken(accessTokenCacheItems[i].value.idToken);
                var clientInfo = new ClientInfo(accessTokenCacheItems[i].value.homeAccountIdentifier);
                var account = Account.createAccount(idToken, clientInfo);
                accounts.push(account);
            }
            return this.getUniqueAccounts(accounts);
        };
        /**
         * @hidden
         *
         * Used to filter accounts based on homeAccountIdentifier
         * @param {Array<Account>}  Accounts - accounts saved in the cache
         * @ignore
         */
        UserAgentApplication.prototype.getUniqueAccounts = function (accounts) {
            if (!accounts || accounts.length <= 1) {
                return accounts;
            }
            var flags = [];
            var uniqueAccounts = [];
            for (var index = 0; index < accounts.length; ++index) {
                if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {
                    flags.push(accounts[index].homeAccountIdentifier);
                    uniqueAccounts.push(accounts[index]);
                }
            }
            return uniqueAccounts;
        };
        //#endregion
        //#region Scopes (Extract to Scopes.ts)
        // Note: "this" dependency in this section is minimal.
        // If pCacheStorage is separated from the class object, or passed as a fn param, scopesUtils.ts can be created
        /**
         * @hidden
         *
         * Used to validate the scopes input parameter requested  by the developer.
         * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
         * @ignore
         */
        UserAgentApplication.prototype.validateInputScope = function (scopes, scopesRequired) {
            if (!scopes) {
                if (scopesRequired) {
                    throw ClientConfigurationError.createScopesRequiredError(scopes);
                }
                else {
                    return;
                }
            }
            // Check that scopes is an array object (also throws error if scopes == null)
            if (!Array.isArray(scopes)) {
                throw ClientConfigurationError.createScopesNonArrayError(scopes);
            }
            // Check that scopes is not an empty array
            if (scopes.length < 1) {
                throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());
            }
            // Check that clientId is passed as single scope
            if (scopes.indexOf(this.clientId) > -1) {
                if (scopes.length > 1) {
                    throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());
                }
            }
        };
        /**
         * @hidden
         *
         * Extracts scope value from the state sent with the authentication request.
         * @param {string} state
         * @returns {string} scope.
         * @ignore
         */
        UserAgentApplication.prototype.getScopeFromState = function (state) {
            if (state) {
                var splitIndex = state.indexOf("|");
                if (splitIndex > -1 && splitIndex + 1 < state.length) {
                    return state.substring(splitIndex + 1);
                }
            }
            return "";
        };
        /**
         * @ignore
         * Appends extraScopesToConsent if passed
         * @param {@link AuthenticationParameters}
         */
        UserAgentApplication.prototype.appendScopes = function (request) {
            var scopes;
            if (request && request.scopes) {
                if (request.extraScopesToConsent) {
                    scopes = request.scopes.concat(request.extraScopesToConsent);
                }
                else {
                    scopes = request.scopes;
                }
            }
            return scopes;
        };
        //#endregion
        //#region Angular
        /**
         * @hidden
         *
         * Broadcast messages - Used only for Angular?  *
         * @param eventName
         * @param data
         */
        UserAgentApplication.prototype.broadcast = function (eventName, data) {
            var evt = new CustomEvent(eventName, { detail: data });
            window.dispatchEvent(evt);
        };
        /**
         * @hidden
         *
         * Helper function to retrieve the cached token
         *
         * @param scopes
         * @param {@link Account} account
         * @param state
         * @return {@link AuthResponse} AuthResponse
         */
        UserAgentApplication.prototype.getCachedTokenInternal = function (scopes, account, state) {
            // Get the current session's account object
            var accountObject = account || this.getAccount();
            if (!accountObject) {
                return null;
            }
            // Construct AuthenticationRequest based on response type
            var newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory.CreateInstance(this.authority, this.config.auth.validateAuthority);
            var responseType = this.getTokenType(accountObject, scopes, true);
            var serverAuthenticationRequest = new ServerRequestParameters(newAuthority, this.clientId, scopes, responseType, this.getRedirectUri(), state);
            // get cached token
            return this.getCachedToken(serverAuthenticationRequest, account);
        };
        /**
         * @hidden
         *
         * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app
         *
         * @param endpoint
         */
        UserAgentApplication.prototype.getScopesForEndpoint = function (endpoint) {
            // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.
            if (this.config.framework.unprotectedResources.length > 0) {
                for (var i = 0; i < this.config.framework.unprotectedResources.length; i++) {
                    if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {
                        return null;
                    }
                }
            }
            // process all protected resources and send the matched one
            if (this.config.framework.protectedResourceMap.size > 0) {
                for (var _i = 0, _a = Array.from(this.config.framework.protectedResourceMap.keys()); _i < _a.length; _i++) {
                    var key = _a[_i];
                    // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1
                    if (endpoint.indexOf(key) > -1) {
                        return this.config.framework.protectedResourceMap.get(key);
                    }
                }
            }
            // default resource will be clientid if nothing specified
            // App will use idtoken for calls to itself
            // check if it's staring from http or https, needs to match with app host
            if (endpoint.indexOf("http://") > -1 || endpoint.indexOf("https://") > -1) {
                if (this.getHostFromUri(endpoint) === this.getHostFromUri(this.getRedirectUri())) {
                    return new Array(this.clientId);
                }
            }
            else {
                // in angular level, the url for $http interceptor call could be relative url,
                // if it's relative call, we'll treat it as app backend call.
                return new Array(this.clientId);
            }
            // if not the app's own backend or not a domain listed in the endpoints structure
            return null;
        };
        /**
         * Return boolean flag to developer to help inform if login is in progress
         * @returns {boolean} true/false
         */
        UserAgentApplication.prototype.getLoginInProgress = function () {
            var pendingCallback = this.cacheStorage.getItem(Constants$1.urlHash);
            if (pendingCallback) {
                return true;
            }
            return this.loginInProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * @param loginInProgress
         */
        UserAgentApplication.prototype.setloginInProgress = function (loginInProgress) {
            this.loginInProgress = loginInProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * returns the status of acquireTokenInProgress
         */
        UserAgentApplication.prototype.getAcquireTokenInProgress = function () {
            return this.acquireTokenInProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * @param acquireTokenInProgress
         */
        UserAgentApplication.prototype.setAcquireTokenInProgress = function (acquireTokenInProgress) {
            this.acquireTokenInProgress = acquireTokenInProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * returns the logger handle
         */
        UserAgentApplication.prototype.getLogger = function () {
            return this.config.system.logger;
        };
        //#endregion
        //#region Getters and Setters
        /**
         *
         * Use to get the redirect uri configured in MSAL or null.
         * Evaluates redirectUri if its a function, otherwise simply returns its value.
         * @returns {string} redirect URL
         *
         */
        UserAgentApplication.prototype.getRedirectUri = function () {
            if (typeof this.config.auth.redirectUri === "function") {
                return this.config.auth.redirectUri();
            }
            return this.config.auth.redirectUri;
        };
        /**
         * Use to get the post logout redirect uri configured in MSAL or null.
         * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.
         *
         * @returns {string} post logout redirect URL
         */
        UserAgentApplication.prototype.getPostLogoutRedirectUri = function () {
            if (typeof this.config.auth.postLogoutRedirectUri === "function") {
                return this.config.auth.postLogoutRedirectUri();
            }
            return this.config.auth.postLogoutRedirectUri;
        };
        /**
         * Use to get the current {@link Configuration} object in MSAL
         *
         * @returns {@link Configuration}
         */
        UserAgentApplication.prototype.getCurrentConfiguration = function () {
            if (!this.config) {
                throw ClientConfigurationError.createNoSetConfigurationError();
            }
            return this.config;
        };
        //#endregion
        //#region String Util (Should be extracted to Utils.ts)
        /**
         * @hidden
         * @ignore
         *
         * extract URI from the host
         *
         * @param {string} URI
         * @returns {string} host from the URI
         */
        UserAgentApplication.prototype.getHostFromUri = function (uri) {
            // remove http:// or https:// from uri
            var extractedUri = String(uri).replace(/^(https?:)\/\//, "");
            extractedUri = extractedUri.split("/")[0];
            return extractedUri;
        };
        /**
         * @hidden
         * @ignore
         *
         * Utils function to create the Authentication
         * @param {@link account} account object
         * @param scopes
         * @param silentCall
         *
         * @returns {string} token type: id_token or access_token
         *
         */
        UserAgentApplication.prototype.getTokenType = function (accountObject, scopes, silentCall) {
            // if account is passed and matches the account object/or set to getAccount() from cache
            // if client-id is passed as scope, get id_token else token/id_token_token (in case no session exists)
            var tokenType;
            // acquireTokenSilent
            if (silentCall) {
                if (Account.compareAccounts(accountObject, this.getAccount())) {
                    tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;
                }
                else {
                    tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.id_token_token;
                }
                return tokenType;
            }
            // all other cases
            else {
                if (!Account.compareAccounts(accountObject, this.getAccount())) {
                    tokenType = ResponseTypes.id_token_token;
                }
                else {
                    tokenType = (scopes.indexOf(this.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;
                }
                return tokenType;
            }
        };
        /**
         * @hidden
         * @ignore
         *
         * Sets the cachekeys for and stores the account information in cache
         * @param account
         * @param state
         * @hidden
         */
        UserAgentApplication.prototype.setAccountCache = function (account, state) {
            // Cache acquireTokenAccountKey
            var accountId = account ? this.getAccountId(account) : Constants$1.no_account;
            var acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountId, state);
            this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));
        };
        /**
         * @hidden
         * @ignore
         *
         * Sets the cacheKey for and stores the authority information in cache
         * @param state
         * @param authority
         * @hidden
         */
        UserAgentApplication.prototype.setAuthorityCache = function (state, authority) {
            // Cache authorityKey
            var authorityKey = Storage.generateAuthorityKey(state);
            this.cacheStorage.setItem(authorityKey, UrlUtils.CanonicalizeUri(authority), this.inCookie);
        };
        /**
         * Updates account, authority, and nonce in cache
         * @param serverAuthenticationRequest
         * @param account
         * @hidden
         * @ignore
         */
        UserAgentApplication.prototype.updateCacheEntries = function (serverAuthenticationRequest, account, loginStartPage) {
            // Cache account and authority
            if (loginStartPage) {
                // Cache the state, nonce, and login request data
                this.cacheStorage.setItem(Constants$1.loginRequest, loginStartPage, this.inCookie);
                this.cacheStorage.setItem(Constants$1.loginError, "");
                this.cacheStorage.setItem(Constants$1.stateLogin, serverAuthenticationRequest.state, this.inCookie);
                this.cacheStorage.setItem(Constants$1.msalError, "");
                this.cacheStorage.setItem(Constants$1.msalErrorDescription, "");
            }
            else {
                this.setAccountCache(account, serverAuthenticationRequest.state);
            }
            // Cache authorityKey
            this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority);
            // Cache nonce
            this.cacheStorage.setItem(Constants$1.nonceIdToken, serverAuthenticationRequest.nonce, this.inCookie);
        };
        /**
         * Returns the unique identifier for the logged in account
         * @param account
         * @hidden
         * @ignore
         */
        UserAgentApplication.prototype.getAccountId = function (account) {
            //return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;
            var accountId;
            if (!StringUtils.isEmpty(account.homeAccountIdentifier)) {
                accountId = account.homeAccountIdentifier;
            }
            else {
                accountId = Constants$1.no_account;
            }
            return accountId;
        };
        /**
         * @hidden
         * @ignore
         *
         * Construct 'tokenRequest' from the available data in adalIdToken
         * @param extraQueryParameters
         * @hidden
         */
        UserAgentApplication.prototype.buildIDTokenRequest = function (request) {
            var tokenRequest = {
                scopes: [this.clientId],
                authority: this.authority,
                account: this.getAccount(),
                extraQueryParameters: request.extraQueryParameters
            };
            return tokenRequest;
        };
        //#endregion
        UserAgentApplication.prototype.getTelemetryManagerFromConfig = function (config, clientId) {
            if (!config) { // if unset
                return null;
            }
            // if set then validate
            var applicationName = config.applicationName, applicationVersion = config.applicationVersion, telemetryEmitter = config.telemetryEmitter;
            if (!applicationName || !applicationVersion || !telemetryEmitter) {
                throw ClientConfigurationError.createTelemetryConfigError(config);
            }
            // if valid then construct
            var telemetryPlatform = {
                sdk: "msal.js",
                sdkVersion: libraryVersion(),
                applicationName: applicationName,
                applicationVersion: applicationVersion
            };
            var telemetryManagerConfig = {
                platform: telemetryPlatform,
                clientId: clientId
            };
            return new TelemetryManager(telemetryManagerConfig, telemetryEmitter);
        };
        __decorate([
            resolveTokenOnlyIfOutOfIframe
        ], UserAgentApplication.prototype, "acquireTokenSilent", null);
        return UserAgentApplication;
    }());

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    /**
     * The default client ID for authentication
     * @internal
     * @ignore
     */
    // TODO: temporary - this is the Azure CLI clientID - we'll replace it when
    // Developer Sign On application is available
    // https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/identity/Azure.Identity/src/Constants.cs#L9
    const DeveloperSignOnClientId = "04b07795-8ddb-461a-bbee-02f9e1bf7b46";
    /**
     * The default tenant for authentication
     * @internal
     * @ignore
     */
    const DefaultTenantId = "common";

    // Copyright (c) Microsoft Corporation.
    /**
     * Enables authentication to Azure Active Directory inside of the web browser
     * using the interactive login flow, either via browser redirects or a popup
     * window.
     */
    class InteractiveBrowserCredential {
        /**
         * Creates an instance of the InteractiveBrowserCredential with the
         * details needed to authenticate against Azure Active Directory with
         * a user identity.
         *
         * @param tenantId The Azure Active Directory tenant (directory) ID.
         * @param clientId The client (application) ID of an App Registration in the tenant.
         * @param options Options for configuring the client which makes the authentication request.
         */
        constructor(options) {
            options = Object.assign({}, IdentityClient.getDefaultOptions(), options, { tenantId: (options && options.tenantId) || DefaultTenantId, 
                // TODO: temporary - this is the Azure CLI clientID - we'll replace it when
                // Developer Sign On application is available
                // https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/identity/Azure.Identity/src/Constants.cs#L9
                clientId: (options && options.clientId) || DeveloperSignOnClientId });
            this.loginStyle = options.loginStyle || "popup";
            if (["redirect", "popup"].indexOf(this.loginStyle) === -1) {
                throw new Error(`Invalid loginStyle: ${options.loginStyle}`);
            }
            this.msalConfig = {
                auth: Object.assign({ clientId: options.clientId, authority: `${options.authorityHost}/${options.tenantId}` }, (options.redirectUri && { redirectUri: options.redirectUri }), (options.postLogoutRedirectUri && { redirectUri: options.postLogoutRedirectUri })),
                cache: {
                    cacheLocation: "localStorage",
                    storeAuthStateInCookie: true
                }
            };
            this.msalObject = new UserAgentApplication(this.msalConfig);
        }
        login() {
            switch (this.loginStyle) {
                case "redirect": {
                    const loginPromise = new Promise((resolve, reject) => {
                        this.msalObject.handleRedirectCallback(resolve, reject);
                    });
                    this.msalObject.loginRedirect();
                    return loginPromise;
                }
                case "popup":
                    return this.msalObject.loginPopup();
            }
        }
        acquireToken(authParams) {
            return __awaiter(this, void 0, void 0, function* () {
                let authResponse;
                try {
                    logger$1.info("InteractiveBrowserCredential: attempting to acquire token silently");
                    authResponse = yield this.msalObject.acquireTokenSilent(authParams);
                }
                catch (err) {
                    if (err instanceof AuthError) {
                        switch (err.errorCode) {
                            case "consent_required":
                            case "interaction_required":
                            case "login_required":
                                logger$1.warning(`InteractiveBrowserCredential: authentication returned errorCode ${err.errorCode}`);
                                break;
                            default:
                                logger$1.warning(`InteractiveBrowserCredential: failed to acquire token: ${err}`);
                                throw err;
                        }
                    }
                }
                let authPromise;
                if (authResponse === undefined) {
                    logger$1.warning(`InteractiveBrowserCredential: silent authentication failed, falling back to interactive method ${this.loginStyle}`);
                    switch (this.loginStyle) {
                        case "redirect":
                            authPromise = new Promise((resolve, reject) => {
                                this.msalObject.handleRedirectCallback(resolve, reject);
                            });
                            this.msalObject.acquireTokenRedirect(authParams);
                            break;
                        case "popup":
                            authPromise = this.msalObject.acquireTokenPopup(authParams);
                            break;
                    }
                    authResponse = authPromise && (yield authPromise);
                }
                return authResponse;
            });
        }
        /**
         * Authenticates with Azure Active Directory and returns an {@link AccessToken} if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes The list of scopes for which the token will have access.
         * @param options The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { span } = createSpan("InteractiveBrowserCredential-getToken", options);
                try {
                    if (!this.msalObject.getAccount()) {
                        yield this.login();
                    }
                    const authResponse = yield this.acquireToken({
                        scopes: Array.isArray(scopes) ? scopes : scopes.split(",")
                    });
                    if (authResponse) {
                        return {
                            token: authResponse.accessToken,
                            expiresOnTimestamp: authResponse.expiresOn.getTime()
                        };
                    }
                    else {
                        return null;
                    }
                }
                catch (err) {
                    span.setStatus({
                        code: CanonicalCode.UNKNOWN,
                        message: err.message
                    });
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    const BrowserNotSupportedError$3 = new Error("DeviceCodeCredential is not supported in the browser.");
    class DeviceCodeCredential {
        constructor(tenantId, clientId, userPromptCallback, options) {
            throw BrowserNotSupportedError$3;
        }
        getToken(scopes, options) {
            throw BrowserNotSupportedError$3;
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Enables authentication to Azure Active Directory with a user's
     * username and password. This credential requires a high degree of
     * trust so you should only use it when other, more secure credential
     * types can't be used.
     */
    class UsernamePasswordCredential {
        /**
         * Creates an instance of the UsernamePasswordCredential with the details
         * needed to authenticate against Azure Active Directory with a username
         * and password.
         *
         * @param tenantIdOrName The Azure Active Directory tenant (directory) ID or name.
         * @param clientId The client (application) ID of an App Registration in the tenant.
         * @param username The user account's e-mail address (user name).
         * @param password The user account's account password
         * @param options Options for configuring the client which makes the authentication request.
         */
        constructor(tenantIdOrName, clientId, username, password, options) {
            this.identityClient = new IdentityClient(options);
            this.tenantId = tenantIdOrName;
            this.clientId = clientId;
            this.username = username;
            this.password = password;
        }
        /**
         * Authenticates with Azure Active Directory and returns an {@link AccessToken} if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes The list of scopes for which the token will have access.
         * @param options The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { span, options: newOptions } = createSpan("UsernamePasswordCredential-getToken", options);
                try {
                    const webResource = this.identityClient.createWebResource({
                        url: `${this.identityClient.authorityHost}/${this.tenantId}/oauth2/v2.0/token`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify({
                            response_type: "token",
                            grant_type: "password",
                            client_id: this.clientId,
                            username: this.username,
                            password: this.password,
                            scope: typeof scopes === "string" ? scopes : scopes.join(" ")
                        }),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        abortSignal: options && options.abortSignal,
                        spanOptions: newOptions.spanOptions
                    });
                    const tokenResponse = yield this.identityClient.sendTokenRequest(webResource);
                    return (tokenResponse && tokenResponse.accessToken) || null;
                }
                catch (err) {
                    const code = err.name === AuthenticationErrorName
                        ? CanonicalCode.UNAUTHENTICATED
                        : CanonicalCode.UNKNOWN;
                    span.setStatus({
                        code,
                        message: err.message
                    });
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT License.
    const BrowserNotSupportedError$4 = new Error("AuthorizationCodeCredential is not supported in the browser.  InteractiveBrowserCredential is more appropriate for this use case.");
    class AuthorizationCodeCredential {
        constructor(tenantId, clientId, clientSecretOrAuthorizationCode, authorizationCodeOrRedirectUri, redirectUriOrOptions, options) {
            throw BrowserNotSupportedError$4;
        }
        getToken(scopes, options) {
            throw BrowserNotSupportedError$4;
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Returns a new instance of the {@link DefaultAzureCredential}.
     */
    function getDefaultAzureCredential() {
        return new DefaultAzureCredential();
    }

    exports.AggregateAuthenticationError = AggregateAuthenticationError;
    exports.AggregateAuthenticationErrorName = AggregateAuthenticationErrorName;
    exports.AuthenticationError = AuthenticationError;
    exports.AuthenticationErrorName = AuthenticationErrorName;
    exports.AuthorizationCodeCredential = AuthorizationCodeCredential;
    exports.ChainedTokenCredential = ChainedTokenCredential;
    exports.ClientCertificateCredential = ClientCertificateCredential;
    exports.ClientSecretCredential = ClientSecretCredential;
    exports.DefaultAzureCredential = DefaultAzureCredential;
    exports.DeviceCodeCredential = DeviceCodeCredential;
    exports.EnvironmentCredential = EnvironmentCredential;
    exports.InteractiveBrowserCredential = InteractiveBrowserCredential;
    exports.ManagedIdentityCredential = ManagedIdentityCredential;
    exports.UsernamePasswordCredential = UsernamePasswordCredential;
    exports.getDefaultAzureCredential = getDefaultAzureCredential;
    exports.logger = logger$1;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=identity.js.map
