{"version":3,"file":"index.js","sources":["../src/tokenCredential.ts","../src/simpleTokenCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions {\n  /**\n   * An AbortSignalLike implementation that can be used to cancel\n   * the token request.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Timeout for pinging services\n   */\n  timeout?: number;\n  /**\n   * Options to create a span using the tracer if any was set.\n   */\n  spanOptions?: any;\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: any): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  return credential\n    && typeof credential.getToken === \"function\"\n    && (credential.signRequest === undefined || credential.getToken.length > 0);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions, AccessToken } from \"./tokenCredential\";\n\n/**\n * A TokenCredential that always returns the given token. This class can be\n * used when the access token is already known or can be retrieved from an\n * outside source.\n */\nexport class SimpleTokenCredential implements TokenCredential {\n  /**\n   * The raw token string.  Can be changed when the token needs to be updated.\n   */\n  public token: string;\n\n  /**\n   * The Date at which the token expires.  Can be changed to update the expiration time.\n   */\n  public expiresOn: Date;\n\n  /**\n   * Creates an instance of TokenCredential.\n   * @param {string} token\n   */\n  constructor(token: string, expiresOn?: Date) {\n    this.token = token;\n    this.expiresOn = expiresOn ? expiresOn : new Date(Date.now() + 60*60*1000);\n  }\n\n  /**\n   * Retrieves the token stored in this RawTokenCredential.\n   *\n   * @param _scopes Ignored since token is already known.\n   * @param _options Ignored since token is already known.\n   * @returns {AccessToken} The access token details.\n   */\n  async getToken(_scopes: string | string[], _options?: GetTokenOptions): Promise<AccessToken | null> {\n    return {\n      token: this.token,\n      expiresOnTimestamp: this.expiresOn.getTime()\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;AA0DA,SAAgB,iBAAiB,CAAC,UAAe;;;;;;IAM/C,OAAO,UAAU;WACZ,OAAO,UAAU,CAAC,QAAQ,KAAK,UAAU;YACxC,UAAU,CAAC,WAAW,KAAK,SAAS,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;CAC/E;;ACnED;AACA,AAIA;;;;;AAKA;;;;;IAeE,+BAAY,KAAa,EAAE,SAAgB;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAAC;KAC5E;;;;;;;;IASK,wCAAQ,GAAd,UAAe,OAA0B,EAAE,QAA0B;;;gBACnE,sBAAO;wBACL,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;qBAC7C,EAAC;;;KACH;IACH,4BAAC;CAAA;;;;;"}