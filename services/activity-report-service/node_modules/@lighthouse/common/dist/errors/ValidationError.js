"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yup = require("yup");

var _DomainError = _interopRequireDefault(require("./DomainError"));

const DEFAULT_MESSAGE = 'The data you submitted was invalid. Please try again with valid data.';

class ValidationError extends _DomainError.default {
  constructor({
    data,
    message = DEFAULT_MESSAGE
  }) {
    // When the data object is a schema validation error, take its data
    // attributes and apply to our wrapped error
    if (data instanceof _yup.ValidationError) {
      const {
        message: validationMessage,
        name,
        ...other
      } = data;
      super(validationMessage);
      this.data = other;
      this.status = 400;
      return;
    }

    super(message);
    this.data = data;
    this.status = 400;
  }

}

exports.default = ValidationError;