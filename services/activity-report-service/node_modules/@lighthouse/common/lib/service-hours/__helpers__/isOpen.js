import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import moment from 'moment-timezone';
import { some } from 'lodash/fp';
import { serviceIntervalsGenerator } from '../../scheduling/generators';
import { Unit } from '../../scheduling/scheduling.types';

/**
 * Checks whether timestamp is within service hours for start and end
 */
export function isOpen(_ref) {
  var serviceHours = _ref.serviceHours,
      timestamp = _ref.timestamp;
  if (!timestamp) return false;
  var start = moment.utc(timestamp).subtract(1, Unit.Day).valueOf();
  var end = moment.utc(timestamp).add(1, Unit.Day).valueOf();
  var serviceIntervalSequence = serviceIntervalsGenerator({
    end: end,
    serviceHours: serviceHours,
    start: start
  });

  var serviceIntervals = _toConsumableArray(serviceIntervalSequence);

  var isOpen = some(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        start = _ref3[0],
        end = _ref3[1];

    return timestamp >= start && timestamp <= end;
  })(serviceIntervals);
  return isOpen;
}
//# sourceMappingURL=isOpen.js.map