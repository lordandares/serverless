{"version":3,"sources":["../../../src/scheduling/strategies/getNextXDayOfXWeekOfMonth.ts"],"names":["moment","Unit","getNextXDayOfXWeekOfMonth","end","isInitial","options","start","timezone","dayOfWeek","duration","frequency","weekOfMonth","durationUnit","unit","durationValue","value","frequencyUnit","frequencyValue","dateCursor","mStartOfMonth","tz","startOf","Month","add","year","month","startDayOfMonth","isoWeekday","weekOffset","day","date","nextOccurrenceEnd","Day","valueOf","nextOccurrenceStart","subtract","nextDateCursor"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,SAA4BC,IAA5B,QAAwC,qBAAxC;AAEA;;;;AAGA,OAAO,SAASC,yBAAT,OAMsB;AAAA,MAL3BC,GAK2B,QAL3BA,GAK2B;AAAA,MAJ3BC,SAI2B,QAJ3BA,SAI2B;AAAA,MAH3BC,OAG2B,QAH3BA,OAG2B;AAAA,MAF3BC,KAE2B,QAF3BA,KAE2B;AAAA,MAD3BC,QAC2B,QAD3BA,QAC2B;AAAA,MACnBC,SADmB,GAC6BH,OAD7B,CACnBG,SADmB;AAAA,MACRC,QADQ,GAC6BJ,OAD7B,CACRI,QADQ;AAAA,MACEC,SADF,GAC6BL,OAD7B,CACEK,SADF;AAAA,MACaC,WADb,GAC6BN,OAD7B,CACaM,WADb;AAAA,MAEbC,YAFa,GAE0BH,QAF1B,CAEnBI,IAFmB;AAAA,MAEQC,aAFR,GAE0BL,QAF1B,CAECM,KAFD;AAAA,MAGbC,aAHa,GAG4BN,SAH5B,CAGnBG,IAHmB;AAAA,MAGSI,cAHT,GAG4BP,SAH5B,CAGEK,KAHF;AAK3B,MAAIG,UAAU,GAAGZ,KAAjB;;AAEA,SAAOY,UAAU,GAAGf,GAApB,EAAyB;AACvB,QAAMgB,aAAa,GAAGf,SAAS,GAC3BJ,MAAM,CAACoB,EAAP,CAAUF,UAAV,EAAsBX,QAAtB,EAAgCc,OAAhC,CAAwCpB,IAAI,CAACqB,KAA7C,CAD2B,GAE3BtB,MAAM,CACHoB,EADH,CACMF,UADN,EACkBX,QADlB,EAEGgB,GAFH,CAEON,cAFP,EAEuBD,aAFvB,EAGGK,OAHH,CAGWpB,IAAI,CAACqB,KAHhB,CAFJ;AAOA,QAAME,IAAI,GAAGL,aAAa,CAACK,IAAd,EAAb;AACA,QAAMC,KAAK,GAAGN,aAAa,CAACM,KAAd,EAAd;AACA,QAAMC,eAAe,GAAGP,aAAa,CAACQ,UAAd,EAAxB;AAEA,QAAMC,UAAU,GAAG,CAACjB,WAAW,GAAG,CAAf,IAAoB,CAAvC;AACA,QAAMkB,GAAG,GACPH,eAAe,GAAGlB,SAAlB,GACIA,SAAS,GAAGkB,eAAZ,GAA8B,CADlC,GAEIlB,SAAS,GAAGkB,eAAZ,GAA8B,CAHpC;AAIA,QAAMI,IAAI,GAAGF,UAAU,GAAGC,GAA1B;AAEA,QAAME,iBAAiB,GAAG/B,MAAM,CAC7BoB,EADuB,CACpBb,QADoB,EAEvBiB,IAFuB,CAElBA,IAFkB,EAGvBC,KAHuB,CAGjBA,KAHiB,EAIvBK,IAJuB,CAIlBA,IAJkB,EAKvBP,GALuB,CAKnB,CALmB,EAKhBtB,IAAI,CAAC+B,GALW,EAMvBX,OANuB,CAMfpB,IAAI,CAAC+B,GANU,EAOvBC,OAPuB,EAA1B;AAQA,QAAMC,mBAAmB,GAAGlC,MAAM,CAC/BoB,EADyB,CACtBW,iBADsB,EACHxB,QADG,EAEzB4B,QAFyB,CAEhBrB,aAFgB,EAEDF,YAFC,EAGzBqB,OAHyB,EAA5B;AAKA,QAAIF,iBAAiB,IAAIG,mBAArB,IAA4CH,iBAAiB,GAAG5B,GAApE,EACE;;AAEF,QAAI+B,mBAAmB,IAAI5B,KAA3B,EAAkC;AAChC,aAAO,CAAC4B,mBAAD,EAAsBH,iBAAiB,GAAG,CAA1C,CAAP;AACD;;AAED,QAAMK,cAAc,GAAGhC,SAAS,GAC5Be,aAAa,CAACI,GAAd,CAAkB,CAAlB,EAAqBtB,IAAI,CAACqB,KAA1B,EAAiCW,OAAjC,EAD4B,GAE5Bd,aAAa,CAACc,OAAd,EAFJ;AAIAf,IAAAA,UAAU,GAAGkB,cAAb;AACD;AACF","sourcesContent":["import moment from 'moment-timezone'\n\nimport { GetNext, Interval, Unit } from '../scheduling.types'\n\n/**\n * Generates next occurrence interval for x day of x week of month strategy\n */\nexport function getNextXDayOfXWeekOfMonth({\n  end,\n  isInitial,\n  options,\n  start,\n  timezone,\n}: GetNext): Interval | void {\n  const { dayOfWeek, duration, frequency, weekOfMonth } = options\n  const { unit: durationUnit, value: durationValue } = duration\n  const { unit: frequencyUnit, value: frequencyValue } = frequency\n\n  let dateCursor = start\n\n  while (dateCursor < end) {\n    const mStartOfMonth = isInitial\n      ? moment.tz(dateCursor, timezone).startOf(Unit.Month)\n      : moment\n          .tz(dateCursor, timezone)\n          .add(frequencyValue, frequencyUnit)\n          .startOf(Unit.Month)\n\n    const year = mStartOfMonth.year()\n    const month = mStartOfMonth.month()\n    const startDayOfMonth = mStartOfMonth.isoWeekday()\n\n    const weekOffset = (weekOfMonth - 1) * 7\n    const day =\n      startDayOfMonth > dayOfWeek\n        ? dayOfWeek - startDayOfMonth + 8\n        : dayOfWeek - startDayOfMonth + 1\n    const date = weekOffset + day\n\n    const nextOccurrenceEnd = moment\n      .tz(timezone)\n      .year(year)\n      .month(month)\n      .date(date)\n      .add(1, Unit.Day)\n      .startOf(Unit.Day)\n      .valueOf()\n    const nextOccurrenceStart = moment\n      .tz(nextOccurrenceEnd, timezone)\n      .subtract(durationValue, durationUnit)\n      .valueOf()\n\n    if (nextOccurrenceEnd <= nextOccurrenceStart || nextOccurrenceEnd > end)\n      return\n\n    if (nextOccurrenceStart >= start) {\n      return [nextOccurrenceStart, nextOccurrenceEnd - 1]\n    }\n\n    const nextDateCursor = isInitial\n      ? mStartOfMonth.add(1, Unit.Month).valueOf()\n      : mStartOfMonth.valueOf()\n\n    dateCursor = nextDateCursor\n  }\n}\n"],"file":"getNextXDayOfXWeekOfMonth.js"}