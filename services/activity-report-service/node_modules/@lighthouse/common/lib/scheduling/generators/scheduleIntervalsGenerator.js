import _regeneratorRuntime from "@babel/runtime/regenerator";

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(scheduleIntervalsGenerator);

import { generateNonRepeatingSchedule, generateRepeatingSchedule } from '../helpers';
import { StrategyTypes } from '../scheduling.types';

/**
 * Generates schedule service and occurrence intervals
 */
export function scheduleIntervalsGenerator(props) {
  var type, isRepeating;
  return _regeneratorRuntime.wrap(function scheduleIntervalsGenerator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          type = props.strategy.type;
          isRepeating = type !== StrategyTypes.NoRepeat;

          if (!isRepeating) {
            _context.next = 5;
            break;
          }

          return _context.delegateYield(generateRepeatingSchedule(props), "t0", 4);

        case 4:
          return _context.abrupt("return", _context.t0);

        case 5:
          return _context.delegateYield(generateNonRepeatingSchedule(props), "t1", 6);

        case 6:
          return _context.abrupt("return", _context.t1);

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
//# sourceMappingURL=scheduleIntervalsGenerator.js.map