{"version":3,"sources":["../../../src/pdf/task/index.js"],"names":["isEmpty","buildTemplateContent","generateDefinition","getFormattedAddress","text","table","getTaskEntryDetails","buildTaskPdf","pdfOptions","data","entity","timezone","timestamp","createdAt","title","fileTitle","generateContent","then","content","type","entry","gps","entityDetails","gpsText","locationText","referenceValue","timezoneHourTime","reverseGeocoded","subTitle","headerSubTitle","style","headerTitle","address","headerAddress","body","titleTable","layout","formGroups"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash'\nimport {\n  buildTemplateContent,\n  generateDefinition,\n  getFormattedAddress,\n  text,\n  table,\n} from '../helpers'\n\nimport { getTaskEntryDetails } from '../../helpers'\n\n/**\n * buildTaskPdf\n *\n * @param {object} pdfOptions - the pdf options\n * @param {string} pdfOptions.fileTitle - pdf file title\n * @param {function} pdfOptions.footer - function executed to generate footer\n * @param {function} pdfOptions.header - function executed to generate header\n * @param {string} pdfOptions.logoUrl - pdf logo url\n * @param {array} pdfOptions.pageMargins - pdf page margins\n * @param {string} pdfOptions.pageOrientation - pdf page orientation\n * @param {string} pdfOptions.pageSize - pdf page size\n * @param {object} pdfOptions.styles - pdf styles\n * @param {object} pdfOptions.title - pdf title\n * @param {object} data - pdf data\n * @param {object} data.entity - task document\n * @param {object} data.locations - locations documents\n * @param {object} data.settings - settings properties\n * @param {string} data.settings.awsS3BaseUrl - aws S3 base url\n * @param {string} data.settings.cloudinaryBaseUrl - cloudinary base url\n * @param {string} data.timezone - timezone string\n * @param {object} data.users - application user documents\n * @param {object} data.zones - zone documents\n * @returns {Promise} returns pdfmake definition object\n */\nexport function buildTaskPdf(pdfOptions, data) {\n  const { entity, timezone } = data\n\n  const timestamp = entity.createdAt\n  const title = entity.title || 'Unknown'\n\n  const fileTitle = `Task Report - ${title}`\n\n  return generateContent(data).then(content =>\n    generateDefinition({\n      content,\n      fileTitle,\n      timestamp,\n      timezone,\n      type: 'Task',\n      ...pdfOptions,\n    })\n  )\n}\n\nfunction generateContent(data) {\n  const { entity } = data\n\n  const { entry, gps = {}, title } = entity\n\n  const entityDetails = getTaskEntryDetails(data)\n\n  const {\n    gpsText,\n    locationText,\n    referenceValue,\n    timezoneHourTime,\n  } = entityDetails\n\n  const reverseGeocoded = gps.reverseGeocoded\n\n  const subTitle = `${locationText ||\n    gpsText} - ${timezoneHourTime} by ${referenceValue}`\n  const headerSubTitle = text(subTitle, { style: 'subTitle' })\n  const headerTitle = text(title, { style: 'title' })\n  const address = !isEmpty(reverseGeocoded)\n    ? getFormattedAddress(reverseGeocoded)\n    : ''\n  const headerAddress = text(address, { style: 'small' })\n\n  const body = !isEmpty(reverseGeocoded)\n    ? [[headerTitle], [headerSubTitle], [headerAddress]]\n    : [[headerTitle], [headerSubTitle]]\n\n  const titleTable = table({\n    body,\n    layout: 'noBorders',\n    style: 'titleTable',\n  })\n\n  return buildTemplateContent(entry.formGroups, data).then(entry => [\n    titleTable,\n    ...entry,\n  ])\n}\n"],"file":"index.js"}