import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { defaults, isFunction } from 'lodash';
import Promise from 'bluebird';
import { LIGHTHOUSE_LOGO_URL, DEFAULT_PAGE_MARGINS, DEFAULT_PAGE_ORIENTATION, DEFAULT_PAGE_SIZE } from '../../../constants';
import { defaultFooter, defaultHeader, defaultStyles } from '../';
export function generateDefinition(options) {
  var content = options.content,
      fileTitle = options.fileTitle,
      _options$footer = options.footer,
      footer = _options$footer === void 0 ? defaultFooter : _options$footer,
      _options$header = options.header,
      header = _options$header === void 0 ? defaultHeader : _options$header,
      _options$logoUrl = options.logoUrl,
      logoUrl = _options$logoUrl === void 0 ? LIGHTHOUSE_LOGO_URL : _options$logoUrl,
      _options$pageMargins = options.pageMargins,
      pageMargins = _options$pageMargins === void 0 ? DEFAULT_PAGE_MARGINS : _options$pageMargins,
      _options$pageOrientat = options.pageOrientation,
      pageOrientation = _options$pageOrientat === void 0 ? DEFAULT_PAGE_ORIENTATION : _options$pageOrientat,
      _options$pageSize = options.pageSize,
      pageSize = _options$pageSize === void 0 ? DEFAULT_PAGE_SIZE : _options$pageSize,
      _options$styles = options.styles,
      styles = _options$styles === void 0 ? {} : _options$styles,
      timestamp = options.timestamp,
      timezone = options.timezone,
      type = options.type;
  var pdfStyles = defaults({}, styles, defaultStyles);
  var pdfInfo = {
    title: fileTitle
  };
  var headerPromise = pdfHeader(header({
    logoUrl: logoUrl,
    timestamp: timestamp,
    timezone: timezone
  }));
  var contentPromise = pdfContent(content);
  var footerPromise = pdfFooter(footer({
    logoUrl: LIGHTHOUSE_LOGO_URL,
    timestamp: timestamp,
    timezone: timezone,
    type: type
  }));
  var promises = [headerPromise, contentPromise, footerPromise];
  return Promise.all(promises).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        header = _ref2[0],
        content = _ref2[1],
        footer = _ref2[2];

    return {
      header: header,
      content: content,
      footer: footer,
      info: pdfInfo,
      pageMargins: pageMargins,
      pageOrientation: pageOrientation,
      pageSize: pageSize,
      styles: pdfStyles
    };
  }).catch(function (err) {
    throw new Error("GenerateDefinitionError: ".concat(err.message));
  });
}

function pdfHeader(header) {
  if (isFunction(header)) {
    return Promise.resolve(header());
  }

  return Promise.resolve(header);
}

function pdfContent(content) {
  if (isFunction(content)) {
    return Promise.resolve(content());
  }

  return Promise.resolve(content);
}

function pdfFooter(footer) {
  if (isFunction(footer)) {
    return Promise.resolve(footer());
  }

  return Promise.resolve(footer);
}
//# sourceMappingURL=index.js.map