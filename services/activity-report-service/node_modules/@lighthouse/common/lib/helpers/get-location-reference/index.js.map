{"version":3,"sources":["../../../src/helpers/get-location-reference/index.js"],"names":["compact","get","isArray","isPlainObject","reduce","getLocationReference","data","areaLabelPath","geocodedLabelPath","entity","locations","zones","location","zone","locationMap","memo","_id","toString","zoneMap","locationName","name","undefined","zoneName","parts","join","areaLabel","geocodedLabel"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,aAAhC,EAA+CC,MAA/C,QAA6D,QAA7D;AAEA,OAAO,SAASC,oBAAT,GAAyC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAAA,4BAO1CA,IAP0C,CAE5CC,aAF4C;AAAA,MAE5CA,aAF4C,oCAE5B,YAF4B;AAAA,8BAO1CD,IAP0C,CAG5CE,iBAH4C;AAAA,MAG5CA,iBAH4C,sCAGxB,2BAHwB;AAAA,qBAO1CF,IAP0C,CAI5CG,MAJ4C;AAAA,MAI5CA,MAJ4C,6BAInC,EAJmC;AAAA,wBAO1CH,IAP0C,CAK5CI,SAL4C;AAAA,MAK5CA,SAL4C,gCAKhC,EALgC;AAAA,oBAO1CJ,IAP0C,CAM5CK,KAN4C;AAAA,MAM5CA,KAN4C,4BAMpC,EANoC;AAS9C,MAAMC,QAAQ,GAAGH,MAAM,CAACG,QAAxB;AACA,MAAMC,IAAI,GAAGJ,MAAM,CAACI,IAApB,CAV8C,CAY9C;AACA;;AACA,MAAMC,WAAW,GAAGZ,OAAO,CAACQ,SAAD,CAAP,GAChBN,MAAM,CACJM,SADI,EAEJ,UAACK,IAAD,EAAOH,QAAP,EAAoB;AAClBG,IAAAA,IAAI,CAACH,QAAQ,CAACI,GAAT,CAAaC,QAAb,EAAD,CAAJ,GAAgCL,QAAhC;AACA,WAAOG,IAAP;AACD,GALG,EAMJ,EANI,CADU,GAShBL,SATJ;AAWA,MAAMQ,OAAO,GAAGhB,OAAO,CAACS,KAAD,CAAP,GACZP,MAAM,CACJO,KADI,EAEJ,UAACI,IAAD,EAAOF,IAAP,EAAgB;AACdE,IAAAA,IAAI,CAACF,IAAI,CAACG,GAAL,CAASC,QAAT,EAAD,CAAJ,GAA4BJ,IAA5B;AACA,WAAOE,IAAP;AACD,GALG,EAMJ,EANI,CADM,GASZJ,KATJ,CAzB8C,CAoC9C;;AACA,MAAMQ,YAAY,GAAGhB,aAAa,CAACS,QAAD,CAAb,GACjBA,QAAQ,CAACQ,IADQ,GAEjBR,QAAQ,GACNX,GAAG,CAACa,WAAD,YAAiBF,QAAQ,CAACK,QAAT,EAAjB,WADG,GAENI,SAJN;AAMA,MAAMC,QAAQ,GAAGnB,aAAa,CAACU,IAAD,CAAb,GACbA,IAAI,CAACO,IADQ,GAEbP,IAAI,GACFZ,GAAG,CAACiB,OAAD,YAAaL,IAAI,CAACI,QAAL,EAAb,WADD,GAEFI,SAJN;;AAMA,MAAIC,QAAJ,EAAc;AACZ,QAAMC,KAAK,GAAGvB,OAAO,CAAC,CAACsB,QAAD,EAAWH,YAAX,CAAD,CAArB;AACA,WAAOI,KAAK,CAACC,IAAN,CAAW,IAAX,CAAP;AACD;;AAED,MAAMC,SAAS,GAAGxB,GAAG,CAACQ,MAAD,EAASF,aAAT,CAArB;;AAEA,MAAIkB,SAAJ,EAAe;AACb,WAAOA,SAAP;AACD;;AAED,MAAIN,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD;;AAED,MAAMO,aAAa,GAAGzB,GAAG,CAACQ,MAAD,EAASD,iBAAT,CAAzB;;AAEA,MAAIkB,aAAJ,EAAmB;AACjB,WAAOA,aAAP;AACD;;AAED,SAAO,kBAAP;AACD","sourcesContent":["import { compact, get, isArray, isPlainObject, reduce } from 'lodash'\n\nexport function getLocationReference(data = {}) {\n  const {\n    areaLabelPath = 'area.label',\n    geocodedLabelPath = 'gps.reverseGeocoded.label',\n    entity = {},\n    locations = {},\n    zones = {},\n  } = data\n\n  const location = entity.location\n  const zone = entity.zone\n\n  // NOTE we expect locations/zones in object map format so convert array to\n  // format before running through\n  const locationMap = isArray(locations)\n    ? reduce(\n        locations,\n        (memo, location) => {\n          memo[location._id.toString()] = location\n          return memo\n        },\n        {}\n      )\n    : locations\n\n  const zoneMap = isArray(zones)\n    ? reduce(\n        zones,\n        (memo, zone) => {\n          memo[zone._id.toString()] = zone\n          return memo\n        },\n        {}\n      )\n    : zones\n\n  // NOTE location/zone can be passed as an object, object id or plain string\n  const locationName = isPlainObject(location)\n    ? location.name\n    : location\n      ? get(locationMap, `${location.toString()}.name`)\n      : undefined\n\n  const zoneName = isPlainObject(zone)\n    ? zone.name\n    : zone\n      ? get(zoneMap, `${zone.toString()}.name`)\n      : undefined\n\n  if (zoneName) {\n    const parts = compact([zoneName, locationName])\n    return parts.join(', ')\n  }\n\n  const areaLabel = get(entity, areaLabelPath)\n\n  if (areaLabel) {\n    return areaLabel\n  }\n\n  if (locationName) {\n    return locationName\n  }\n\n  const geocodedLabel = get(entity, geocodedLabelPath)\n\n  if (geocodedLabel) {\n    return geocodedLabel\n  }\n\n  return 'Unknown Location'\n}\n"],"file":"index.js"}