import { find, groupBy, map, maxBy } from 'lodash';
import { buildFetchUrl } from '../';
import floatify from '../floatify';
export function getAuditItemsData(items, data) {
  var _data$settings = data.settings;
  _data$settings = _data$settings === void 0 ? {} : _data$settings;
  var awsS3BaseUrl = _data$settings.awsS3BaseUrl,
      cloudinaryBaseUrl = _data$settings.cloudinaryBaseUrl;
  var groupedItems = groupBy(items, 'group.id');
  var auditData = {
    overallActualScore: 0,
    overallMaximumScore: 0
  };
  auditData.items = map(groupedItems, function (items, groupIndex) {
    var key = groupIndex;
    var title = items[0].group.label;
    var groupData = {
      key: key,
      groupMaximumScore: 0,
      groupActualScore: 0,
      title: title
    };
    groupData.items = items.map(function (item, itemIndex) {
      // NOTE: we handle scores of -1, 0 and 1
      // -1 scores are skipped from group max and actual score
      // 0 and 1 must be included in the final scores
      var hasScore = item.score !== null && item.score !== -1;

      if (hasScore) {
        var itemMaximumScore = maxBy(item.scores, 'value');
        var itemMaximumScoreWeight = itemMaximumScore.value * item.weight; //  increment overall audit scores

        groupData.groupMaximumScore = floatify(groupData.groupMaximumScore + itemMaximumScoreWeight);
        groupData.groupActualScore = floatify(groupData.groupActualScore + item.scoreWeight);
      }

      var assetCount = item.assets.length;
      var assets = item.assets.map(function (asset, assetIndex) {
        var assetUrl = buildFetchUrl(asset, {
          awsS3BaseUrl: awsS3BaseUrl,
          cloudinaryBaseUrl: cloudinaryBaseUrl,
          fit: true,
          height: 880,
          width: 880
        });
        var link = "".concat(awsS3BaseUrl, "/").concat(asset);
        var thumbnailUrl = buildFetchUrl(asset, {
          awsS3BaseUrl: awsS3BaseUrl,
          cloudinaryBaseUrl: cloudinaryBaseUrl,
          width: 100
        });
        var key = "".concat(groupIndex, "-item-asset-").concat(assetIndex);
        return {
          assetUrl: assetUrl,
          key: key,
          link: link,
          thumbnailUrl: thumbnailUrl
        };
      });
      var comments = item.comments;
      var label = item.label;
      var score = item.score;
      var key = "".concat(groupIndex, "-item-").concat(itemIndex);
      var matchingScore = find(item.scores, {
        value: score
      }); // NOTE: ensure we have a score otherwise fallback to - value

      var scoreLabel = hasScore && matchingScore ? matchingScore.label : '-';
      var scoreWeight = hasScore ? item.scoreWeight : '-';
      var weight = hasScore ? item.weight : '-';
      return {
        assetCount: assetCount,
        assets: assets,
        comments: comments,
        key: key,
        label: label,
        score: score,
        scoreLabel: scoreLabel,
        scoreWeight: scoreWeight,
        weight: weight
      };
    });
    return groupData;
  });
  return auditData;
}
//# sourceMappingURL=index.js.map