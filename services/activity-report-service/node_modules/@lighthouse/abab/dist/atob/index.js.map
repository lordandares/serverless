{"version":3,"sources":["../../src/atob/index.js"],"names":["atob","data","replace","length","test","output","buffer","accumulatedBits","i","atobLookup","String","fromCharCode","chr","charCodeAt","undefined"],"mappings":";;;;;QAIgBA,I,GAAAA,I;AAJhB;;;;AAIO,SAASA,IAAT,CAAcC,IAAd,EAAoB;AACzB;AACA;AACAA,cAAUA,IAAV;AACA;AACAA,SAAOA,KAAKC,OAAL,CAAa,cAAb,EAA6B,EAA7B,CAAP;AACA;AACA;AACA,MAAID,KAAKE,MAAL,GAAc,CAAd,KAAoB,CAAxB,EAA2B;AACzBF,WAAOA,KAAKC,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAID,KAAKE,MAAL,GAAc,CAAd,KAAoB,CAApB,IAAyB,iBAAiBC,IAAjB,CAAsBH,IAAtB,CAA7B,EAA0D;AACxD,WAAO,IAAP;AACD;AACD;AACA,MAAII,SAAS,EAAb;AACA;AACA;AACA;AACA;AACA,MAAIC,SAAS,CAAb;AACA,MAAIC,kBAAkB,CAAtB;AACA;AACA;AACA;AACA;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,KAAKE,MAAzB,EAAiCK,GAAjC,EAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,eAAW,CAAX;AACAA,cAAUG,WAAWR,KAAKO,CAAL,CAAX,CAAV;AACAD,uBAAmB,CAAnB;AACA;AACA;AACA;AACA,QAAIA,oBAAoB,EAAxB,EAA4B;AAC1BF,gBAAUK,OAAOC,YAAP,CAAoB,CAACL,SAAS,QAAV,KAAuB,EAA3C,CAAV;AACAD,gBAAUK,OAAOC,YAAP,CAAoB,CAACL,SAAS,MAAV,KAAqB,CAAzC,CAAV;AACAD,gBAAUK,OAAOC,YAAP,CAAoBL,SAAS,IAA7B,CAAV;AACAA,eAASC,kBAAkB,CAA3B;AACD;AACD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,oBAAoB,EAAxB,EAA4B;AAC1BD,eAAW,CAAX;AACAD,cAAUK,OAAOC,YAAP,CAAoBL,MAApB,CAAV;AACD,GAHD,MAGO,IAAIC,oBAAoB,EAAxB,EAA4B;AACjCD,eAAW,CAAX;AACAD,cAAUK,OAAOC,YAAP,CAAoB,CAACL,SAAS,MAAV,KAAqB,CAAzC,CAAV;AACAD,cAAUK,OAAOC,YAAP,CAAoBL,SAAS,IAA7B,CAAV;AACD;AACD;AACA,SAAOD,MAAP;AACD;AACD;;;;AAIA,SAASI,UAAT,CAAoBG,GAApB,EAAyB;AACvB,MAAI,QAAQR,IAAR,CAAaQ,GAAb,CAAJ,EAAuB;AACrB,WAAOA,IAAIC,UAAJ,CAAe,CAAf,IAAoB,IAAIA,UAAJ,CAAe,CAAf,CAA3B;AACD;AACD,MAAI,QAAQT,IAAR,CAAaQ,GAAb,CAAJ,EAAuB;AACrB,WAAOA,IAAIC,UAAJ,CAAe,CAAf,IAAoB,IAAIA,UAAJ,CAAe,CAAf,CAApB,GAAwC,EAA/C;AACD;AACD,MAAI,QAAQT,IAAR,CAAaQ,GAAb,CAAJ,EAAuB;AACrB,WAAOA,IAAIC,UAAJ,CAAe,CAAf,IAAoB,IAAIA,UAAJ,CAAe,CAAf,CAApB,GAAwC,EAA/C;AACD;AACD,MAAID,QAAQ,GAAZ,EAAiB;AACf,WAAO,EAAP;AACD;AACD,MAAIA,QAAQ,GAAZ,EAAiB;AACf,WAAO,EAAP;AACD;AACD;AACA,SAAOE,SAAP;AACD","file":"index.js","sourcesContent":["/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nexport function atob(data) {\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"A\".charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"a\".charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - \"0\".charCodeAt(0) + 52;\n  }\n  if (chr === \"+\") {\n    return 62;\n  }\n  if (chr === \"/\") {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n  return undefined;\n}\n\n"]}