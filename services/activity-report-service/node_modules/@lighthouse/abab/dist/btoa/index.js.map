{"version":3,"sources":["../../src/btoa/index.js"],"names":["btoa","s","i","length","charCodeAt","out","groupsOfSix","undefined","j","btoaLookup","idx","String","fromCharCode"],"mappings":";;;;;QAIgBA,I,GAAAA,I;AAJhB;;;;AAIO,SAASA,IAAT,CAAcC,CAAd,EAAiB;AACtB,MAAIC,UAAJ;AACA;AACAD,WAAOA,CAAP;AACA;AACA;AACA,OAAKC,IAAI,CAAT,EAAYA,IAAID,EAAEE,MAAlB,EAA0BD,GAA1B,EAA+B;AAC7B,QAAID,EAAEG,UAAF,CAAaF,CAAb,IAAkB,GAAtB,EAA2B;AACzB,aAAO,IAAP;AACD;AACF;AACD,MAAIG,MAAM,EAAV;AACA,OAAKH,IAAI,CAAT,EAAYA,IAAID,EAAEE,MAAlB,EAA0BD,KAAK,CAA/B,EAAkC;AAChC,QAAMI,cAAc,CAACC,SAAD,EAAYA,SAAZ,EAAuBA,SAAvB,EAAkCA,SAAlC,CAApB;AACAD,gBAAY,CAAZ,IAAiBL,EAAEG,UAAF,CAAaF,CAAb,KAAmB,CAApC;AACAI,gBAAY,CAAZ,IAAiB,CAACL,EAAEG,UAAF,CAAaF,CAAb,IAAkB,IAAnB,KAA4B,CAA7C;AACA,QAAID,EAAEE,MAAF,GAAWD,IAAI,CAAnB,EAAsB;AACpBI,kBAAY,CAAZ,KAAkBL,EAAEG,UAAF,CAAaF,IAAI,CAAjB,KAAuB,CAAzC;AACAI,kBAAY,CAAZ,IAAiB,CAACL,EAAEG,UAAF,CAAaF,IAAI,CAAjB,IAAsB,IAAvB,KAAgC,CAAjD;AACD;AACD,QAAID,EAAEE,MAAF,GAAWD,IAAI,CAAnB,EAAsB;AACpBI,kBAAY,CAAZ,KAAkBL,EAAEG,UAAF,CAAaF,IAAI,CAAjB,KAAuB,CAAzC;AACAI,kBAAY,CAAZ,IAAiBL,EAAEG,UAAF,CAAaF,IAAI,CAAjB,IAAsB,IAAvC;AACD;AACD,SAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIF,YAAYH,MAAhC,EAAwCK,GAAxC,EAA6C;AAC3C,UAAI,OAAOF,YAAYE,CAAZ,CAAP,KAA0B,WAA9B,EAA2C;AACzCH,eAAO,GAAP;AACD,OAFD,MAEO;AACLA,eAAOI,WAAWH,YAAYE,CAAZ,CAAX,CAAP;AACD;AACF;AACF;AACD,SAAOH,GAAP;AACD;;AAED;;;;AAIA,SAASI,UAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIA,MAAM,EAAV,EAAc;AACZ,WAAOC,OAAOC,YAAP,CAAoBF,MAAM,IAAIN,UAAJ,CAAe,CAAf,CAA1B,CAAP;AACD;AACD,MAAIM,MAAM,EAAV,EAAc;AACZ,WAAOC,OAAOC,YAAP,CAAoBF,MAAM,EAAN,GAAW,IAAIN,UAAJ,CAAe,CAAf,CAA/B,CAAP;AACD;AACD,MAAIM,MAAM,EAAV,EAAc;AACZ,WAAOC,OAAOC,YAAP,CAAoBF,MAAM,EAAN,GAAW,IAAIN,UAAJ,CAAe,CAAf,CAA/B,CAAP;AACD;AACD,MAAIM,QAAQ,EAAZ,EAAgB;AACd,WAAO,GAAP;AACD;AACD,MAAIA,QAAQ,EAAZ,EAAgB;AACd,WAAO,GAAP;AACD;AACD;AACA,SAAOH,SAAP;AACD","file":"index.js","sourcesContent":["/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nexport function btoa(s) {\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nfunction btoaLookup(idx) {\n  if (idx < 26) {\n    return String.fromCharCode(idx + \"A\".charCodeAt(0));\n  }\n  if (idx < 52) {\n    return String.fromCharCode(idx - 26 + \"a\".charCodeAt(0));\n  }\n  if (idx < 62) {\n    return String.fromCharCode(idx - 52 + \"0\".charCodeAt(0));\n  }\n  if (idx === 62) {\n    return \"+\";\n  }\n  if (idx === 63) {\n    return \"/\";\n  }\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n"]}