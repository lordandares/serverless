import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";

// TODO is this universal?
var DomainError = /*#__PURE__*/function (_Error) {
  _inherits(DomainError, _Error);

  function DomainError(message) {
    var _this;

    _classCallCheck(this, DomainError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DomainError).call(this, message));
    _this.name = _this.constructor.name; // @ts-ignore support both node and browser environments

    if (typeof Error.captureStackTrace === 'function') {
      // @ts-ignore
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    } else {
      _this.stack = new Error(message).stack;
    }

    return _this;
  }

  return DomainError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

export { DomainError as default };
//# sourceMappingURL=DomainError.js.map