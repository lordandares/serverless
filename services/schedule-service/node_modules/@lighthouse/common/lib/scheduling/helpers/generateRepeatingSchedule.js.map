{"version":3,"sources":["../../../src/scheduling/helpers/generateRepeatingSchedule.ts"],"names":["generateRepeatingSchedule","includes","generateScheduleEnd","hasValidStartAndEnd","IntervalTypes","Unit","occurrenceIntervalsGenerator","serviceIntervalsGenerator","complyingServiceIntervalUnits","Second","Minute","Hour","props","isInitial","serviceHours","start","strategy","end","frequency","options","frequencyUnit","unit","frequencyValue","value","timezone","isStartAndEndValid","serviceIntervalSequence","complyToServiceHours","serviceIntervals","serviceInterval","interval","type","Service","occurrenceIntervalsSequence","occurrenceInterval","Occurrence"],"mappings":"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","sourcesContent":["import { includes } from 'lodash/fp'\n\nimport { generateScheduleEnd, hasValidStartAndEnd } from '.'\nimport {\n  IntervalTypes,\n  ScheduleIntervalsGenerator,\n  Unit,\n} from '../scheduling.types'\nimport { occurrenceIntervalsGenerator, serviceIntervalsGenerator } from '../generators'\n\nexport const complyingServiceIntervalUnits = [\n  Unit.Second,\n  Unit.Minute,\n  Unit.Hour,\n]\n\n/**\n * Generates repeating schedule service and occurrence intervals\n */\nexport function* generateRepeatingSchedule(props: ScheduleIntervalsGenerator) {\n  const { isInitial, serviceHours, start, strategy } = props\n  let { end } = props\n\n  // NOTE support never ending repeating schedule where no end date defined by\n  // setting a custom end date using the frequency unit and value\n  const {\n    options: { frequency },\n  } = strategy\n  const { unit: frequencyUnit, value: frequencyValue } = frequency\n  const { timezone } = serviceHours\n  end = end || generateScheduleEnd({ frequency, start, timezone })\n\n  const isStartAndEndValid = hasValidStartAndEnd({ end, start })\n  if (!isStartAndEndValid) return []\n\n  const serviceIntervalSequence = serviceIntervalsGenerator({\n    end,\n    serviceHours,\n    start,\n  })\n\n  // NOTE: when repeating and is complying to service hours we iterate through\n  // all service intervals otherwise service interval is from the start and end\n  const complyToServiceHours = includes(\n    frequencyUnit,\n    complyingServiceIntervalUnits\n  )\n\n  const serviceIntervals = complyToServiceHours\n    ? [...serviceIntervalSequence]\n    : [[start, end]]\n\n  for (const serviceInterval of serviceIntervals) {\n    yield { interval: serviceInterval, type: IntervalTypes.Service }\n\n    const occurrenceIntervalsSequence = occurrenceIntervalsGenerator({\n      isInitial,\n      serviceInterval,\n      strategy,\n      timezone,\n    })\n\n    for (const occurrenceInterval of occurrenceIntervalsSequence) {\n      yield { interval: occurrenceInterval, type: IntervalTypes.Occurrence }\n    }\n  }\n}\n"],"file":"generateRepeatingSchedule.js"}