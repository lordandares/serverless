{"version":3,"sources":["../../../src/scheduling/strategies/getNext.ts"],"names":["moment","Unit","getNext","end","isInitial","options","start","timezone","duration","frequency","durationUnit","unit","durationValue","value","frequencyUnit","frequencyValue","nextOccurrenceEnd","tz","add","valueOf","Millisecond","nextOccurrenceStart","subtract"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,SAA4BC,IAA5B,QAAwC,qBAAxC;AAEA;;;;AAGA,OAAO,SAASC,OAAT,OAMsB;AAAA,MAL3BC,GAK2B,QAL3BA,GAK2B;AAAA,MAJ3BC,SAI2B,QAJ3BA,SAI2B;AAAA,MAH3BC,OAG2B,QAH3BA,OAG2B;AAAA,MAF3BC,KAE2B,QAF3BA,KAE2B;AAAA,MAD3BC,QAC2B,QAD3BA,QAC2B;AAAA,MACnBC,QADmB,GACKH,OADL,CACnBG,QADmB;AAAA,MACTC,SADS,GACKJ,OADL,CACTI,SADS;AAAA,MAEbC,YAFa,GAE0BF,QAF1B,CAEnBG,IAFmB;AAAA,MAEQC,aAFR,GAE0BJ,QAF1B,CAECK,KAFD;AAAA,MAGbC,aAHa,GAG4BL,SAH5B,CAGnBE,IAHmB;AAAA,MAGSI,cAHT,GAG4BN,SAH5B,CAGEI,KAHF;AAK3B,MAAMG,iBAAiB,GAAGZ,SAAS,GAC/BJ,MAAM,CACHiB,EADH,CACMX,KADN,EACaC,QADb,EAEGW,GAFH,CAEOH,cAFP,EAEuBD,aAFvB,EAGGK,OAHH,EAD+B,GAK/BnB,MAAM,CACHiB,EADH,CACMX,KADN,EACaC,QADb,EAEGW,GAFH,CAEO,CAFP,EAEUjB,IAAI,CAACmB,WAFf,EAGGF,GAHH,CAGOH,cAHP,EAGuBD,aAHvB,EAIGK,OAJH,EALJ;AAWA,MAAME,mBAAmB,GAAGrB,MAAM,CAC/BiB,EADyB,CACtBD,iBADsB,EACHT,QADG,EAEzBe,QAFyB,CAEhBV,aAFgB,EAEDF,YAFC,EAGzBS,OAHyB,EAA5B;AAKA,MAAIH,iBAAiB,IAAIK,mBAArB,IAA4CL,iBAAiB,GAAGb,GAApE,EACE;AAEF,SAAO,CAACkB,mBAAD,EAAsBL,iBAAiB,GAAG,CAA1C,CAAP;AACD","sourcesContent":["import moment from 'moment-timezone'\n\nimport { GetNext, Interval, Unit } from '../scheduling.types'\n\n/**\n * Generates next occurrence interval for stopwatch and window strategy\n */\nexport function getNext({\n  end,\n  isInitial,\n  options,\n  start,\n  timezone,\n}: GetNext): Interval | void {\n  const { duration, frequency } = options\n  const { unit: durationUnit, value: durationValue } = duration\n  const { unit: frequencyUnit, value: frequencyValue } = frequency\n\n  const nextOccurrenceEnd = isInitial\n    ? moment\n        .tz(start, timezone)\n        .add(frequencyValue, frequencyUnit)\n        .valueOf()\n    : moment\n        .tz(start, timezone)\n        .add(1, Unit.Millisecond)\n        .add(frequencyValue, frequencyUnit)\n        .valueOf()\n\n  const nextOccurrenceStart = moment\n    .tz(nextOccurrenceEnd, timezone)\n    .subtract(durationValue, durationUnit)\n    .valueOf()\n\n  if (nextOccurrenceEnd <= nextOccurrenceStart || nextOccurrenceEnd > end)\n    return\n\n  return [nextOccurrenceStart, nextOccurrenceEnd - 1]\n}\n"],"file":"getNext.js"}