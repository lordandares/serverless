{"version":3,"sources":["../../../../src/pdf/helpers/fields/index.js"],"names":["isArray","isEmpty","join","first","map","startsWith","Promise","moment","buildFetchUrl","fetchImage","imageNotFound","imageTables","parseValue","text","toPdf","buildFile","file","settings","extension","name","path","awsS3BaseUrl","link","margin","buildImage","options","alignment","filepath","height","width","cloudinaryBaseUrl","url","fit","then","base64String","image","catch","buildSummaryField","field","timezone","fieldtype","value","isDayFirstDateField","format","isMonthFirstDateField","isFileField","isHtmlField","type","isNumberField","isPhotoField","isSelectField","isSignatureField","isStarField","isSwitchField","isTextField","is12HourTimeField","is24HourTimeField","isDataImage","fileList","ol","parsedValue","displayValue","fontSize","tz","buildTemplateFieldRow","label","showOnRead","isDisplayImageField","labelText","parsed","replace","values","fieldImages","tables","imagesRow","colSpan","layout","hLineWidth","paddingLeft","paddingRight","paddingTop","paddingBottom","vLineWidth","table","body","widths","string"],"mappings":"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","sourcesContent":["import { isArray, isEmpty, join, first, map, startsWith } from 'lodash'\nimport Promise from 'bluebird'\nimport moment from 'moment-timezone'\n\nimport { buildFetchUrl, fetchImage } from '../../../helpers'\nimport { imageNotFound } from '../../../images'\nimport { imageTables, parseValue, text, toPdf } from '../'\n\nexport function buildFile({ file, settings }) {\n  const { extension, name, path } = file\n  const { awsS3BaseUrl } = settings\n\n  const link = `${awsS3BaseUrl}/${path}`\n  return text(`${name}.${extension}`, { link, margin: [0, 0, 0, 10] })\n}\n\nfunction buildImage(options) {\n  const {\n    alignment = 'center',\n    filepath,\n    height = 210,\n    settings,\n    width = 210,\n  } = options\n  const { awsS3BaseUrl, cloudinaryBaseUrl } = settings\n\n  const url = buildFetchUrl(filepath, {\n    awsS3BaseUrl,\n    cloudinaryBaseUrl,\n    fit: true,\n    height: 880,\n    width: 880,\n  })\n\n  const link = `${awsS3BaseUrl}/${filepath}`\n\n  return fetchImage(url)\n    .then(base64String => ({\n      alignment,\n      fit: [width, height],\n      image: base64String,\n      link,\n    }))\n    .catch(() => ({\n      alignment,\n      fit: [width, height],\n      image: imageNotFound,\n    }))\n}\n\nexport function buildSummaryField({ field, settings, timezone }) {\n  const { fieldtype, options = {}, value } = field\n\n  const isDayFirstDateField =\n    fieldtype === 'date' && options.format === 'DD/MM/YY'\n  const isMonthFirstDateField =\n    fieldtype === 'date' && options.format === 'MM/DD/YY'\n  const isFileField = fieldtype === 'file'\n  const isHtmlField = fieldtype === 'text' && options.type === 'html'\n  const isNumberField = fieldtype === 'number'\n  const isPhotoField = fieldtype === 'list' && options.type === 'media'\n  const isSelectField = fieldtype === 'select' && options.type !== 'stars'\n  const isSignatureField = fieldtype === 'text' && options.type === 'signature'\n  const isStarField = fieldtype === 'select' && options.type === 'stars'\n  const isSwitchField = fieldtype === 'switch'\n  const isTextField = fieldtype === 'text'\n  const is12HourTimeField = fieldtype === 'time' && options.format === 'h:mm a'\n  const is24HourTimeField = fieldtype === 'time' && options.format === 'HH:mm'\n\n  // NOTE: html field is not supported for the summary fields but adding\n  // logic to catch this and return empty text for completeness\n  if (isHtmlField) {\n    return { text: '' }\n  }\n\n  if (isSignatureField) {\n    if (!value) return '-'\n\n    if (isDataImage(value)) {\n      return { alignment: 'left', image: value, width: 140 }\n    }\n\n    return fetchImage(value)\n      .then(base64String => {\n        return {\n          alignment: 'left',\n          image: base64String,\n          width: 140,\n        }\n      })\n      .catch(() => {\n        return {\n          alignment: 'left',\n          image: imageNotFound,\n          width: 140,\n        }\n      })\n  }\n\n  if (isPhotoField) {\n    const filepath = first(value)\n\n    // NOTE: if no filepath return empty text as user has not uploaded an image\n    // for this field\n    if (!filepath) {\n      return { text: '' }\n    }\n\n    const image = buildImage({\n      alignment: 'left',\n      filepath,\n      height: 140,\n      width: 140,\n      settings,\n    })\n\n    return image\n  }\n\n  if (isFileField) {\n    const fileList = map(value, file => buildFile({ file, settings }))\n    return { ol: fileList }\n  }\n\n  if (isNumberField || isSelectField || isSwitchField || isTextField) {\n    const parsedValue = parseValue(value)\n    const displayValue = isArray(parsedValue)\n      ? { text: join(parsedValue, ', '), fontSize: 7 }\n      : { text: parsedValue, fontSize: 7 }\n\n    return displayValue\n  }\n\n  if (isStarField) {\n    if (!value) return '-'\n    const displayValue = value === '1' ? `${value} star` : `${value} stars`\n    return displayValue\n  }\n\n  if (\n    isDayFirstDateField ||\n    isMonthFirstDateField ||\n    is12HourTimeField ||\n    is24HourTimeField\n  ) {\n    const format = options.format\n    const displayValue = moment(value)\n      .tz(timezone)\n      .format(format)\n\n    return displayValue\n  }\n\n  // NOTE: return empty text fallback value when no match\n  return { text: '' }\n}\n\nexport function buildTemplateFieldRow({ field, settings, timezone }) {\n  const { fieldtype, label, options = {}, value } = field\n  const { showOnRead = true } = options\n\n  const isDayFirstDateField =\n    fieldtype === 'date' && options.format === 'DD/MM/YY'\n  const isMonthFirstDateField =\n    fieldtype === 'date' && options.format === 'MM/DD/YY'\n  const isFileField = fieldtype === 'file'\n  const isHtmlField = fieldtype === 'text' && options.type === 'html'\n  const isNumberField = fieldtype === 'number'\n  const isPhotoField = fieldtype === 'list' && options.type === 'media'\n  const isSelectField = fieldtype === 'select' && options.type !== 'stars'\n  const isSignatureField = fieldtype === 'text' && options.type === 'signature'\n  const isStarField = fieldtype === 'select' && options.type === 'stars'\n  const isSwitchField = fieldtype === 'switch'\n  const isTextField = fieldtype === 'text'\n  const is12HourTimeField = fieldtype === 'time' && options.format === 'h:mm a'\n  const is24HourTimeField = fieldtype === 'time' && options.format === 'HH:mm'\n  const isDisplayImageField = fieldtype === 'image-display' && showOnRead\n\n  // NOTE: only show field when show on read is true\n  if (!showOnRead) return null\n\n  const labelText = [{ text: label }]\n\n  if (isHtmlField) {\n    const parsed = value.replace(/<p><\\/p>/g, '')\n    return [labelText, toPdf(parsed)]\n  }\n\n  if (isSignatureField) {\n    if (!value) return [labelText, '-']\n\n    return fetchImage(value)\n      .then(base64String => {\n        const values = {\n          alignment: 'left',\n          image: base64String,\n          width: 140,\n        }\n        return [labelText, values]\n      })\n      .catch(() => [\n        labelText,\n        {\n          alignment: 'left',\n          image: imageNotFound,\n          width: 140,\n        },\n      ])\n  }\n\n  if (isDisplayImageField) {\n    return Promise.map([value], filepath =>\n      buildImage({ filepath, settings })\n    ).then(fieldImages => [fieldImages, {}])\n  }\n\n  if (isPhotoField) {\n    return Promise.map(value, filepath =>\n      buildImage({ filepath, settings })\n    ).then(fieldImages => {\n      const tables = !isEmpty(fieldImages) ? imageTables(fieldImages) : []\n\n      const imagesRow = {\n        colSpan: 2,\n        layout: {\n          hLineWidth: () => 0,\n          paddingLeft: () => 0,\n          paddingRight: () => 0,\n          paddingTop: () => 0,\n          paddingBottom: () => 0,\n          vLineWidth: () => 0,\n        },\n        table: {\n          body: [labelText, ...tables],\n          widths: ['*'],\n        },\n      }\n\n      // NOTE: pass empty value here as otherwise\n      // we can accidentally hide content below\n      // this row. Please see the following issue:\n      // https://github.com/bpampuch/pdfmake/issues/1598\n      return [imagesRow, {}]\n    })\n  }\n\n  if (isFileField) {\n    const fileList = map(value, file => buildFile({ file, settings }))\n    return [labelText, { ol: fileList }]\n  }\n\n  if (isNumberField || isSelectField || isSwitchField || isTextField) {\n    const parsedValue = parseValue(value)\n    const displayValue = isArray(parsedValue)\n      ? { text: join(parsedValue, ', ') }\n      : { text: parsedValue }\n\n    return [labelText, displayValue]\n  }\n\n  if (isStarField) {\n    if (!value) return [labelText, '-']\n    const displayValue = value === '1' ? `${value} star` : `${value} stars`\n    return [labelText, displayValue]\n  }\n\n  if (\n    isDayFirstDateField ||\n    isMonthFirstDateField ||\n    is12HourTimeField ||\n    is24HourTimeField\n  ) {\n    const format = options.format\n    const displayValue = value\n      ? moment(value)\n          .tz(timezone)\n          .format(format)\n      : '-'\n\n    return [labelText, displayValue]\n  }\n\n  // NOTE: if no match above null values will be stripped within calling fn\n  return null\n}\n\nfunction isDataImage(string) {\n  return startsWith(string, 'data:image/png;')\n}\n"],"file":"index.js"}