import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { ValidationError } from '../errors';
export { ValidationError };
var defaultValidateOptions = {
  strict: true,
  stripUnknown: true
};
export function validate(_x) {
  return _validate.apply(this, arguments);
}

function _validate() {
  _validate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var schema, data, _ref$options, options;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            schema = _ref.schema, data = _ref.data, _ref$options = _ref.options, options = _ref$options === void 0 ? defaultValidateOptions : _ref$options;
            _context.prev = 1;
            _context.next = 4;
            return schema.validate(data, options);

          case 4:
            return _context.abrupt("return", _context.sent);

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](1);
            throw new ValidationError({
              data: _context.t0
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _validate.apply(this, arguments);
}

export default validate;
//# sourceMappingURL=schema.js.map