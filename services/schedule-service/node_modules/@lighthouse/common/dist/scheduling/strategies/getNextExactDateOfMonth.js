"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextExactDateOfMonth = getNextExactDateOfMonth;

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _scheduling = require("../scheduling.types");

/**
 * Generates next occurrence interval for exact date of month strategy
 */
function getNextExactDateOfMonth({
  end,
  isInitial,
  options,
  start,
  timezone
}) {
  const {
    date,
    duration,
    frequency
  } = options;
  const {
    unit: durationUnit,
    value: durationValue
  } = duration;
  const {
    unit: frequencyUnit,
    value: frequencyValue
  } = frequency;
  let dateCursor = start;

  while (dateCursor < end) {
    const startOfMonth = isInitial ? _momentTimezone.default.tz(dateCursor, timezone).startOf(_scheduling.Unit.Month).valueOf() : _momentTimezone.default.tz(dateCursor, timezone).add(frequencyValue, frequencyUnit).startOf(_scheduling.Unit.Month).valueOf();

    const monthDate = _momentTimezone.default.tz(startOfMonth, timezone).date(date).date();

    const hasExactDate = monthDate === date;

    if (hasExactDate) {
      const nextOccurrenceEnd = _momentTimezone.default.tz(startOfMonth, timezone).date(date).add(1, _scheduling.Unit.Day).valueOf();

      const nextOccurrenceStart = _momentTimezone.default.tz(nextOccurrenceEnd, timezone).subtract(durationValue, durationUnit).valueOf();

      if (nextOccurrenceEnd <= nextOccurrenceStart || nextOccurrenceEnd > end) return;

      if (nextOccurrenceStart >= start) {
        return [nextOccurrenceStart, nextOccurrenceEnd - 1];
      }
    }

    const nextDateCursor = isInitial ? _momentTimezone.default.tz(startOfMonth, timezone).add(1, _scheduling.Unit.Month).valueOf() : startOfMonth;
    dateCursor = nextDateCursor;
  }
}