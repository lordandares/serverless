"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imageTables = imageTables;
exports.summaryFieldsTable = summaryFieldsTable;
exports.summaryStatTable = summaryStatTable;
exports.summaryWrapperTable = summaryWrapperTable;
exports.table = table;
exports.twoColumnTable = twoColumnTable;
exports.threeColumnTable = threeColumnTable;
exports.fourColumnTable = fourColumnTable;
exports.zebraFillColor = zebraFillColor;
exports.WHITE = exports.LIGHT_BLUE = exports.GRAY = void 0;

var _lodash = require("lodash");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _constants = require("../../../constants");

var _ = require("../");

const defaultLayout = {
  fillColor: zebraFillColor,
  hLineWidth: () => 0,
  paddingLeft: () => 5,
  paddingRight: () => 5,
  paddingTop: () => 5,
  paddingBottom: () => 5,
  vLineWidth: () => 0
};
const GRAY = '#DDDDDD';
exports.GRAY = GRAY;
const LIGHT_BLUE = '#F0FBFF';
exports.LIGHT_BLUE = LIGHT_BLUE;
const WHITE = '#FFFFFF';
exports.WHITE = WHITE;

function imageTables(images) {
  const imageRows = (0, _lodash.chunk)(images, _constants.DEFAULT_IMAGE_COLUMN_LENGTH);
  const tables = (0, _lodash.map)(imageRows, (imageRow, index) => {
    const defaultRow = (0, _lodash.fill)(Array(_constants.DEFAULT_IMAGE_COLUMN_LENGTH), {
      text: ''
    });
    const row = (0, _lodash.concat)(imageRow, (0, _lodash.slice)(defaultRow, imageRow.length));
    const isMiddleRow = index !== 1 && index !== imageRows.length;
    const margin = isMiddleRow ? 5 : 0;
    return [{
      headerRows: 0,
      table: {
        body: [[...row]],
        widths: ['*', '*']
      },
      layout: {
        hLineColor: () => GRAY,
        hLineWidth: () => 1,
        paddingLeft: () => 5,
        paddingRight: () => 5,
        paddingTop: () => 5,
        paddingBottom: () => 5,
        vLineColor: () => GRAY,
        vLineWidth: () => 1
      },
      margin: [0, margin, 0, margin]
    }];
  });
  return tables;
}

async function summaryFieldsTable({
  fields,
  settings,
  timezone
}) {
  const tableHeader = (0, _lodash.map)(fields, ({
    label
  }) => (0, _.text)(label, {
    bold: true,
    fontSize: 7
  }));
  const defaultHeaders = (0, _lodash.fill)(Array(_constants.DEFAULT_SUMMARY_FIELDS_COLUMN_LENGTH), {
    text: ''
  });
  const defaultRow = (0, _lodash.fill)(Array(_constants.DEFAULT_SUMMARY_FIELDS_COLUMN_LENGTH), {
    text: ''
  });
  const tableRow = await _bluebird.default.map(fields, field => (0, _.buildSummaryField)({
    field,
    settings,
    timezone
  })); // NOTE: a user can only select three summary fields on the template however
  // if the form group is repeatable we could have more than the default
  // summary field column length so cap otherwise pdf will fail to generate

  const headers = (0, _lodash.take)((0, _lodash.concat)(tableHeader, (0, _lodash.slice)(defaultHeaders, tableHeader.length)), _constants.DEFAULT_SUMMARY_FIELDS_COLUMN_LENGTH);
  const row = (0, _lodash.take)((0, _lodash.concat)(tableRow, (0, _lodash.slice)(defaultRow, tableRow.length)), _constants.DEFAULT_SUMMARY_FIELDS_COLUMN_LENGTH);
  const summaryFieldTable = table({
    body: [headers, row],
    colSpan: 5,
    dontBreakRows: true,
    headerRows: 0,
    layout: {
      hLineWidth: () => 0,
      paddingLeft: () => 0,
      paddingRight: () => 5,
      paddingTop: () => 2,
      paddingBottom: () => 2,
      vLineWidth: () => 0
    },
    // NOTE: pdfmake applies margin/padding to nested tables
    margin: [0, -5, 0, 0],
    widths: ['*', '*', '*']
  });
  return summaryFieldTable;
}

function summaryStatTable(options) {
  const tableOptions = (0, _lodash.defaults)({}, options, {
    layout: {
      fillColor: LIGHT_BLUE,
      hLineWidth: () => 0,
      paddingLeft: () => 10,
      paddingRight: () => 10,
      paddingTop: () => 2,
      paddingBottom: () => 2,
      vLineWidth: () => 0
    },
    widths: ['*']
  });
  return table(tableOptions);
}

function summaryWrapperTable(options) {
  const tableOptions = (0, _lodash.defaults)({}, options, {
    layout: {
      fillColor: WHITE,
      hLineWidth: () => 0,
      paddingLeft: () => 0,
      paddingRight: () => 10,
      paddingTop: () => 0,
      paddingBottom: () => 0,
      vLineWidth: () => 0
    },
    style: 'summaryWrapperTable'
  });
  return table(tableOptions);
}

function table(options) {
  const {
    body,
    colSpan,
    dontBreakRows = false,
    headerRows = 1,
    layout = defaultLayout,
    style = 'table',
    margin,
    widths
  } = options;
  const definition = {
    colSpan,
    layout,
    style,
    table: {
      body,
      // NOTE: be wary of this feature, if a row spans multiple pages it won't
      // be drawn on to the pdf, only pass true here when row will be less than
      // a page
      dontBreakRows,
      headerRows
    },
    margin
  }; // NOTE: only adds widths if passed
  // as otherwise pdfmake will error!
  // if none defined it auto calculates

  if (widths) {
    definition.table.widths = widths;
  }

  return definition;
}

function twoColumnTable(options) {
  const tableOptions = (0, _lodash.defaults)({}, options, {
    widths: ['50%', '50%']
  });
  return table(tableOptions);
}

function threeColumnTable(options) {
  const tableOptions = (0, _lodash.defaults)({}, options, {
    widths: ['33%', '33%', '*']
  });
  return table(tableOptions);
}

function fourColumnTable(options) {
  const tableOptions = (0, _lodash.defaults)({}, options, {
    widths: ['25%', '25%', '25%', '25%']
  });
  return table(tableOptions);
}

function zebraFillColor(index) {
  return index % 2 === 0 ? WHITE : LIGHT_BLUE;
}