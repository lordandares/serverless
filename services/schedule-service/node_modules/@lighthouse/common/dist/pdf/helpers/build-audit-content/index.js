"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildAuditContent = void 0;

var _lodash = require("lodash");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = require("../../../helpers");

var _images = require("../../../images");

var _ = require("../");

var _table = require("../table");

const buildAuditContent = _bluebird.default.method(items => {
  return _bluebird.default.map(items, group => {
    return _bluebird.default.map(group.items, (item, index) => {
      return _bluebird.default.map(item.assets, ({
        assetUrl,
        link
      }) => {
        return (0, _helpers.fetchImage)(assetUrl).then(base64String => ({
          alignment: 'center',
          fit: [210, 210],
          image: base64String,
          link
        })).catch(() => ({
          alignment: 'center',
          fit: [210, 210],
          image: _images.imageNotFound
        }));
      }).then(rowImages => {
        const rows = [];
        const fillColor = index % 2 === 0 ? _table.WHITE : _table.LIGHT_BLUE;
        const hasImages = !(0, _lodash.isEmpty)(rowImages);
        const hasComments = !(0, _lodash.isEmpty)(item.comments);
        rows.push([{
          text: item.label,
          fillColor
        }, {
          text: item.scoreLabel,
          fillColor
        }, {
          alignment: 'center',
          text: item.weight,
          fillColor
        }, {
          alignment: 'right',
          text: item.scoreWeight,
          fillColor
        }]);

        if (hasImages) {
          const imageRow = [{
            colSpan: 4,
            fillColor,
            stack: (0, _.imageTables)(rowImages)
          }];
          rows.push(imageRow);
        }

        if (hasComments) {
          const commentsRow = [{
            colSpan: 4,
            fillColor,
            margin: [0, -10, 0, 0],
            stack: [{
              text: 'Comments:',
              style: 'commentsHeader'
            }, {
              text: item.comments
            }]
          }];
          rows.push(commentsRow);
        }

        return rows;
      });
    }).then(groupTableRows => {
      const actual = (0, _lodash.round)(group.groupActualScore, 1);
      const max = (0, _lodash.round)(group.groupMaximumScore, 1);
      const groupScoreText = (0, _.text)(`${actual} / ${max}`, {
        alignment: 'right',
        bold: true
      });
      const headerText = (0, _.text)(group.title);
      const groupHeaderTable = (0, _.table)({
        body: [[headerText, groupScoreText]],
        layout: 'noBorders',
        style: 'groupHeaderTable',
        widths: ['*', '*']
      });
      const groupTableHeader = [(0, _.text)('Question', {
        bold: true
      }), (0, _.text)('Answer', {
        bold: true
      }), (0, _.text)('Weight', {
        alignment: 'center',
        bold: true
      }), (0, _.text)('Score', {
        alignment: 'right',
        bold: true
      })];
      const groupTable = (0, _.fourColumnTable)({
        headerRows: 0,
        // NOTE: must flatten here as we have arrays of rows
        body: [groupTableHeader, ...(0, _lodash.flatten)(groupTableRows)],
        widths: ['60%', '24%', '8%', '8%']
      });
      const hLine = (0, _.horizontalLine)();
      return [groupHeaderTable, hLine, groupTable];
    });
  });
});

exports.buildAuditContent = buildAuditContent;