"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAuditItemsData = getAuditItemsData;

var _lodash = require("lodash");

var _ = require("../");

var _floatify = _interopRequireDefault(require("../floatify"));

function getAuditItemsData(items, data) {
  const {
    settings: {
      awsS3BaseUrl,
      cloudinaryBaseUrl
    } = {}
  } = data;
  const groupedItems = (0, _lodash.groupBy)(items, 'group.id');
  const auditData = {
    overallActualScore: 0,
    overallMaximumScore: 0
  };
  auditData.items = (0, _lodash.map)(groupedItems, (items, groupIndex) => {
    const key = groupIndex;
    const title = items[0].group.label;
    const groupData = {
      key,
      groupMaximumScore: 0,
      groupActualScore: 0,
      title
    };
    groupData.items = items.map((item, itemIndex) => {
      // NOTE: we handle scores of -1, 0 and 1
      // -1 scores are skipped from group max and actual score
      // 0 and 1 must be included in the final scores
      const hasScore = item.score !== null && item.score !== -1;

      if (hasScore) {
        const itemMaximumScore = (0, _lodash.maxBy)(item.scores, 'value');
        const itemMaximumScoreWeight = itemMaximumScore.value * item.weight; //  increment overall audit scores

        groupData.groupMaximumScore = (0, _floatify.default)(groupData.groupMaximumScore + itemMaximumScoreWeight);
        groupData.groupActualScore = (0, _floatify.default)(groupData.groupActualScore + item.scoreWeight);
      }

      const assetCount = item.assets.length;
      const assets = item.assets.map((asset, assetIndex) => {
        const assetUrl = (0, _.buildFetchUrl)(asset, {
          awsS3BaseUrl,
          cloudinaryBaseUrl,
          fit: true,
          height: 880,
          width: 880
        });
        const link = `${awsS3BaseUrl}/${asset}`;
        const thumbnailUrl = (0, _.buildFetchUrl)(asset, {
          awsS3BaseUrl,
          cloudinaryBaseUrl,
          width: 100
        });
        const key = `${groupIndex}-item-asset-${assetIndex}`;
        return {
          assetUrl,
          key,
          link,
          thumbnailUrl
        };
      });
      const comments = item.comments;
      const label = item.label;
      const score = item.score;
      const key = `${groupIndex}-item-${itemIndex}`;
      const matchingScore = (0, _lodash.find)(item.scores, {
        value: score
      }); // NOTE: ensure we have a score otherwise fallback to - value

      const scoreLabel = hasScore && matchingScore ? matchingScore.label : '-';
      const scoreWeight = hasScore ? item.scoreWeight : '-';
      const weight = hasScore ? item.weight : '-';
      return {
        assetCount,
        assets,
        comments,
        key,
        label,
        score,
        scoreLabel,
        scoreWeight,
        weight
      };
    });
    return groupData;
  });
  return auditData;
}