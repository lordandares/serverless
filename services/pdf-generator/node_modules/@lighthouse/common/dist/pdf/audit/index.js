"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildAuditPdf = buildAuditPdf;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = require("lodash");

var _helpers = require("../helpers");

var _helpers2 = require("../../helpers");

/**
 * buildAuditPdf
 *
 * @param {object} pdfOptions - the pdf options
 * @param {string} pdfOptions.fileTitle - pdf file title
 * @param {function} pdfOptions.footer - function executed to generate footer
 * @param {function} pdfOptions.header - function executed to generate header
 * @param {string} pdfOptions.logoUrl - pdf logo url
 * @param {array} pdfOptions.pageMargins - pdf page margins
 * @param {string} pdfOptions.pageOrientation - pdf page orientation
 * @param {string} pdfOptions.pageSize - pdf page size
 * @param {object} pdfOptions.styles - pdf styles
 * @param {object} pdfOptions.title - pdf title
 * @param {object} data - pdf data
 * @param {object} data.entity - audit document
 * @param {object} data.locations - locations documents
 * @param {object} data.settings - settings properties
 * @param {string} data.settings.awsS3BaseUrl - aws S3 base url
 * @param {string} data.settings.cloudinaryBaseUrl - cloudinary base url
 * @param {string} data.timezone - timezone string
 * @param {object} data.users - application user documents
 * @returns {Promise} returns pdfmake definition object
 */
function buildAuditPdf(pdfOptions, data) {
  const {
    entity,
    timezone
  } = data;
  const timestamp = entity.createdAt;
  const title = entity.title || 'Unknown';
  const fileTitle = `Audit Report - ${title}`;
  return generateContent(data).then(content => (0, _helpers.generateDefinition)({
    content,
    fileTitle,
    timestamp,
    timezone,
    type: 'Audit',
    ...pdfOptions
  })).catch(err => {
    throw new Error(`BuildAuditPdfError: ${err.message}`);
  });
}

function generateContent(data) {
  const {
    entity
  } = data;
  const {
    footerFields = {},
    gps = {},
    headerFields = {},
    score = {},
    title = 'Unknown'
  } = entity;
  const entityDetails = (0, _helpers2.getAuditEntryDetails)(data);
  const {
    gpsText,
    groupedData,
    locationText,
    referenceValue,
    timezoneHourTime,
    scoreText
  } = entityDetails;
  const reverseGeocoded = gps.reverseGeocoded;
  const subTitle = `${locationText || gpsText} - ${timezoneHourTime} by ${referenceValue}`;
  const headerTitle = (0, _helpers.text)(title, {
    style: 'title'
  });
  const headerScore = (0, _helpers.text)(scoreText, {
    alignment: 'right',
    style: 'title'
  });
  const headerSubTitle = (0, _helpers.text)(subTitle, {
    colSpan: 2,
    style: 'subTitle'
  });
  const address = !(0, _lodash.isEmpty)(reverseGeocoded) ? (0, _helpers.getFormattedAddress)(reverseGeocoded) : '';
  const headerAddress = (0, _helpers.text)(address, {
    colSpan: 2,
    style: 'small'
  });
  const scoreBreakdown = (0, _helpers.text)(`${score.actual} / ${score.max}`, {
    alignment: 'right',
    style: 'totalScore'
  });
  const scorePercentage = (0, _helpers.text)(scoreText, {
    alignment: 'right',
    colSpan: 2,
    style: 'totalAuditScore'
  });
  const scoreTitle = (0, _helpers.text)('Total Score', {
    style: 'totalScore'
  });
  const body = !(0, _lodash.isEmpty)(reverseGeocoded) ? [[headerTitle, headerScore], [headerSubTitle], [headerAddress]] : [[headerTitle, headerScore], [headerSubTitle]];
  const titleTable = (0, _helpers.twoColumnTable)({
    body,
    layout: 'noBorders',
    style: 'titleTable',
    widths: ['*', 80]
  });
  const totalScoreTable = (0, _helpers.twoColumnTable)({
    body: [[scoreTitle, scoreBreakdown], [scorePercentage]],
    layout: 'noBorders',
    widths: ['*', 80]
  });
  const hLineTop = (0, _helpers.horizontalLine)({
    margin: [0, 10, 0, 0]
  });
  const hLineBottom = (0, _helpers.horizontalLine)();
  const promises = {
    entry: (0, _helpers.buildAuditContent)(groupedData.items),
    footerTemplate: (0, _helpers.buildTemplateContent)(footerFields.formGroups, data),
    headerTemplate: (0, _helpers.buildTemplateContent)(headerFields.formGroups, data)
  };
  return _bluebird.default.props(promises).then(({
    entry,
    footerTemplate,
    headerTemplate
  }) => {
    return [titleTable, ...headerTemplate, ...entry, hLineTop, totalScoreTable, hLineBottom, ...footerTemplate];
  }).catch(err => {
    throw new Error(`GenerateContentError: ${err.message}`);
  });
}