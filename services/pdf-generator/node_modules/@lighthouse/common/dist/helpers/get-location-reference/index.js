"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocationReference = getLocationReference;

var _lodash = require("lodash");

function getLocationReference(data = {}) {
  const {
    areaLabelPath = 'area.label',
    geocodedLabelPath = 'gps.reverseGeocoded.label',
    entity = {},
    locations = {},
    zones = {}
  } = data;
  const location = entity.location;
  const zone = entity.zone; // NOTE we expect locations/zones in object map format so convert array to
  // format before running through

  const locationMap = (0, _lodash.isArray)(locations) ? (0, _lodash.reduce)(locations, (memo, location) => {
    memo[location._id.toString()] = location;
    return memo;
  }, {}) : locations;
  const zoneMap = (0, _lodash.isArray)(zones) ? (0, _lodash.reduce)(zones, (memo, zone) => {
    memo[zone._id.toString()] = zone;
    return memo;
  }, {}) : zones; // NOTE location/zone can be passed as an object, object id or plain string

  const locationName = (0, _lodash.isPlainObject)(location) ? location.name : location ? (0, _lodash.get)(locationMap, `${location.toString()}.name`) : undefined;
  const zoneName = (0, _lodash.isPlainObject)(zone) ? zone.name : zone ? (0, _lodash.get)(zoneMap, `${zone.toString()}.name`) : undefined;

  if (zoneName) {
    const parts = (0, _lodash.compact)([zoneName, locationName]);
    return parts.join(', ');
  }

  const areaLabel = (0, _lodash.get)(entity, areaLabelPath);

  if (areaLabel) {
    return areaLabel;
  }

  if (locationName) {
    return locationName;
  }

  const geocodedLabel = (0, _lodash.get)(entity, geocodedLabelPath);

  if (geocodedLabel) {
    return geocodedLabel;
  }

  return 'Unknown Location';
}