{"version":3,"sources":["../../src/schema/schema.ts"],"names":["ValidationError","defaultValidateOptions","strict","stripUnknown","validate","schema","data","options"],"mappings":";;AACA,SAASA,eAAT,QAAgC,WAAhC;AAEA,SAASA,eAAT;AAQA,IAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,MAAM,EAAE,IADqB;AAE7BC,EAAAA,YAAY,EAAE;AAFe,CAA/B;AAKA,gBAAsBC,QAAtB;AAAA;AAAA;;;uEAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,MADK,QACLA,MADK,EAELC,IAFK,QAELA,IAFK,sBAGLC,OAHK,EAGLA,OAHK,6BAGKN,sBAHL;AAAA;AAAA;AAAA,mBAMUI,MAAM,CAACD,QAAP,CAAgBE,IAAhB,EAAsBC,OAAtB,CANV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAQG,IAAIP,eAAJ,CAAoB;AACxBM,cAAAA,IAAI;AADoB,aAApB,CARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,eAAeF,QAAf","sourcesContent":["import { Schema, ValidateOptions } from 'yup'\nimport { ValidationError } from '../errors'\n\nexport { ValidationError }\n\ninterface Validate {\n  data: object\n  options?: ValidateOptions\n  schema: Schema<any>\n}\n\nconst defaultValidateOptions = {\n  strict: true,\n  stripUnknown: true,\n}\n\nexport async function validate({\n  schema,\n  data,\n  options = defaultValidateOptions,\n}: Validate) {\n  try {\n    return await schema.validate(data, options)\n  } catch (err) {\n    throw new ValidationError({\n      data: err,\n    })\n  }\n}\n\nexport default validate\n"],"file":"schema.js"}