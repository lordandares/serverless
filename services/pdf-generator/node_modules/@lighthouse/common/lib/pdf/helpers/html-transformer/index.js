import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { compact, includes, isArray, isEmpty, isPlainObject, isString, map, reject } from 'lodash';
import { htmlparser2 } from 'react-html-parser';
var LIST_KEY_MATCHER = ['ol', 'ul'];
var NEW_LINE_MATCHER = /.*\n.*/; // NOTE: this will remove all whitespace except spaces

var WHITSPACE_MATCHER = /[\t\r\n\f]/g;
export function convertToPdfMake(obj) {
  var _objectSpread2;

  if (!isPlainObject(obj)) {
    return '';
  }

  var _obj$children = obj.children,
      children = _obj$children === void 0 ? [] : _obj$children,
      _obj$data = obj.data,
      data = _obj$data === void 0 ? '' : _obj$data,
      _obj$name = obj.name,
      name = _obj$name === void 0 ? '' : _obj$name,
      type = obj.type;

  if (type === 'text' && data) {
    var trimmed = data.replace(WHITSPACE_MATCHER, ''); // NOTE: Originally tried to achieve this by using inline styles, however PDFMake
    // does not support adding margins or padding when applying inline styles
    // (bold/italics/underline).  The easiest way to get around this was to add
    // an extra space after text.

    return trimmed;
  } // NOTE: Reject any children that are WYSIWYG carriage returns


  var filtered = reject(children, ['data', NEW_LINE_MATCHER]);
  var parsed = compact(map(filtered, convertToPdfMake));
  var key = includes(LIST_KEY_MATCHER, name) ? name : 'text'; // NOTE: If the child is an array with a single text string, we just need to return
  // the string, so that the styles can be applied

  var text = isArray(parsed) && parsed.length === 1 && isString(parsed[0]) ? parsed[0] : parsed;
  return _objectSpread({}, getStyleAttributes(obj), (_objectSpread2 = {}, _defineProperty(_objectSpread2, key, text), _defineProperty(_objectSpread2, "preserveLeadingSpaces", true), _objectSpread2));
}
export function getStyleAttributes(_ref) {
  var _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name;
  var result = {};
  if (name === 'em') result.italics = true;
  if (name === 'ins') result.decoration = 'underline';
  if (name === 'strong') result.bold = true;

  if (!result.bold && !result.decoration && !result.italics) {
    result.style = name;
  }

  return result;
}
export function parseHtml(html) {
  if (isEmpty(html) || !isString(html)) {
    return '';
  }

  return htmlparser2.parseDOM(html, {
    decodeEntities: true
  });
}
export function toPdf(htmlString) {
  if (isEmpty(htmlString) || !isString(htmlString)) {
    return [];
  }

  var arr = parseHtml(htmlString);
  return compact(map(arr, convertToPdfMake));
}
//# sourceMappingURL=index.js.map