import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { flatten, isEmpty, round } from 'lodash';
import Promise from 'bluebird';
import { fetchImage } from '../../../helpers';
import { imageNotFound } from '../../../images';
import { fourColumnTable, horizontalLine, imageTables, table, text } from '../';
import { LIGHT_BLUE, WHITE } from '../table';
export var buildAuditContent = Promise.method(function (items) {
  return Promise.map(items, function (group) {
    return Promise.map(group.items, function (item, index) {
      return Promise.map(item.assets, function (_ref) {
        var assetUrl = _ref.assetUrl,
            link = _ref.link;
        return fetchImage(assetUrl).then(function (base64String) {
          return {
            alignment: 'center',
            fit: [210, 210],
            image: base64String,
            link: link
          };
        }).catch(function () {
          return {
            alignment: 'center',
            fit: [210, 210],
            image: imageNotFound
          };
        });
      }).then(function (rowImages) {
        var rows = [];
        var fillColor = index % 2 === 0 ? WHITE : LIGHT_BLUE;
        var hasImages = !isEmpty(rowImages);
        var hasComments = !isEmpty(item.comments);
        rows.push([{
          text: item.label,
          fillColor: fillColor
        }, {
          text: item.scoreLabel,
          fillColor: fillColor
        }, {
          alignment: 'center',
          text: item.weight,
          fillColor: fillColor
        }, {
          alignment: 'right',
          text: item.scoreWeight,
          fillColor: fillColor
        }]);

        if (hasImages) {
          var imageRow = [{
            colSpan: 4,
            fillColor: fillColor,
            stack: imageTables(rowImages)
          }];
          rows.push(imageRow);
        }

        if (hasComments) {
          var commentsRow = [{
            colSpan: 4,
            fillColor: fillColor,
            margin: [0, -10, 0, 0],
            stack: [{
              text: 'Comments:',
              style: 'commentsHeader'
            }, {
              text: item.comments
            }]
          }];
          rows.push(commentsRow);
        }

        return rows;
      });
    }).then(function (groupTableRows) {
      var actual = round(group.groupActualScore, 1);
      var max = round(group.groupMaximumScore, 1);
      var groupScoreText = text("".concat(actual, " / ").concat(max), {
        alignment: 'right',
        bold: true
      });
      var headerText = text(group.title);
      var groupHeaderTable = table({
        body: [[headerText, groupScoreText]],
        layout: 'noBorders',
        style: 'groupHeaderTable',
        widths: ['*', '*']
      });
      var groupTableHeader = [text('Question', {
        bold: true
      }), text('Answer', {
        bold: true
      }), text('Weight', {
        alignment: 'center',
        bold: true
      }), text('Score', {
        alignment: 'right',
        bold: true
      })];
      var groupTable = fourColumnTable({
        headerRows: 0,
        // NOTE: must flatten here as we have arrays of rows
        body: [groupTableHeader].concat(_toConsumableArray(flatten(groupTableRows))),
        widths: ['60%', '24%', '8%', '8%']
      });
      var hLine = horizontalLine();
      return [groupHeaderTable, hLine, groupTable];
    });
  });
});
//# sourceMappingURL=index.js.map