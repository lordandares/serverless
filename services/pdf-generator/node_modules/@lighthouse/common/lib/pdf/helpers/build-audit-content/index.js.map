{"version":3,"sources":["../../../../src/pdf/helpers/build-audit-content/index.js"],"names":["flatten","isEmpty","round","Promise","fetchImage","imageNotFound","fourColumnTable","horizontalLine","imageTables","table","text","LIGHT_BLUE","WHITE","buildAuditContent","method","items","map","group","item","index","assets","assetUrl","link","then","base64String","alignment","fit","image","catch","rowImages","rows","fillColor","hasImages","hasComments","comments","push","label","scoreLabel","weight","scoreWeight","imageRow","colSpan","stack","commentsRow","margin","style","groupTableRows","actual","groupActualScore","max","groupMaximumScore","groupScoreText","bold","headerText","title","groupHeaderTable","body","layout","widths","groupTableHeader","groupTable","headerRows","hLine"],"mappings":"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","sourcesContent":["import { flatten, isEmpty, round } from 'lodash'\nimport Promise from 'bluebird'\n\nimport { fetchImage } from '../../../helpers'\nimport { imageNotFound } from '../../../images'\n\nimport { fourColumnTable, horizontalLine, imageTables, table, text } from '../'\nimport { LIGHT_BLUE, WHITE } from '../table'\n\nexport const buildAuditContent = Promise.method(items => {\n  return Promise.map(items, group => {\n    return Promise.map(group.items, (item, index) => {\n      return Promise.map(item.assets, ({ assetUrl, link }) => {\n        return fetchImage(assetUrl)\n          .then(base64String => ({\n            alignment: 'center',\n            fit: [210, 210],\n            image: base64String,\n            link,\n          }))\n          .catch(() => ({\n            alignment: 'center',\n            fit: [210, 210],\n            image: imageNotFound,\n          }))\n      }).then(rowImages => {\n        const rows = []\n\n        const fillColor = index % 2 === 0 ? WHITE : LIGHT_BLUE\n        const hasImages = !isEmpty(rowImages)\n        const hasComments = !isEmpty(item.comments)\n\n        rows.push([\n          { text: item.label, fillColor },\n          { text: item.scoreLabel, fillColor },\n          { alignment: 'center', text: item.weight, fillColor },\n          { alignment: 'right', text: item.scoreWeight, fillColor },\n        ])\n\n        if (hasImages) {\n          const imageRow = [\n            {\n              colSpan: 4,\n              fillColor,\n              stack: imageTables(rowImages),\n            },\n          ]\n\n          rows.push(imageRow)\n        }\n\n        if (hasComments) {\n          const commentsRow = [\n            {\n              colSpan: 4,\n              fillColor,\n              margin: [0, -10, 0, 0],\n              stack: [\n                { text: 'Comments:', style: 'commentsHeader' },\n                { text: item.comments },\n              ],\n            },\n          ]\n\n          rows.push(commentsRow)\n        }\n\n        return rows\n      })\n    }).then(groupTableRows => {\n      const actual = round(group.groupActualScore, 1)\n      const max = round(group.groupMaximumScore, 1)\n\n      const groupScoreText = text(`${actual} / ${max}`, {\n        alignment: 'right',\n        bold: true,\n      })\n      const headerText = text(group.title)\n\n      const groupHeaderTable = table({\n        body: [[headerText, groupScoreText]],\n        layout: 'noBorders',\n        style: 'groupHeaderTable',\n        widths: ['*', '*'],\n      })\n\n      const groupTableHeader = [\n        text('Question', { bold: true }),\n        text('Answer', { bold: true }),\n        text('Weight', { alignment: 'center', bold: true }),\n        text('Score', { alignment: 'right', bold: true }),\n      ]\n\n      const groupTable = fourColumnTable({\n        headerRows: 0,\n        // NOTE: must flatten here as we have arrays of rows\n        body: [groupTableHeader, ...flatten(groupTableRows)],\n        widths: ['60%', '24%', '8%', '8%'],\n      })\n\n      const hLine = horizontalLine()\n\n      return [groupHeaderTable, hLine, groupTable]\n    })\n  })\n})\n"],"file":"index.js"}