import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { compact, isEmpty } from 'lodash';
import Promise from 'bluebird';
import { buildTemplateFieldRow, horizontalLine, table, text, twoColumnTable } from '../';
export var buildTemplateContent = Promise.method(function () {
  var formGroups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var data = arguments.length > 1 ? arguments[1] : undefined;
  var settings = data.settings,
      timezone = data.timezone;
  return Promise.map(formGroups, function (_ref) {
    var label = _ref.label,
        fieldGroups = _ref.fieldGroups;
    return Promise.map(fieldGroups, function (_ref2) {
      var fields = _ref2.fields;
      return Promise.map(fields, function (field) {
        return buildTemplateFieldRow({
          field: field,
          settings: settings,
          timezone: timezone
        });
      }).then(function (fieldGroupRows) {
        var rows = compact(fieldGroupRows); // NOTE if empty return null so we can
        // prevent this field group section from
        // being created in the pdf. This can occur
        // when we have a display text field

        if (isEmpty(rows)) {
          return null;
        }

        return twoColumnTable({
          headerRows: 0,
          body: _toConsumableArray(rows)
        });
      });
    }).then(function (fieldGroupTables) {
      var fieldGroups = compact(fieldGroupTables);

      if (isEmpty(fieldGroups)) {
        return [];
      }

      var groupHeaderTable = table({
        body: [[text(label)]],
        layout: 'noBorders',
        style: 'groupHeaderTable',
        widths: ['*']
      });
      var hLine = horizontalLine();
      return [groupHeaderTable, hLine].concat(_toConsumableArray(fieldGroups));
    });
  });
});
//# sourceMappingURL=index.js.map