{"version":3,"sources":["../../../src/pdf/issue/index.js"],"names":["get","filter","isEmpty","map","buildTemplateContent","generateDefinition","getFormattedAddress","horizontalLine","table","text","threeColumnTable","getIssueDetails","getStatusDetails","getTimezoneAbbr","getTimezoneDatetime","buildIssuePdf","pdfOptions","data","entity","timezone","timestamp","createdAt","title","fileTitle","generateContent","then","content","type","entry","gps","timeline","entityDetails","assigneeNames","gpsText","locationText","statusColor","statusText","reverseGeocoded","subTitle","headerTitle","style","headerSubTitle","address","headerAddress","body","titleTable","layout","assigneeLabelText","bold","assigneeValueText","statusLabelText","statusValueText","color","metaTable","timelineTitle","timelineHorizontalLine","timelineTable","createTimelineTable","formGroups","timezoneAbbr","timelineHeaderRow","alignment","statusUpdates","timelineBodyRows","colSpan","item","meta","source","next","firstName","lastName","fullName","isNew","isUpdate","isOpen","statusDetails","nextStatusText","activity","datetime","format","showTzAbbr"],"mappings":"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","sourcesContent":["import { get, filter, isEmpty, map } from 'lodash'\n\nimport {\n  buildTemplateContent,\n  generateDefinition,\n  getFormattedAddress,\n  horizontalLine,\n  table,\n  text,\n  threeColumnTable,\n} from '../helpers'\n\nimport {\n  getIssueDetails,\n  getStatusDetails,\n  getTimezoneAbbr,\n  getTimezoneDatetime,\n} from '../../helpers'\n\n/**\n * buildIssuePdf\n *\n * @param {object} pdfOptions - the pdf options\n * @param {string} pdfOptions.fileTitle - pdf file title\n * @param {function} pdfOptions.footer - function executed to generate footer\n * @param {function} pdfOptions.header - function executed to generate header\n * @param {string} pdfOptions.logoUrl - pdf logo url\n * @param {array} pdfOptions.pageMargins - pdf page margins\n * @param {string} pdfOptions.pageOrientation - pdf page orientation\n * @param {string} pdfOptions.pageSize - pdf page size\n * @param {object} pdfOptions.styles - pdf styles\n * @param {object} pdfOptions.title - pdf title\n * @param {object} data - pdf data\n * @param {object} data.entity - issue document\n * @param {object} data.locations - locations documents\n * @param {object} data.settings - settings properties\n * @param {string} data.settings.awsS3BaseUrl - aws S3 base url\n * @param {string} data.settings.cloudinaryBaseUrl - cloudinary base url\n * @param {string} data.timezone - timezone string\n * @param {object} data.users - application user documents\n * @param {object} data.zones - zone documents\n * @returns {Promise} returns pdfmake definition object\n */\nexport function buildIssuePdf(pdfOptions, data) {\n  const { entity, timezone } = data\n\n  const timestamp = entity.createdAt\n  const title = entity.title || 'Unknown'\n\n  const fileTitle = `Issue Report - ${title}`\n\n  return generateContent(data).then(content =>\n    generateDefinition({\n      content,\n      fileTitle,\n      timestamp,\n      timezone,\n      type: 'Issue',\n      ...pdfOptions,\n    })\n  )\n}\n\nfunction generateContent(data) {\n  const { entity, timezone } = data\n  const { entry, gps = {}, timeline = [], title } = entity\n\n  const entityDetails = getIssueDetails(data)\n\n  const {\n    assigneeNames,\n    gpsText,\n    locationText,\n    statusColor,\n    statusText,\n  } = entityDetails\n\n  const reverseGeocoded = gps.reverseGeocoded\n\n  const subTitle = `${locationText || gpsText}`\n  const headerTitle = text(title, { style: 'title' })\n  const headerSubTitle = text(subTitle, { style: 'subTitle' })\n  const address = !isEmpty(reverseGeocoded)\n    ? getFormattedAddress(reverseGeocoded)\n    : ''\n  const headerAddress = text(address, { style: 'small' })\n\n  const body = !isEmpty(reverseGeocoded)\n    ? [[headerTitle], [headerSubTitle], [headerAddress]]\n    : [[headerTitle], [headerSubTitle]]\n\n  const titleTable = table({\n    body,\n    layout: 'noBorders',\n    style: 'titleTable',\n  })\n\n  const assigneeLabelText = text('Assignees', { bold: true })\n  const assigneeValueText = text(assigneeNames)\n  const statusLabelText = text('Status', { bold: true })\n  const statusValueText = text(statusText, { color: statusColor })\n\n  const metaTable = table({\n    body: [\n      [statusLabelText, statusValueText],\n      [assigneeLabelText, assigneeValueText],\n    ],\n    layout: 'noBorders',\n    style: 'metaTable',\n  })\n\n  const timelineTitle = text('Timeline', { style: 'timelineTitle' })\n  const timelineHorizontalLine = horizontalLine()\n  const timelineTable = createTimelineTable(timeline, timezone)\n\n  return buildTemplateContent(entry.formGroups, data).then(entry => [\n    titleTable,\n    metaTable,\n    timelineTitle,\n    timelineHorizontalLine,\n    timelineTable,\n    ...entry,\n  ])\n}\n\nfunction createTimelineTable(timeline, timezone) {\n  const timezoneAbbr = getTimezoneAbbr(timezone)\n\n  const timelineHeaderRow = [\n    text('Activity', { bold: true }),\n    text('User', { bold: true }),\n    text(`Timestamp (${timezoneAbbr})`, { alignment: 'right', bold: true }),\n  ]\n\n  const statusUpdates = filter(timeline, ['meta.field', 'status'])\n\n  const timelineBodyRows = isEmpty(statusUpdates)\n    ? [text('No Timeline activity', { colSpan: 3 })]\n    : map(statusUpdates, item => {\n        const { meta = {}, source, timestamp, type } = item\n\n        const next = get(meta, 'next')\n        const firstName = get(source, 'meta.firstName')\n        const lastName = get(source, 'meta.lastName')\n\n        const fullName =\n          firstName && lastName ? `${firstName} ${lastName}` : 'Unknown User'\n\n        const isNew = type === 'issue-new'\n        const isUpdate = type === 'issue-update'\n        const isOpen = next === 'open'\n\n        const statusDetails = getStatusDetails(next)\n        const nextStatusText = statusDetails.text\n\n        const activity =\n          isNew && isOpen\n            ? 'Issue opened'\n            : isNew && !isOpen\n            ? `Issue opened with status ${nextStatusText}`\n            : isUpdate\n            ? `Issue updated to ${nextStatusText}`\n            : 'Unknown status timeline change'\n\n        const datetime = getTimezoneDatetime({\n          format: 'h:mm a',\n          showTzAbbr: false,\n          timestamp,\n          timezone,\n        })\n\n        return [\n          text(activity),\n          text(fullName),\n          text(datetime, { alignment: 'right' }),\n        ]\n      })\n\n  const timelineTable = threeColumnTable({\n    body: [timelineHeaderRow, ...timelineBodyRows],\n  })\n\n  return timelineTable\n}\n"],"file":"index.js"}