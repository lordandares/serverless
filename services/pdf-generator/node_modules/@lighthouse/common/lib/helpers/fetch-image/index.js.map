{"version":3,"sources":["../../../src/helpers/fetch-image/index.js"],"names":["atob","btoa","fetchPonyfill","Promise","fetch","self","contentTypes","defaultOptions","cache","fetchImage","url","options","fetchOptions","then","response","contentHeader","headers","get","contentType","reject","Error","ok","imageType","arrayBuffer","buffer","base64Flag","imageStr","arrayBufferToBase64","base64","isValid","validateBase64Image","catch","error","console","binary","bytes","slice","call","Uint8Array","forEach","b","String","fromCharCode","base64String","isJpeg","startsWith","validateJpegImage","isPng","validatePngImage","base64string","src","imageData","from","replace","c","charCodeAt","imageCorrupted","length","sequence","i"],"mappings":"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","sourcesContent":["import { atob, btoa } from '@lighthouse/abab'\nimport fetchPonyfill from 'fetch-ponyfill'\nimport Promise from 'bluebird'\n\n// NOTE use the native fetch if it's available in the browser, because the\n// ponyfill (which actually uses the github polyfill) does not support all the\n// same options as native fetch\nconst fetch =\n  (typeof self === 'object' && self.fetch) || fetchPonyfill({ Promise }).fetch\n\nconst contentTypes = {\n  'image/png': 'png',\n  'image/jpeg': 'jpeg',\n}\n\nconst defaultOptions = {\n  // NOTE The cache: no-cache option is important to avoid an issue with CORS\n  // and caching on Chrome. Here's a good explanation of the issue:\n  // https://stackoverflow.com/a/37455118\n  // In our case, when loading the web version of a form, the signature image is\n  // cached without the correct CORS headers. If the pdf is then generated,\n  // there's a mismatch between the cached image headers and the CORS headers\n  // sent from the fetch request, causing an error\n  cache: 'no-cache',\n}\n\nexport function fetchImage(url, options = {}) {\n  const fetchOptions = {\n    ...defaultOptions,\n    ...options,\n  }\n\n  return fetch(url, fetchOptions)\n    .then(response => {\n      const contentHeader = response.headers.get('content-length')\n      const contentType = response.headers.get('content-type')\n\n      // NOTE: the response will be ok but we won't be able to render any\n      // image meaning pdfmake will error. Raise error here and return early.\n      if (contentHeader === '0') {\n        return Promise.reject(\n          new Error(`Failed to fetch image as no content length: ${url}`)\n        )\n      }\n\n      if (!response.ok) {\n        return Promise.reject(new Error(`Failed to fetch image: ${url}`))\n      }\n\n      const imageType = contentTypes[contentType]\n\n      return response.arrayBuffer().then(buffer => ({\n        buffer,\n        imageType,\n      }))\n    })\n    .then(({ buffer, imageType }) => {\n      const base64Flag = `data:image/${imageType};base64,`\n      const imageStr = arrayBufferToBase64(buffer)\n\n      const base64 = `${base64Flag}${imageStr}`\n      const isValid = validateBase64Image(base64)\n\n      if (!isValid) {\n        return Promise.reject(new Error('InvalidImageError'))\n      }\n\n      return base64\n    })\n    .catch(error => {\n      // NOTE: catch all error to log and then rethrow\n      console.error(error)\n      throw error\n    })\n}\n\nfunction arrayBufferToBase64(buffer) {\n  let binary = ''\n  const bytes = [].slice.call(new Uint8Array(buffer))\n\n  bytes.forEach(b => (binary += String.fromCharCode(b)))\n\n  return btoa(binary)\n}\n\nexport function validateBase64Image(base64String) {\n  const isJpeg = base64String.startsWith('data:image/jpeg;base64,')\n\n  if (isJpeg) return validateJpegImage(base64String)\n\n  const isPng = base64String.startsWith('data:image/png;base64,')\n\n  if (isPng) return validatePngImage(base64String)\n\n  return false\n}\n\n// See SO for more info: https://stackoverflow.com/a/41635312\n// Fiddle: https://jsfiddle.net/Lnyxuchw/\nexport function validateJpegImage(base64string) {\n  const src = base64string\n  const imageData = Uint8Array.from(\n    atob(src.replace('data:image/jpeg;base64,', '')),\n    c => c.charCodeAt(0)\n  )\n  const imageCorrupted =\n    imageData[imageData.length - 1] === 217 &&\n    imageData[imageData.length - 2] === 255\n\n  return imageCorrupted\n}\n\n// See SO for more info: https://stackoverflow.com/a/41635312\n// Fiddle: https://jsfiddle.net/Lnyxuchw/\nexport function validatePngImage(base64string) {\n  const src = base64string\n  const imageData = Uint8Array.from(\n    atob(src.replace('data:image/png;base64,', '')),\n    c => c.charCodeAt(0)\n  )\n  const sequence = [0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130] // in hex:\n\n  //check last 12 elements of array so they contains needed values\n  for (let i = 12; i > 0; i--) {\n    if (imageData[imageData.length - i] !== sequence[12 - i]) {\n      return false\n    }\n  }\n\n  return true\n}\n"],"file":"index.js"}