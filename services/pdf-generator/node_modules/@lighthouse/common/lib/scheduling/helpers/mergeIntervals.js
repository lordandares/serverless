import { first, isEmpty, reduce } from 'lodash/fp';

/**
 * Merges overlapping intervals
 * Accepts arrays of intervals and returns a flattened result of overlapping intervals
 *
 * mergeIntervals([[1,15], [11,25], [21,29], [40,1000]])
 * returns [[1,29], [40,1000]]
 */
export function mergeIntervals(intervals) {
  if (isEmpty(intervals)) return intervals;
  var sortedIntervals = intervals.sort(function (a, b) {
    return a[0] - b[0];
  });
  var firstInterval = first(sortedIntervals);
  var stack = reduce(function (accum, interval) {
    var top = accum[accum.length - 1];
    var topBeforeInterval = top[1] < interval[0];
    var topOverlapsInterval = top[1] < interval[1];

    if (topBeforeInterval) {
      accum.push(interval);
    } else if (topOverlapsInterval) {
      accum.pop();
      accum.push([top[0], interval[1]]);
    }

    return accum;
  }, [firstInterval], sortedIntervals);
  return stack;
}
//# sourceMappingURL=mergeIntervals.js.map